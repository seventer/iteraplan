/*
 * iteraplan is an IT Governance web application developed by iteratec, GmbH
 * Copyright (C) 2004 - 2014 iteratec, GmbH
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License version 3 as published by
 * the Free Software Foundation with the addition of the following permission
 * added to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED
 * WORK IN WHICH THE COPYRIGHT IS OWNED BY ITERATEC, ITERATEC DISCLAIMS THE
 * WARRANTY OF NON INFRINGEMENT  OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, see http://www.gnu.org/licenses or write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301 USA.
 *
 * You can contact iteratec GmbH headquarters at Inselkammerstr. 4
 * 82008 Munich - Unterhaching, Germany, or at email address info@iteratec.de.
 *
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Public License version 3.
 *
 * In accordance with Section 7(b) of the GNU Affero General Public License
 * version 3, these Appropriate Legal Notices must retain the display of the
 * "iteraplan" logo. If the display of the logo is not reasonably
 * feasible for technical reasons, the Appropriate Legal Notices must display
 * the words "Powered by iteraplan".
 */
package de.iteratec.visualizationmodel;

import java.awt.geom.Rectangle2D.Float;

import de.iteratec.visualizationmodel.renderer.AVisualizationObjectVisitor;


public class BaseMapSymbol extends CompositeSymbol {

  public static final float  MIN_WIDTH_FINAL  = 280.0F;
  public static final float  MIN_HEIGHT_FINAL = 50.0F;

  public static final String TITLE            = "title";
  public static final String GENERATED        = "generatedInformationText";
  public static final String DESCRIPTION      = "Description";
  public static final String BASE_URL         = "baseUrl";

  public static final String MIN_WIDTH        = "min_width";
  public static final String MIN_HEIGHT       = "min_height";
  public static final String WIDTH            = "width";
  public static final String HEIGHT           = "height";
  public static final String NAKEDEXPORT      = "nakedExport";

  private String             description      = "Graphics generated by iteraplan";
  private String             title;
  private String             generatedInformation;

  private Double             customWidth;
  private Double             customHeight;
  private boolean            naked;

  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public void setGeneratedInformation(String generatedInformation) {
    this.generatedInformation = generatedInformation;
  }

  public String getGeneratedInformation() {
    return generatedInformation;
  }

  /**
   * @return
   *    The width to which the final graphic is scaled. May be null, if no scaling should be applied.
   */
  public Double getCustomWidth() {
    return customWidth;
  }

  public void setCustomWidth(Double customWidth) {
    this.customWidth = customWidth;
  }

  /**
   * @return
   *    The height to which the final graphic is scaled. May be null, if no scaling should be applied.
   */
  public Double getCustomHeight() {
    return customHeight;
  }

  public void setCustomHeight(Double customHeight) {
    this.customHeight = customHeight;
  }

  @Override
  public float getWidth() {
    return Math.max(super.getWidth(), isNaked() ? 0.0F : MIN_WIDTH_FINAL);
  }

  @Override
  public float getHeight() {
    return Math.max(super.getHeight(), isNaked() ? 0.0F : MIN_HEIGHT_FINAL);
  }

  public boolean isNaked() {
    return naked;
  }

  public void setNaked(boolean naked) {
    this.naked = naked;
  }

  @Override
  public void visit(AVisualizationObjectVisitor visitor) {
    visitor.visit(this);
    for (ASymbol child : getChildren()) {
      child.visit(visitor);
    }
    visitor.endSymbol(this);
  }

  public Float getBoundingBox() {
    return DimensionHelper.computeBoundingBox(getChildren());
  }

}
