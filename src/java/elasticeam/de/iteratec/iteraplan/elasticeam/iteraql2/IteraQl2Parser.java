/*
 * iteraplan is an IT Governance web application developed by iteratec, GmbH
 * Copyright (C) 2004 - 2014 iteratec, GmbH
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License version 3 as published by
 * the Free Software Foundation with the addition of the following permission
 * added to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED
 * WORK IN WHICH THE COPYRIGHT IS OWNED BY ITERATEC, ITERATEC DISCLAIMS THE
 * WARRANTY OF NON INFRINGEMENT  OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, see http://www.gnu.org/licenses or write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301 USA.
 *
 * You can contact iteratec GmbH headquarters at Inselkammerstr. 4
 * 82008 Munich - Unterhaching, Germany, or at email address info@iteratec.de.
 *
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Public License version 3.
 *
 * In accordance with Section 7(b) of the GNU Affero General Public License
 * version 3, these Appropriate Legal Notices must retain the display of the
 * "iteraplan" logo. If the display of the logo is not reasonably
 * feasible for technical reasons, the Appropriate Legal Notices must display
 * the words "Powered by iteraplan".
 */
// $ANTLR 3.3 Nov 30, 2010 12:50:56 /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g 2012-04-10 16:44:36

package de.iteratec.iteraplan.elasticeam.iteraql2;

import java.util.ArrayList;
import java.util.List;

import org.antlr.runtime.BitSet;
import org.antlr.runtime.EarlyExitException;
import org.antlr.runtime.NoViableAltException;
import org.antlr.runtime.Parser;
import org.antlr.runtime.ParserRuleReturnScope;
import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.RecognizerSharedState;
import org.antlr.runtime.Token;
import org.antlr.runtime.TokenStream;

import de.iteratec.iteraplan.elasticeam.iteraql2.qt.Feature;
import de.iteratec.iteraplan.elasticeam.iteraql2.qt.Query;
import de.iteratec.iteraplan.elasticeam.iteraql2.qt.RelationshipEnd;
import de.iteratec.iteraplan.elasticeam.iteraql2.qt.SimpleRelationshipEnd;
import de.iteratec.iteraplan.elasticeam.iteraql2.qt.UnfoldQueryRelationshipEnd;
import de.iteratec.iteraplan.elasticeam.iteraql2.qt.UniversalType;
import de.iteratec.iteraplan.elasticeam.iteraql2.qt.extension.ClusterExtension;
import de.iteratec.iteraplan.elasticeam.iteraql2.qt.extension.ExpandExtension;
import de.iteratec.iteraplan.elasticeam.iteraql2.qt.extension.Extension;
import de.iteratec.iteraplan.elasticeam.iteraql2.qt.extension.MoveExtension;
import de.iteratec.iteraplan.elasticeam.iteraql2.qt.extension.MoveExtensionProperty;
import de.iteratec.iteraplan.elasticeam.iteraql2.qt.extension.NullifyExtension;
import de.iteratec.iteraplan.elasticeam.iteraql2.qt.extension.ObjectifyExtension;
import de.iteratec.iteraplan.elasticeam.iteraql2.qt.extension.PowerExtension;
import de.iteratec.iteraplan.elasticeam.iteraql2.qt.extension.PredicateExtension;
import de.iteratec.iteraplan.elasticeam.iteraql2.qt.predicate.CanonicLeafProperty;
import de.iteratec.iteraplan.elasticeam.iteraql2.qt.predicate.CountDerivedLeafProperty;
import de.iteratec.iteraplan.elasticeam.iteraql2.qt.predicate.FoldLevelDerivedLeafProperty;
import de.iteratec.iteraplan.elasticeam.iteraql2.qt.predicate.Predicate;
import de.iteratec.iteraplan.elasticeam.iteraql2.qt.predicate.PredicateLeaf;
import de.iteratec.iteraplan.elasticeam.iteraql2.qt.predicate.PredicateLeafProperty;
import de.iteratec.iteraplan.elasticeam.iteraql2.qt.predicate.PredicateLeafReferenceValue;
import de.iteratec.iteraplan.elasticeam.iteraql2.qt.predicate.PredicateNode;
import de.iteratec.iteraplan.elasticeam.iteraql2.qt.predicate.PropertyAsReferenceValue;
import de.iteratec.iteraplan.elasticeam.iteraql2.qt.predicate.SimpleReferenceValue;
import de.iteratec.iteraplan.elasticeam.iteraql2.qt.predicate.ViewDerivedLeafProperty;
import de.iteratec.iteraplan.elasticeam.metamodel.ComparisonOperatorExpression;
import de.iteratec.iteraplan.elasticeam.metamodel.builtin.ComparisonOperators;
import de.iteratec.iteraplan.elasticeam.operator.filter.predicate.CompositePredicateOperation;


/**
 * Note: This class is code generated by ANTLR. Therefore we ignore all kinds of warnings.
 */
@edu.umd.cs.findbugs.annotations.SuppressWarnings({ "MS_PKGPROTECT", "NP_NULL_PARAM_DEREF", "RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE",
  "SBSC_USE_STRINGBUFFER_CONCATENATION", "SF_SWITCH_NO_DEFAULT" })
@SuppressWarnings({ "PMD", "all" })
public class IteraQl2Parser extends Parser {
  public static final String[] tokenNames           = new String[] { "<invalid>", "<EOR>", "<DOWN>", "<UP>", "WSSEQ", "SEMICOLON", "NAME",
    "FULL_STOP", "KEYWORD_POWER", "LEFT_PARENTHESIS", "RIGHT_PARENTHESIS", "KEYWORD_NULLIFY", "SLASH", "KEYWORD_UNFOLD", "AT_SIGN",
    "KEYWORD_FOLD_LEVEL", "KEYWORD_COUNT", "KEYWORD_VIEW", "EXCLAMATION_MARK", "AMPERSAND", "VERTICAL_BAR", "KEYWORD_BEGINS_WITH",
    "KEYWORD_ENDS_WITH", "KEYWORD_CONTAINS", "STRVALUE", "LESS_THAN", "GREATER_THAN", "EQUALS", "LEFT_CURLY_BRACKET", "RIGHT_CURLY_BRACKET",
    "KEYWORD_CLUSTER", "KEYWORD_OBJECTIFY", "LEFT_SQUARE_BRACKET", "RIGHT_SQUARE_BRACKET", "KEYWORD_EXPAND", "SINGLE_QUOTATION",
    "DOUBLE_QUOTATION", "WHITESPACE_CHAR", "CONTROL_CHAR", "WORD_CHAR" };
  public static final int      EOF                  = -1;
  public static final int      WSSEQ                = 4;
  public static final int      SEMICOLON            = 5;
  public static final int      NAME                 = 6;
  public static final int      FULL_STOP            = 7;
  public static final int      KEYWORD_POWER        = 8;
  public static final int      LEFT_PARENTHESIS     = 9;
  public static final int      RIGHT_PARENTHESIS    = 10;
  public static final int      KEYWORD_NULLIFY      = 11;
  public static final int      SLASH                = 12;
  public static final int      KEYWORD_UNFOLD       = 13;
  public static final int      AT_SIGN              = 14;
  public static final int      KEYWORD_FOLD_LEVEL   = 15;
  public static final int      KEYWORD_COUNT        = 16;
  public static final int      KEYWORD_VIEW         = 17;
  public static final int      EXCLAMATION_MARK     = 18;
  public static final int      AMPERSAND            = 19;
  public static final int      VERTICAL_BAR         = 20;
  public static final int      KEYWORD_BEGINS_WITH  = 21;
  public static final int      KEYWORD_ENDS_WITH    = 22;
  public static final int      KEYWORD_CONTAINS     = 23;
  public static final int      STRVALUE             = 24;
  public static final int      LESS_THAN            = 25;
  public static final int      GREATER_THAN         = 26;
  public static final int      EQUALS               = 27;
  public static final int      LEFT_CURLY_BRACKET   = 28;
  public static final int      RIGHT_CURLY_BRACKET  = 29;
  public static final int      KEYWORD_CLUSTER      = 30;
  public static final int      KEYWORD_OBJECTIFY    = 31;
  public static final int      LEFT_SQUARE_BRACKET  = 32;
  public static final int      RIGHT_SQUARE_BRACKET = 33;
  public static final int      KEYWORD_EXPAND       = 34;
  public static final int      SINGLE_QUOTATION     = 35;
  public static final int      DOUBLE_QUOTATION     = 36;
  public static final int      WHITESPACE_CHAR      = 37;
  public static final int      CONTROL_CHAR         = 38;
  public static final int      WORD_CHAR            = 39;

  // delegates
  // delegators

  public IteraQl2Parser(TokenStream input) {
    this(input, new RecognizerSharedState());
  }

  public IteraQl2Parser(TokenStream input, RecognizerSharedState state) {
    super(input, state);

  }

  public String[] getTokenNames() {
    return IteraQl2Parser.tokenNames;
  }

  public String getGrammarFileName() {
    return "/home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g";
  }

  public void displayRecognitionError(String[] tokenNames, RecognitionException ex) {
    //Overrides the standard method, so that recovery does not occur.
    throw new IteraQl2Exception(IteraQl2Exception.PARSER_INVALID_QUERY_STRING, "The entered query is not syntactically correct: "
        + getErrorMessage(ex, tokenNames));
  }

  public void reportError(RecognitionException ex) {
    throw new IteraQl2Exception(IteraQl2Exception.PARSER_INVALID_QUERY_STRING, "The entered query is not syntactically correct: "
        + getErrorMessage(ex, tokenNames));
  }

  // $ANTLR start "query"
  // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:56:1: query returns [Query query] : ut= universalType ( ( WSSEQ )? rEnd= relationshipEnd )? ( WSSEQ )? SEMICOLON ;
  public final Query query() throws RecognitionException {
    Query query = null;

    UniversalType ut = null;

    RelationshipEnd rEnd = null;

    try {
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:57:2: (ut= universalType ( ( WSSEQ )? rEnd= relationshipEnd )? ( WSSEQ )? SEMICOLON )
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:57:4: ut= universalType ( ( WSSEQ )? rEnd= relationshipEnd )? ( WSSEQ )? SEMICOLON
      {

        RelationshipEnd relationshipEnd = null;

        pushFollow(FOLLOW_universalType_in_query79);
        ut = universalType();

        state._fsp--;

        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:61:3: ( ( WSSEQ )? rEnd= relationshipEnd )?
        int alt2 = 2;
        int LA2_0 = input.LA(1);

        if ((LA2_0 == WSSEQ)) {
          int LA2_1 = input.LA(2);

          if ((LA2_1 == FULL_STOP || LA2_1 == SLASH)) {
            alt2 = 1;
          }
        }
        else if ((LA2_0 == FULL_STOP || LA2_0 == SLASH)) {
          alt2 = 1;
        }
        switch (alt2) {
          case 1:
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:62:4: ( WSSEQ )? rEnd= relationshipEnd
          {
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:62:4: ( WSSEQ )?
            int alt1 = 2;
            int LA1_0 = input.LA(1);

            if ((LA1_0 == WSSEQ)) {
              alt1 = 1;
            }
            switch (alt1) {
              case 1:
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:62:4: WSSEQ
              {
                match(input, WSSEQ, FOLLOW_WSSEQ_in_query89);

              }
              break;

            }

            pushFollow(FOLLOW_relationshipEnd_in_query94);
            rEnd = relationshipEnd();

            state._fsp--;

            relationshipEnd = rEnd;

          }
          break;

        }

        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:66:6: ( WSSEQ )?
        int alt3 = 2;
        int LA3_0 = input.LA(1);

        if ((LA3_0 == WSSEQ)) {
          alt3 = 1;
        }
        switch (alt3) {
          case 1:
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:66:6: WSSEQ
          {
            match(input, WSSEQ, FOLLOW_WSSEQ_in_query106);

          }
          break;

        }

        match(input, SEMICOLON, FOLLOW_SEMICOLON_in_query109);

        query = new Query(ut, relationshipEnd);

      }

    }

    catch (RecognitionException ex) {
      throw new IteraQl2Exception(IteraQl2Exception.PARSER_INVALID_QUERY_STRING, "The entered query is not syntactically correct: "
          + getErrorMessage(ex, tokenNames));
    } finally {
    }
    return query;
  }

  // $ANTLR end "query"

  // $ANTLR start "universalType"
  // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:72:1: universalType returns [UniversalType universalType] : utName= NAME ( ( WSSEQ )? ext= universalTypeExtension )* ;
  public final UniversalType universalType() throws RecognitionException {
    UniversalType universalType = null;

    Token utName = null;
    Extension ext = null;

    try {
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:73:2: (utName= NAME ( ( WSSEQ )? ext= universalTypeExtension )* )
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:73:4: utName= NAME ( ( WSSEQ )? ext= universalTypeExtension )*
      {

        List<Extension> extensions = new ArrayList<Extension>();

        utName = (Token) match(input, NAME, FOLLOW_NAME_in_universalType134);
        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:77:3: ( ( WSSEQ )? ext= universalTypeExtension )*
        loop5: do {
          int alt5 = 2;
          switch (input.LA(1)) {
            case WSSEQ: {
              int LA5_1 = input.LA(2);

              if ((LA5_1 == FULL_STOP)) {
                int LA5_3 = input.LA(3);

                if ((LA5_3 == KEYWORD_POWER || LA5_3 == KEYWORD_NULLIFY || (LA5_3 >= KEYWORD_CLUSTER && LA5_3 <= KEYWORD_OBJECTIFY) || LA5_3 == KEYWORD_EXPAND)) {
                  alt5 = 1;
                }

              }
              else if ((LA5_1 == LEFT_CURLY_BRACKET || LA5_1 == LEFT_SQUARE_BRACKET)) {
                alt5 = 1;
              }

            }
            break;
            case FULL_STOP: {
              int LA5_3 = input.LA(2);

              if ((LA5_3 == KEYWORD_POWER || LA5_3 == KEYWORD_NULLIFY || (LA5_3 >= KEYWORD_CLUSTER && LA5_3 <= KEYWORD_OBJECTIFY) || LA5_3 == KEYWORD_EXPAND)) {
                alt5 = 1;
              }

            }
            break;
            case LEFT_CURLY_BRACKET:
            case LEFT_SQUARE_BRACKET: {
              alt5 = 1;
            }
            break;

          }

          switch (alt5) {
            case 1:
              // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:78:4: ( WSSEQ )? ext= universalTypeExtension
            {
              // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:78:4: ( WSSEQ )?
              int alt4 = 2;
              int LA4_0 = input.LA(1);

              if ((LA4_0 == WSSEQ)) {
                alt4 = 1;
              }
              switch (alt4) {
                case 1:
                  // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:78:4: WSSEQ
                {
                  match(input, WSSEQ, FOLLOW_WSSEQ_in_universalType143);

                }
                break;

              }

              pushFollow(FOLLOW_universalTypeExtension_in_universalType148);
              ext = universalTypeExtension();

              state._fsp--;

              extensions.add(ext);

            }
            break;

            default:
              break loop5;
          }
        } while (true);

        universalType = new UniversalType((utName != null ? utName.getText() : null).trim(), extensions);

      }

    }

    catch (RecognitionException ex) {
      throw new IteraQl2Exception(IteraQl2Exception.PARSER_INVALID_QUERY_STRING, "The entered query is not syntactically correct: "
          + getErrorMessage(ex, tokenNames));
    } finally {
    }
    return universalType;
  }

  // $ANTLR end "universalType"

  // $ANTLR start "universalTypeExtension"
  // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:88:1: universalTypeExtension returns [Extension extension] : ( ( FULL_STOP KEYWORD_POWER LEFT_PARENTHESIS ( WSSEQ )? RIGHT_PARENTHESIS ) | ( FULL_STOP KEYWORD_NULLIFY LEFT_PARENTHESIS ( WSSEQ )? RIGHT_PARENTHESIS ) | (ext= extension ) );
  public final Extension universalTypeExtension() throws RecognitionException {
    Extension extension = null;

    Extension ext = null;

    try {
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:89:2: ( ( FULL_STOP KEYWORD_POWER LEFT_PARENTHESIS ( WSSEQ )? RIGHT_PARENTHESIS ) | ( FULL_STOP KEYWORD_NULLIFY LEFT_PARENTHESIS ( WSSEQ )? RIGHT_PARENTHESIS ) | (ext= extension ) )
      int alt8 = 3;
      int LA8_0 = input.LA(1);

      if ((LA8_0 == FULL_STOP)) {
        switch (input.LA(2)) {
          case KEYWORD_POWER: {
            alt8 = 1;
          }
          break;
          case KEYWORD_NULLIFY: {
            alt8 = 2;
          }
          break;
          case KEYWORD_CLUSTER:
          case KEYWORD_OBJECTIFY:
          case KEYWORD_EXPAND: {
            alt8 = 3;
          }
          break;
          default:
            NoViableAltException nvae = new NoViableAltException("", 8, 1, input);

            throw nvae;
        }

      }
      else if ((LA8_0 == LEFT_CURLY_BRACKET || LA8_0 == LEFT_SQUARE_BRACKET)) {
        alt8 = 3;
      }
      else {
        NoViableAltException nvae = new NoViableAltException("", 8, 0, input);

        throw nvae;
      }
      switch (alt8) {
        case 1:
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:89:4: ( FULL_STOP KEYWORD_POWER LEFT_PARENTHESIS ( WSSEQ )? RIGHT_PARENTHESIS )
        {
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:89:4: ( FULL_STOP KEYWORD_POWER LEFT_PARENTHESIS ( WSSEQ )? RIGHT_PARENTHESIS )
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:90:3: FULL_STOP KEYWORD_POWER LEFT_PARENTHESIS ( WSSEQ )? RIGHT_PARENTHESIS
          {
            match(input, FULL_STOP, FOLLOW_FULL_STOP_in_universalTypeExtension182);
            match(input, KEYWORD_POWER, FOLLOW_KEYWORD_POWER_in_universalTypeExtension184);
            match(input, LEFT_PARENTHESIS, FOLLOW_LEFT_PARENTHESIS_in_universalTypeExtension186);
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:90:44: ( WSSEQ )?
            int alt6 = 2;
            int LA6_0 = input.LA(1);

            if ((LA6_0 == WSSEQ)) {
              alt6 = 1;
            }
            switch (alt6) {
              case 1:
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:90:44: WSSEQ
              {
                match(input, WSSEQ, FOLLOW_WSSEQ_in_universalTypeExtension188);

              }
              break;

            }

            match(input, RIGHT_PARENTHESIS, FOLLOW_RIGHT_PARENTHESIS_in_universalTypeExtension191);

            extension = new PowerExtension();

          }

        }
        break;
        case 2:
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:95:4: ( FULL_STOP KEYWORD_NULLIFY LEFT_PARENTHESIS ( WSSEQ )? RIGHT_PARENTHESIS )
        {
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:95:4: ( FULL_STOP KEYWORD_NULLIFY LEFT_PARENTHESIS ( WSSEQ )? RIGHT_PARENTHESIS )
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:96:3: FULL_STOP KEYWORD_NULLIFY LEFT_PARENTHESIS ( WSSEQ )? RIGHT_PARENTHESIS
          {
            match(input, FULL_STOP, FOLLOW_FULL_STOP_in_universalTypeExtension209);
            match(input, KEYWORD_NULLIFY, FOLLOW_KEYWORD_NULLIFY_in_universalTypeExtension211);
            match(input, LEFT_PARENTHESIS, FOLLOW_LEFT_PARENTHESIS_in_universalTypeExtension213);
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:96:46: ( WSSEQ )?
            int alt7 = 2;
            int LA7_0 = input.LA(1);

            if ((LA7_0 == WSSEQ)) {
              alt7 = 1;
            }
            switch (alt7) {
              case 1:
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:96:46: WSSEQ
              {
                match(input, WSSEQ, FOLLOW_WSSEQ_in_universalTypeExtension215);

              }
              break;

            }

            match(input, RIGHT_PARENTHESIS, FOLLOW_RIGHT_PARENTHESIS_in_universalTypeExtension218);

            extension = new NullifyExtension(null);

          }

        }
        break;
        case 3:
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:101:4: (ext= extension )
        {
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:101:4: (ext= extension )
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:102:3: ext= extension
          {
            pushFollow(FOLLOW_extension_in_universalTypeExtension238);
            ext = extension();

            state._fsp--;

            extension = ext;

          }

        }
        break;

      }
    }

    catch (RecognitionException ex) {
      throw new IteraQl2Exception(IteraQl2Exception.PARSER_INVALID_QUERY_STRING, "The entered query is not syntactically correct: "
          + getErrorMessage(ex, tokenNames));
    } finally {
    }
    return extension;
  }

  // $ANTLR end "universalTypeExtension"

  // $ANTLR start "relationshipEnd"
  // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:109:1: relationshipEnd returns [RelationshipEnd relEnd] : ( ( SLASH endName= NAME ( ( WSSEQ )? cExt= relationshipEndExtension )* ( ( WSSEQ )? nextEnd= relationshipEnd )? ) | ( FULL_STOP KEYWORD_UNFOLD LEFT_PARENTHESIS ( WSSEQ )? kRelEnd= relationshipEnd ( WSSEQ )? RIGHT_PARENTHESIS ( ( WSSEQ )? cExt= relationshipEndExtension )* ( ( WSSEQ )? nRelEnd= relationshipEnd )? ) );
  public final RelationshipEnd relationshipEnd() throws RecognitionException {
    RelationshipEnd relEnd = null;

    Token endName = null;
    Extension cExt = null;

    RelationshipEnd nextEnd = null;

    RelationshipEnd kRelEnd = null;

    RelationshipEnd nRelEnd = null;

    try {
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:110:2: ( ( SLASH endName= NAME ( ( WSSEQ )? cExt= relationshipEndExtension )* ( ( WSSEQ )? nextEnd= relationshipEnd )? ) | ( FULL_STOP KEYWORD_UNFOLD LEFT_PARENTHESIS ( WSSEQ )? kRelEnd= relationshipEnd ( WSSEQ )? RIGHT_PARENTHESIS ( ( WSSEQ )? cExt= relationshipEndExtension )* ( ( WSSEQ )? nRelEnd= relationshipEnd )? ) )
      int alt19 = 2;
      int LA19_0 = input.LA(1);

      if ((LA19_0 == SLASH)) {
        alt19 = 1;
      }
      else if ((LA19_0 == FULL_STOP)) {
        alt19 = 2;
      }
      else {
        NoViableAltException nvae = new NoViableAltException("", 19, 0, input);

        throw nvae;
      }
      switch (alt19) {
        case 1:
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:110:4: ( SLASH endName= NAME ( ( WSSEQ )? cExt= relationshipEndExtension )* ( ( WSSEQ )? nextEnd= relationshipEnd )? )
        {
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:110:4: ( SLASH endName= NAME ( ( WSSEQ )? cExt= relationshipEndExtension )* ( ( WSSEQ )? nextEnd= relationshipEnd )? )
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:111:4: SLASH endName= NAME ( ( WSSEQ )? cExt= relationshipEndExtension )* ( ( WSSEQ )? nextEnd= relationshipEnd )?
          {

            List<Extension> extensions = new ArrayList<Extension>();
            RelationshipEnd nextRelEnd = null;

            match(input, SLASH, FOLLOW_SLASH_in_relationshipEnd272);
            endName = (Token) match(input, NAME, FOLLOW_NAME_in_relationshipEnd276);
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:116:4: ( ( WSSEQ )? cExt= relationshipEndExtension )*
            loop10: do {
              int alt10 = 2;
              switch (input.LA(1)) {
                case WSSEQ: {
                  int LA10_1 = input.LA(2);

                  if ((LA10_1 == FULL_STOP)) {
                    int LA10_3 = input.LA(3);

                    if ((LA10_3 == KEYWORD_NULLIFY || (LA10_3 >= KEYWORD_CLUSTER && LA10_3 <= KEYWORD_OBJECTIFY) || LA10_3 == KEYWORD_EXPAND)) {
                      alt10 = 1;
                    }

                  }
                  else if ((LA10_1 == LEFT_CURLY_BRACKET || LA10_1 == LEFT_SQUARE_BRACKET)) {
                    alt10 = 1;
                  }

                }
                break;
                case FULL_STOP: {
                  int LA10_3 = input.LA(2);

                  if ((LA10_3 == KEYWORD_NULLIFY || (LA10_3 >= KEYWORD_CLUSTER && LA10_3 <= KEYWORD_OBJECTIFY) || LA10_3 == KEYWORD_EXPAND)) {
                    alt10 = 1;
                  }

                }
                break;
                case LEFT_CURLY_BRACKET:
                case LEFT_SQUARE_BRACKET: {
                  alt10 = 1;
                }
                break;

              }

              switch (alt10) {
                case 1:
                  // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:117:5: ( WSSEQ )? cExt= relationshipEndExtension
                {
                  // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:117:5: ( WSSEQ )?
                  int alt9 = 2;
                  int LA9_0 = input.LA(1);

                  if ((LA9_0 == WSSEQ)) {
                    alt9 = 1;
                  }
                  switch (alt9) {
                    case 1:
                      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:117:5: WSSEQ
                    {
                      match(input, WSSEQ, FOLLOW_WSSEQ_in_relationshipEnd288);

                    }
                    break;

                  }

                  pushFollow(FOLLOW_relationshipEndExtension_in_relationshipEnd293);
                  cExt = relationshipEndExtension();

                  state._fsp--;

                  extensions.add(cExt);

                }
                break;

                default:
                  break loop10;
              }
            } while (true);

            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:122:4: ( ( WSSEQ )? nextEnd= relationshipEnd )?
            int alt12 = 2;
            int LA12_0 = input.LA(1);

            if ((LA12_0 == WSSEQ)) {
              int LA12_1 = input.LA(2);

              if ((LA12_1 == FULL_STOP || LA12_1 == SLASH)) {
                alt12 = 1;
              }
            }
            else if ((LA12_0 == FULL_STOP || LA12_0 == SLASH)) {
              alt12 = 1;
            }
            switch (alt12) {
              case 1:
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:123:5: ( WSSEQ )? nextEnd= relationshipEnd
              {
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:123:5: ( WSSEQ )?
                int alt11 = 2;
                int LA11_0 = input.LA(1);

                if ((LA11_0 == WSSEQ)) {
                  alt11 = 1;
                }
                switch (alt11) {
                  case 1:
                    // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:123:5: WSSEQ
                  {
                    match(input, WSSEQ, FOLLOW_WSSEQ_in_relationshipEnd319);

                  }
                  break;

                }

                pushFollow(FOLLOW_relationshipEnd_in_relationshipEnd324);
                nextEnd = relationshipEnd();

                state._fsp--;

                nextRelEnd = nextEnd;

              }
              break;

            }

            relEnd = new SimpleRelationshipEnd((endName != null ? endName.getText() : null).trim(), extensions, nextRelEnd);

          }

        }
        break;
        case 2:
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:132:4: ( FULL_STOP KEYWORD_UNFOLD LEFT_PARENTHESIS ( WSSEQ )? kRelEnd= relationshipEnd ( WSSEQ )? RIGHT_PARENTHESIS ( ( WSSEQ )? cExt= relationshipEndExtension )* ( ( WSSEQ )? nRelEnd= relationshipEnd )? )
        {
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:132:4: ( FULL_STOP KEYWORD_UNFOLD LEFT_PARENTHESIS ( WSSEQ )? kRelEnd= relationshipEnd ( WSSEQ )? RIGHT_PARENTHESIS ( ( WSSEQ )? cExt= relationshipEndExtension )* ( ( WSSEQ )? nRelEnd= relationshipEnd )? )
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:133:4: FULL_STOP KEYWORD_UNFOLD LEFT_PARENTHESIS ( WSSEQ )? kRelEnd= relationshipEnd ( WSSEQ )? RIGHT_PARENTHESIS ( ( WSSEQ )? cExt= relationshipEndExtension )* ( ( WSSEQ )? nRelEnd= relationshipEnd )?
          {

            RelationshipEnd nextRelEnd = null;
            List<Extension> extensions = new ArrayList<Extension>();

            match(input, FULL_STOP, FOLLOW_FULL_STOP_in_relationshipEnd360);
            match(input, KEYWORD_UNFOLD, FOLLOW_KEYWORD_UNFOLD_in_relationshipEnd362);
            match(input, LEFT_PARENTHESIS, FOLLOW_LEFT_PARENTHESIS_in_relationshipEnd364);
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:137:45: ( WSSEQ )?
            int alt13 = 2;
            int LA13_0 = input.LA(1);

            if ((LA13_0 == WSSEQ)) {
              alt13 = 1;
            }
            switch (alt13) {
              case 1:
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:137:45: WSSEQ
              {
                match(input, WSSEQ, FOLLOW_WSSEQ_in_relationshipEnd366);

              }
              break;

            }

            pushFollow(FOLLOW_relationshipEnd_in_relationshipEnd371);
            kRelEnd = relationshipEnd();

            state._fsp--;

            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:137:76: ( WSSEQ )?
            int alt14 = 2;
            int LA14_0 = input.LA(1);

            if ((LA14_0 == WSSEQ)) {
              alt14 = 1;
            }
            switch (alt14) {
              case 1:
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:137:76: WSSEQ
              {
                match(input, WSSEQ, FOLLOW_WSSEQ_in_relationshipEnd373);

              }
              break;

            }

            match(input, RIGHT_PARENTHESIS, FOLLOW_RIGHT_PARENTHESIS_in_relationshipEnd376);
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:138:4: ( ( WSSEQ )? cExt= relationshipEndExtension )*
            loop16: do {
              int alt16 = 2;
              switch (input.LA(1)) {
                case WSSEQ: {
                  int LA16_1 = input.LA(2);

                  if ((LA16_1 == FULL_STOP)) {
                    int LA16_3 = input.LA(3);

                    if ((LA16_3 == KEYWORD_NULLIFY || (LA16_3 >= KEYWORD_CLUSTER && LA16_3 <= KEYWORD_OBJECTIFY) || LA16_3 == KEYWORD_EXPAND)) {
                      alt16 = 1;
                    }

                  }
                  else if ((LA16_1 == LEFT_CURLY_BRACKET || LA16_1 == LEFT_SQUARE_BRACKET)) {
                    alt16 = 1;
                  }

                }
                break;
                case FULL_STOP: {
                  int LA16_3 = input.LA(2);

                  if ((LA16_3 == KEYWORD_NULLIFY || (LA16_3 >= KEYWORD_CLUSTER && LA16_3 <= KEYWORD_OBJECTIFY) || LA16_3 == KEYWORD_EXPAND)) {
                    alt16 = 1;
                  }

                }
                break;
                case LEFT_CURLY_BRACKET:
                case LEFT_SQUARE_BRACKET: {
                  alt16 = 1;
                }
                break;

              }

              switch (alt16) {
                case 1:
                  // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:139:5: ( WSSEQ )? cExt= relationshipEndExtension
                {
                  // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:139:5: ( WSSEQ )?
                  int alt15 = 2;
                  int LA15_0 = input.LA(1);

                  if ((LA15_0 == WSSEQ)) {
                    alt15 = 1;
                  }
                  switch (alt15) {
                    case 1:
                      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:139:5: WSSEQ
                    {
                      match(input, WSSEQ, FOLLOW_WSSEQ_in_relationshipEnd388);

                    }
                    break;

                  }

                  pushFollow(FOLLOW_relationshipEndExtension_in_relationshipEnd393);
                  cExt = relationshipEndExtension();

                  state._fsp--;

                  extensions.add(cExt);

                }
                break;

                default:
                  break loop16;
              }
            } while (true);

            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:144:4: ( ( WSSEQ )? nRelEnd= relationshipEnd )?
            int alt18 = 2;
            int LA18_0 = input.LA(1);

            if ((LA18_0 == WSSEQ)) {
              int LA18_1 = input.LA(2);

              if ((LA18_1 == FULL_STOP || LA18_1 == SLASH)) {
                alt18 = 1;
              }
            }
            else if ((LA18_0 == FULL_STOP || LA18_0 == SLASH)) {
              alt18 = 1;
            }
            switch (alt18) {
              case 1:
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:145:5: ( WSSEQ )? nRelEnd= relationshipEnd
              {
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:145:5: ( WSSEQ )?
                int alt17 = 2;
                int LA17_0 = input.LA(1);

                if ((LA17_0 == WSSEQ)) {
                  alt17 = 1;
                }
                switch (alt17) {
                  case 1:
                    // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:145:5: WSSEQ
                  {
                    match(input, WSSEQ, FOLLOW_WSSEQ_in_relationshipEnd417);

                  }
                  break;

                }

                pushFollow(FOLLOW_relationshipEnd_in_relationshipEnd422);
                nRelEnd = relationshipEnd();

                state._fsp--;

                nextRelEnd = nRelEnd;

              }
              break;

            }

            relEnd = new UnfoldQueryRelationshipEnd(kRelEnd, extensions, nextRelEnd);

          }

        }
        break;

      }
    }

    catch (RecognitionException ex) {
      throw new IteraQl2Exception(IteraQl2Exception.PARSER_INVALID_QUERY_STRING, "The entered query is not syntactically correct: "
          + getErrorMessage(ex, tokenNames));
    } finally {
    }
    return relEnd;
  }

  // $ANTLR end "relationshipEnd"

  // $ANTLR start "relationshipEndExtension"
  // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:156:1: relationshipEndExtension returns [Extension extension] : ( ( FULL_STOP KEYWORD_NULLIFY LEFT_PARENTHESIS ( WSSEQ )? nRelEnd= relationshipEnd ( WSSEQ )? RIGHT_PARENTHESIS ) | (ext= extension ) );
  public final Extension relationshipEndExtension() throws RecognitionException {
    Extension extension = null;

    RelationshipEnd nRelEnd = null;

    Extension ext = null;

    try {
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:157:2: ( ( FULL_STOP KEYWORD_NULLIFY LEFT_PARENTHESIS ( WSSEQ )? nRelEnd= relationshipEnd ( WSSEQ )? RIGHT_PARENTHESIS ) | (ext= extension ) )
      int alt22 = 2;
      int LA22_0 = input.LA(1);

      if ((LA22_0 == FULL_STOP)) {
        int LA22_1 = input.LA(2);

        if ((LA22_1 == KEYWORD_NULLIFY)) {
          alt22 = 1;
        }
        else if (((LA22_1 >= KEYWORD_CLUSTER && LA22_1 <= KEYWORD_OBJECTIFY) || LA22_1 == KEYWORD_EXPAND)) {
          alt22 = 2;
        }
        else {
          NoViableAltException nvae = new NoViableAltException("", 22, 1, input);

          throw nvae;
        }
      }
      else if ((LA22_0 == LEFT_CURLY_BRACKET || LA22_0 == LEFT_SQUARE_BRACKET)) {
        alt22 = 2;
      }
      else {
        NoViableAltException nvae = new NoViableAltException("", 22, 0, input);

        throw nvae;
      }
      switch (alt22) {
        case 1:
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:157:4: ( FULL_STOP KEYWORD_NULLIFY LEFT_PARENTHESIS ( WSSEQ )? nRelEnd= relationshipEnd ( WSSEQ )? RIGHT_PARENTHESIS )
        {
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:157:4: ( FULL_STOP KEYWORD_NULLIFY LEFT_PARENTHESIS ( WSSEQ )? nRelEnd= relationshipEnd ( WSSEQ )? RIGHT_PARENTHESIS )
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:158:3: FULL_STOP KEYWORD_NULLIFY LEFT_PARENTHESIS ( WSSEQ )? nRelEnd= relationshipEnd ( WSSEQ )? RIGHT_PARENTHESIS
          {
            match(input, FULL_STOP, FOLLOW_FULL_STOP_in_relationshipEndExtension463);
            match(input, KEYWORD_NULLIFY, FOLLOW_KEYWORD_NULLIFY_in_relationshipEndExtension465);
            match(input, LEFT_PARENTHESIS, FOLLOW_LEFT_PARENTHESIS_in_relationshipEndExtension467);
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:158:46: ( WSSEQ )?
            int alt20 = 2;
            int LA20_0 = input.LA(1);

            if ((LA20_0 == WSSEQ)) {
              alt20 = 1;
            }
            switch (alt20) {
              case 1:
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:158:46: WSSEQ
              {
                match(input, WSSEQ, FOLLOW_WSSEQ_in_relationshipEndExtension469);

              }
              break;

            }

            pushFollow(FOLLOW_relationshipEnd_in_relationshipEndExtension474);
            nRelEnd = relationshipEnd();

            state._fsp--;

            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:158:77: ( WSSEQ )?
            int alt21 = 2;
            int LA21_0 = input.LA(1);

            if ((LA21_0 == WSSEQ)) {
              alt21 = 1;
            }
            switch (alt21) {
              case 1:
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:158:77: WSSEQ
              {
                match(input, WSSEQ, FOLLOW_WSSEQ_in_relationshipEndExtension476);

              }
              break;

            }

            match(input, RIGHT_PARENTHESIS, FOLLOW_RIGHT_PARENTHESIS_in_relationshipEndExtension479);

            extension = new NullifyExtension(nRelEnd);

          }

        }
        break;
        case 2:
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:163:4: (ext= extension )
        {
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:163:4: (ext= extension )
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:164:3: ext= extension
          {
            pushFollow(FOLLOW_extension_in_relationshipEndExtension500);
            ext = extension();

            state._fsp--;

            extension = ext;

          }

        }
        break;

      }
    }

    catch (RecognitionException ex) {
      throw new IteraQl2Exception(IteraQl2Exception.PARSER_INVALID_QUERY_STRING, "The entered query is not syntactically correct: "
          + getErrorMessage(ex, tokenNames));
    } finally {
    }
    return extension;
  }

  // $ANTLR end "relationshipEndExtension"

  // $ANTLR start "property"
  // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:171:1: property returns [PredicateLeafProperty prop] : ( ( AT_SIGN identifier= NAME ) | ( KEYWORD_FOLD_LEVEL LEFT_PARENTHESIS ( WSSEQ )? kRelEnd= relationshipEnd RIGHT_PARENTHESIS ) | ( KEYWORD_COUNT LEFT_PARENTHESIS ( WSSEQ )? f= feature RIGHT_PARENTHESIS ) | ( KEYWORD_VIEW LEFT_PARENTHESIS ( WSSEQ )? vRelEnd= relationshipEnd ( WSSEQ )? p= property ( WSSEQ )? RIGHT_PARENTHESIS ) );
  public final PredicateLeafProperty property() throws RecognitionException {
    PredicateLeafProperty prop = null;

    Token identifier = null;
    RelationshipEnd kRelEnd = null;

    Feature f = null;

    RelationshipEnd vRelEnd = null;

    PredicateLeafProperty p = null;

    try {
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:172:2: ( ( AT_SIGN identifier= NAME ) | ( KEYWORD_FOLD_LEVEL LEFT_PARENTHESIS ( WSSEQ )? kRelEnd= relationshipEnd RIGHT_PARENTHESIS ) | ( KEYWORD_COUNT LEFT_PARENTHESIS ( WSSEQ )? f= feature RIGHT_PARENTHESIS ) | ( KEYWORD_VIEW LEFT_PARENTHESIS ( WSSEQ )? vRelEnd= relationshipEnd ( WSSEQ )? p= property ( WSSEQ )? RIGHT_PARENTHESIS ) )
      int alt28 = 4;
      switch (input.LA(1)) {
        case AT_SIGN: {
          alt28 = 1;
        }
        break;
        case KEYWORD_FOLD_LEVEL: {
          alt28 = 2;
        }
        break;
        case KEYWORD_COUNT: {
          alt28 = 3;
        }
        break;
        case KEYWORD_VIEW: {
          alt28 = 4;
        }
        break;
        default:
          NoViableAltException nvae = new NoViableAltException("", 28, 0, input);

          throw nvae;
      }

      switch (alt28) {
        case 1:
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:172:4: ( AT_SIGN identifier= NAME )
        {
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:172:4: ( AT_SIGN identifier= NAME )
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:173:3: AT_SIGN identifier= NAME
          {
            match(input, AT_SIGN, FOLLOW_AT_SIGN_in_property529);
            identifier = (Token) match(input, NAME, FOLLOW_NAME_in_property533);

            prop = new CanonicLeafProperty((identifier != null ? identifier.getText() : null).trim());

          }

        }
        break;
        case 2:
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:178:4: ( KEYWORD_FOLD_LEVEL LEFT_PARENTHESIS ( WSSEQ )? kRelEnd= relationshipEnd RIGHT_PARENTHESIS )
        {
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:178:4: ( KEYWORD_FOLD_LEVEL LEFT_PARENTHESIS ( WSSEQ )? kRelEnd= relationshipEnd RIGHT_PARENTHESIS )
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:179:3: KEYWORD_FOLD_LEVEL LEFT_PARENTHESIS ( WSSEQ )? kRelEnd= relationshipEnd RIGHT_PARENTHESIS
          {
            match(input, KEYWORD_FOLD_LEVEL, FOLLOW_KEYWORD_FOLD_LEVEL_in_property552);
            match(input, LEFT_PARENTHESIS, FOLLOW_LEFT_PARENTHESIS_in_property554);
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:179:39: ( WSSEQ )?
            int alt23 = 2;
            int LA23_0 = input.LA(1);

            if ((LA23_0 == WSSEQ)) {
              alt23 = 1;
            }
            switch (alt23) {
              case 1:
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:179:39: WSSEQ
              {
                match(input, WSSEQ, FOLLOW_WSSEQ_in_property556);

              }
              break;

            }

            pushFollow(FOLLOW_relationshipEnd_in_property561);
            kRelEnd = relationshipEnd();

            state._fsp--;

            match(input, RIGHT_PARENTHESIS, FOLLOW_RIGHT_PARENTHESIS_in_property563);

            prop = new FoldLevelDerivedLeafProperty(kRelEnd);

          }

        }
        break;
        case 3:
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:184:4: ( KEYWORD_COUNT LEFT_PARENTHESIS ( WSSEQ )? f= feature RIGHT_PARENTHESIS )
        {
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:184:4: ( KEYWORD_COUNT LEFT_PARENTHESIS ( WSSEQ )? f= feature RIGHT_PARENTHESIS )
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:185:3: KEYWORD_COUNT LEFT_PARENTHESIS ( WSSEQ )? f= feature RIGHT_PARENTHESIS
          {
            match(input, KEYWORD_COUNT, FOLLOW_KEYWORD_COUNT_in_property581);
            match(input, LEFT_PARENTHESIS, FOLLOW_LEFT_PARENTHESIS_in_property583);
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:185:34: ( WSSEQ )?
            int alt24 = 2;
            int LA24_0 = input.LA(1);

            if ((LA24_0 == WSSEQ)) {
              alt24 = 1;
            }
            switch (alt24) {
              case 1:
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:185:34: WSSEQ
              {
                match(input, WSSEQ, FOLLOW_WSSEQ_in_property585);

              }
              break;

            }

            pushFollow(FOLLOW_feature_in_property590);
            f = feature();

            state._fsp--;

            match(input, RIGHT_PARENTHESIS, FOLLOW_RIGHT_PARENTHESIS_in_property592);

            prop = new CountDerivedLeafProperty(f);

          }

        }
        break;
        case 4:
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:190:4: ( KEYWORD_VIEW LEFT_PARENTHESIS ( WSSEQ )? vRelEnd= relationshipEnd ( WSSEQ )? p= property ( WSSEQ )? RIGHT_PARENTHESIS )
        {
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:190:4: ( KEYWORD_VIEW LEFT_PARENTHESIS ( WSSEQ )? vRelEnd= relationshipEnd ( WSSEQ )? p= property ( WSSEQ )? RIGHT_PARENTHESIS )
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:191:3: KEYWORD_VIEW LEFT_PARENTHESIS ( WSSEQ )? vRelEnd= relationshipEnd ( WSSEQ )? p= property ( WSSEQ )? RIGHT_PARENTHESIS
          {
            match(input, KEYWORD_VIEW, FOLLOW_KEYWORD_VIEW_in_property609);
            match(input, LEFT_PARENTHESIS, FOLLOW_LEFT_PARENTHESIS_in_property611);
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:191:33: ( WSSEQ )?
            int alt25 = 2;
            int LA25_0 = input.LA(1);

            if ((LA25_0 == WSSEQ)) {
              alt25 = 1;
            }
            switch (alt25) {
              case 1:
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:191:33: WSSEQ
              {
                match(input, WSSEQ, FOLLOW_WSSEQ_in_property613);

              }
              break;

            }

            pushFollow(FOLLOW_relationshipEnd_in_property618);
            vRelEnd = relationshipEnd();

            state._fsp--;

            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:191:64: ( WSSEQ )?
            int alt26 = 2;
            int LA26_0 = input.LA(1);

            if ((LA26_0 == WSSEQ)) {
              alt26 = 1;
            }
            switch (alt26) {
              case 1:
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:191:64: WSSEQ
              {
                match(input, WSSEQ, FOLLOW_WSSEQ_in_property620);

              }
              break;

            }

            pushFollow(FOLLOW_property_in_property625);
            p = property();

            state._fsp--;

            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:191:82: ( WSSEQ )?
            int alt27 = 2;
            int LA27_0 = input.LA(1);

            if ((LA27_0 == WSSEQ)) {
              alt27 = 1;
            }
            switch (alt27) {
              case 1:
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:191:82: WSSEQ
              {
                match(input, WSSEQ, FOLLOW_WSSEQ_in_property627);

              }
              break;

            }

            match(input, RIGHT_PARENTHESIS, FOLLOW_RIGHT_PARENTHESIS_in_property630);

            prop = new ViewDerivedLeafProperty(vRelEnd, p);

          }

        }
        break;

      }
    }

    catch (RecognitionException ex) {
      throw new IteraQl2Exception(IteraQl2Exception.PARSER_INVALID_QUERY_STRING, "The entered query is not syntactically correct: "
          + getErrorMessage(ex, tokenNames));
    } finally {
    }
    return prop;
  }

  // $ANTLR end "property"

  // $ANTLR start "feature"
  // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:198:1: feature returns [Feature feature] : ( (rEnd= relationshipEnd ) | (p= property ) );
  public final Feature feature() throws RecognitionException {
    Feature feature = null;

    RelationshipEnd rEnd = null;

    PredicateLeafProperty p = null;

    try {
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:199:2: ( (rEnd= relationshipEnd ) | (p= property ) )
      int alt29 = 2;
      int LA29_0 = input.LA(1);

      if ((LA29_0 == FULL_STOP || LA29_0 == SLASH)) {
        alt29 = 1;
      }
      else if (((LA29_0 >= AT_SIGN && LA29_0 <= KEYWORD_VIEW))) {
        alt29 = 2;
      }
      else {
        NoViableAltException nvae = new NoViableAltException("", 29, 0, input);

        throw nvae;
      }
      switch (alt29) {
        case 1:
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:199:4: (rEnd= relationshipEnd )
        {
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:199:4: (rEnd= relationshipEnd )
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:200:3: rEnd= relationshipEnd
          {
            pushFollow(FOLLOW_relationshipEnd_in_feature660);
            rEnd = relationshipEnd();

            state._fsp--;

            feature = rEnd;

          }

        }
        break;
        case 2:
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:205:4: (p= property )
        {
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:205:4: (p= property )
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:206:3: p= property
          {
            pushFollow(FOLLOW_property_in_feature680);
            p = property();

            state._fsp--;

            feature = p;

          }

        }
        break;

      }
    }

    catch (RecognitionException ex) {
      throw new IteraQl2Exception(IteraQl2Exception.PARSER_INVALID_QUERY_STRING, "The entered query is not syntactically correct: "
          + getErrorMessage(ex, tokenNames));
    } finally {
    }
    return feature;
  }

  // $ANTLR end "feature"

  // $ANTLR start "predicate"
  // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:213:1: predicate returns [Predicate pred] : ( ( LEFT_PARENTHESIS ( WSSEQ )? sPred= predicate RIGHT_PARENTHESIS ( WSSEQ )? (bOpPred= booleanOperationPredicate )? ) | (subPred= basePredicate (cPred= compositePredicate )? ) | (not= notPredicate ) );
  public final Predicate predicate() throws RecognitionException {
    Predicate pred = null;

    Predicate sPred = null;

    IteraQl2Parser.booleanOperationPredicate_return bOpPred = null;

    PredicateLeaf subPred = null;

    IteraQl2Parser.compositePredicate_return cPred = null;

    IteraQl2Parser.notPredicate_return not = null;

    try {
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:214:2: ( ( LEFT_PARENTHESIS ( WSSEQ )? sPred= predicate RIGHT_PARENTHESIS ( WSSEQ )? (bOpPred= booleanOperationPredicate )? ) | (subPred= basePredicate (cPred= compositePredicate )? ) | (not= notPredicate ) )
      int alt34 = 3;
      switch (input.LA(1)) {
        case LEFT_PARENTHESIS: {
          alt34 = 1;
        }
        break;
        case AT_SIGN:
        case KEYWORD_FOLD_LEVEL:
        case KEYWORD_COUNT:
        case KEYWORD_VIEW: {
          alt34 = 2;
        }
        break;
        case EXCLAMATION_MARK: {
          alt34 = 3;
        }
        break;
        default:
          NoViableAltException nvae = new NoViableAltException("", 34, 0, input);

          throw nvae;
      }

      switch (alt34) {
        case 1:
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:215:2: ( LEFT_PARENTHESIS ( WSSEQ )? sPred= predicate RIGHT_PARENTHESIS ( WSSEQ )? (bOpPred= booleanOperationPredicate )? )
        {
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:215:2: ( LEFT_PARENTHESIS ( WSSEQ )? sPred= predicate RIGHT_PARENTHESIS ( WSSEQ )? (bOpPred= booleanOperationPredicate )? )
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:216:6: LEFT_PARENTHESIS ( WSSEQ )? sPred= predicate RIGHT_PARENTHESIS ( WSSEQ )? (bOpPred= booleanOperationPredicate )?
          {

            Predicate boolPred = null;
            CompositePredicateOperation boolOp = null;

            match(input, LEFT_PARENTHESIS, FOLLOW_LEFT_PARENTHESIS_in_predicate720);
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:221:23: ( WSSEQ )?
            int alt30 = 2;
            int LA30_0 = input.LA(1);

            if ((LA30_0 == WSSEQ)) {
              alt30 = 1;
            }
            switch (alt30) {
              case 1:
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:221:23: WSSEQ
              {
                match(input, WSSEQ, FOLLOW_WSSEQ_in_predicate722);

              }
              break;

            }

            pushFollow(FOLLOW_predicate_in_predicate727);
            sPred = predicate();

            state._fsp--;

            match(input, RIGHT_PARENTHESIS, FOLLOW_RIGHT_PARENTHESIS_in_predicate729);
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:221:64: ( WSSEQ )?
            int alt31 = 2;
            int LA31_0 = input.LA(1);

            if ((LA31_0 == WSSEQ)) {
              alt31 = 1;
            }
            switch (alt31) {
              case 1:
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:221:64: WSSEQ
              {
                match(input, WSSEQ, FOLLOW_WSSEQ_in_predicate731);

              }
              break;

            }

            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:222:8: (bOpPred= booleanOperationPredicate )?
            int alt32 = 2;
            int LA32_0 = input.LA(1);

            if (((LA32_0 >= EXCLAMATION_MARK && LA32_0 <= VERTICAL_BAR))) {
              alt32 = 1;
            }
            switch (alt32) {
              case 1:
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:223:10: bOpPred= booleanOperationPredicate
              {
                pushFollow(FOLLOW_booleanOperationPredicate_in_predicate755);
                bOpPred = booleanOperationPredicate();

                state._fsp--;

                boolPred = (bOpPred != null ? bOpPred.pred : null);
                boolOp = (bOpPred != null ? bOpPred.op : null);

              }
              break;

            }

            if (boolPred != null) {
              pred = new PredicateNode(sPred, boolPred, boolOp);
            }
            else {
              pred = new PredicateNode(sPred, null, CompositePredicateOperation.ENCLOSE);
            }

          }

        }
        break;
        case 2:
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:237:5: (subPred= basePredicate (cPred= compositePredicate )? )
        {
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:237:5: (subPred= basePredicate (cPred= compositePredicate )? )
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:238:5: subPred= basePredicate (cPred= compositePredicate )?
          {
            pushFollow(FOLLOW_basePredicate_in_predicate801);
            subPred = basePredicate();

            state._fsp--;

            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:238:32: (cPred= compositePredicate )?
            int alt33 = 2;
            int LA33_0 = input.LA(1);

            if (((LA33_0 >= AMPERSAND && LA33_0 <= VERTICAL_BAR))) {
              alt33 = 1;
            }
            switch (alt33) {
              case 1:
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:238:32: cPred= compositePredicate
              {
                pushFollow(FOLLOW_compositePredicate_in_predicate805);
                cPred = compositePredicate();

                state._fsp--;

              }
              break;

            }

            if (cPred != null) {
              pred = new PredicateNode(subPred, (cPred != null ? cPred.pred : null), (cPred != null ? cPred.op : null));
            }
            else {
              pred = subPred;
            }

          }

        }
        break;
        case 3:
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:247:4: (not= notPredicate )
        {
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:247:4: (not= notPredicate )
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:248:4: not= notPredicate
          {
            pushFollow(FOLLOW_notPredicate_in_predicate827);
            not = notPredicate();

            state._fsp--;

            pred = new PredicateNode((not != null ? not.pred : null), null, (not != null ? not.op : null));

          }

        }
        break;

      }
    }

    catch (RecognitionException ex) {
      throw new IteraQl2Exception(IteraQl2Exception.PARSER_INVALID_QUERY_STRING, "The entered query is not syntactically correct: "
          + getErrorMessage(ex, tokenNames));
    } finally {
    }
    return pred;
  }

  // $ANTLR end "predicate"

  public static class booleanOperationPredicate_return extends ParserRuleReturnScope {
    public Predicate                   pred;
    public CompositePredicateOperation op;
  };

  // $ANTLR start "booleanOperationPredicate"
  // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:255:1: booleanOperationPredicate returns [Predicate pred, CompositePredicateOperation op] : ( (composite= compositePredicate ) | (not= notPredicate ) );
  public final IteraQl2Parser.booleanOperationPredicate_return booleanOperationPredicate() throws RecognitionException {
    IteraQl2Parser.booleanOperationPredicate_return retval = new IteraQl2Parser.booleanOperationPredicate_return();
    retval.start = input.LT(1);

    IteraQl2Parser.compositePredicate_return composite = null;

    IteraQl2Parser.notPredicate_return not = null;

    try {
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:256:3: ( (composite= compositePredicate ) | (not= notPredicate ) )
      int alt35 = 2;
      int LA35_0 = input.LA(1);

      if (((LA35_0 >= AMPERSAND && LA35_0 <= VERTICAL_BAR))) {
        alt35 = 1;
      }
      else if ((LA35_0 == EXCLAMATION_MARK)) {
        alt35 = 2;
      }
      else {
        NoViableAltException nvae = new NoViableAltException("", 35, 0, input);

        throw nvae;
      }
      switch (alt35) {
        case 1:
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:256:5: (composite= compositePredicate )
        {
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:256:5: (composite= compositePredicate )
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:257:7: composite= compositePredicate
          {
            pushFollow(FOLLOW_compositePredicate_in_booleanOperationPredicate866);
            composite = compositePredicate();

            state._fsp--;

            retval.pred = (composite != null ? composite.pred : null);
            retval.op = (composite != null ? composite.op : null);

          }

        }
        break;
        case 2:
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:263:7: (not= notPredicate )
        {
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:263:7: (not= notPredicate )
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:264:7: not= notPredicate
          {
            pushFollow(FOLLOW_notPredicate_in_booleanOperationPredicate899);
            not = notPredicate();

            state._fsp--;

            retval.pred = (not != null ? not.pred : null);
            retval.op = (not != null ? not.op : null);

          }

        }
        break;

      }
      retval.stop = input.LT(-1);

    }

    catch (RecognitionException ex) {
      throw new IteraQl2Exception(IteraQl2Exception.PARSER_INVALID_QUERY_STRING, "The entered query is not syntactically correct: "
          + getErrorMessage(ex, tokenNames));
    } finally {
    }
    return retval;
  }

  // $ANTLR end "booleanOperationPredicate"

  public static class notPredicate_return extends ParserRuleReturnScope {
    public Predicate                   pred;
    public CompositePredicateOperation op;
  };

  // $ANTLR start "notPredicate"
  // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:272:1: notPredicate returns [Predicate pred, CompositePredicateOperation op] : ( EXCLAMATION_MARK ( WSSEQ )? subPred= predicate ) ;
  public final IteraQl2Parser.notPredicate_return notPredicate() throws RecognitionException {
    IteraQl2Parser.notPredicate_return retval = new IteraQl2Parser.notPredicate_return();
    retval.start = input.LT(1);

    Predicate subPred = null;

    try {
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:273:3: ( ( EXCLAMATION_MARK ( WSSEQ )? subPred= predicate ) )
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:273:5: ( EXCLAMATION_MARK ( WSSEQ )? subPred= predicate )
      {
        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:273:5: ( EXCLAMATION_MARK ( WSSEQ )? subPred= predicate )
        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:274:5: EXCLAMATION_MARK ( WSSEQ )? subPred= predicate
        {
          match(input, EXCLAMATION_MARK, FOLLOW_EXCLAMATION_MARK_in_notPredicate938);
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:274:22: ( WSSEQ )?
          int alt36 = 2;
          int LA36_0 = input.LA(1);

          if ((LA36_0 == WSSEQ)) {
            alt36 = 1;
          }
          switch (alt36) {
            case 1:
              // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:274:22: WSSEQ
            {
              match(input, WSSEQ, FOLLOW_WSSEQ_in_notPredicate940);

            }
            break;

          }

          pushFollow(FOLLOW_predicate_in_notPredicate945);
          subPred = predicate();

          state._fsp--;

          retval.pred = subPred;
          retval.op = CompositePredicateOperation.NOT;

        }

      }

      retval.stop = input.LT(-1);

    }

    catch (RecognitionException ex) {
      throw new IteraQl2Exception(IteraQl2Exception.PARSER_INVALID_QUERY_STRING, "The entered query is not syntactically correct: "
          + getErrorMessage(ex, tokenNames));
    } finally {
    }
    return retval;
  }

  // $ANTLR end "notPredicate"

  public static class compositePredicate_return extends ParserRuleReturnScope {
    public Predicate                   pred;
    public CompositePredicateOperation op;
  };

  // $ANTLR start "compositePredicate"
  // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:282:1: compositePredicate returns [Predicate pred, CompositePredicateOperation op] : ( ( AMPERSAND ( WSSEQ )? p= predicate ) | ( VERTICAL_BAR ( WSSEQ )? p= predicate ) );
  public final IteraQl2Parser.compositePredicate_return compositePredicate() throws RecognitionException {
    IteraQl2Parser.compositePredicate_return retval = new IteraQl2Parser.compositePredicate_return();
    retval.start = input.LT(1);

    Predicate p = null;

    try {
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:283:2: ( ( AMPERSAND ( WSSEQ )? p= predicate ) | ( VERTICAL_BAR ( WSSEQ )? p= predicate ) )
      int alt39 = 2;
      int LA39_0 = input.LA(1);

      if ((LA39_0 == AMPERSAND)) {
        alt39 = 1;
      }
      else if ((LA39_0 == VERTICAL_BAR)) {
        alt39 = 2;
      }
      else {
        NoViableAltException nvae = new NoViableAltException("", 39, 0, input);

        throw nvae;
      }
      switch (alt39) {
        case 1:
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:283:4: ( AMPERSAND ( WSSEQ )? p= predicate )
        {
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:283:4: ( AMPERSAND ( WSSEQ )? p= predicate )
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:284:3: AMPERSAND ( WSSEQ )? p= predicate
          {
            match(input, AMPERSAND, FOLLOW_AMPERSAND_in_compositePredicate981);
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:284:13: ( WSSEQ )?
            int alt37 = 2;
            int LA37_0 = input.LA(1);

            if ((LA37_0 == WSSEQ)) {
              alt37 = 1;
            }
            switch (alt37) {
              case 1:
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:284:13: WSSEQ
              {
                match(input, WSSEQ, FOLLOW_WSSEQ_in_compositePredicate983);

              }
              break;

            }

            pushFollow(FOLLOW_predicate_in_compositePredicate988);
            p = predicate();

            state._fsp--;

            retval.pred = p;
            retval.op = CompositePredicateOperation.AND;

          }

        }
        break;
        case 2:
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:289:4: ( VERTICAL_BAR ( WSSEQ )? p= predicate )
        {
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:289:4: ( VERTICAL_BAR ( WSSEQ )? p= predicate )
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:290:3: VERTICAL_BAR ( WSSEQ )? p= predicate
          {
            match(input, VERTICAL_BAR, FOLLOW_VERTICAL_BAR_in_compositePredicate1007);
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:290:16: ( WSSEQ )?
            int alt38 = 2;
            int LA38_0 = input.LA(1);

            if ((LA38_0 == WSSEQ)) {
              alt38 = 1;
            }
            switch (alt38) {
              case 1:
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:290:16: WSSEQ
              {
                match(input, WSSEQ, FOLLOW_WSSEQ_in_compositePredicate1009);

              }
              break;

            }

            pushFollow(FOLLOW_predicate_in_compositePredicate1014);
            p = predicate();

            state._fsp--;

            retval.pred = p;
            retval.op = CompositePredicateOperation.OR;

          }

        }
        break;

      }
      retval.stop = input.LT(-1);

    }

    catch (RecognitionException ex) {
      throw new IteraQl2Exception(IteraQl2Exception.PARSER_INVALID_QUERY_STRING, "The entered query is not syntactically correct: "
          + getErrorMessage(ex, tokenNames));
    } finally {
    }
    return retval;
  }

  // $ANTLR end "compositePredicate"

  // $ANTLR start "basePredicate"
  // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:297:1: basePredicate returns [PredicateLeaf pred] : p= property ext= predicateExtension ;
  public final PredicateLeaf basePredicate() throws RecognitionException {
    PredicateLeaf pred = null;

    PredicateLeafProperty p = null;

    IteraQl2Parser.predicateExtension_return ext = null;

    try {
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:298:2: (p= property ext= predicateExtension )
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:298:4: p= property ext= predicateExtension
      {
        pushFollow(FOLLOW_property_in_basePredicate1042);
        p = property();

        state._fsp--;

        pushFollow(FOLLOW_predicateExtension_in_basePredicate1046);
        ext = predicateExtension();

        state._fsp--;

        pred = new PredicateLeaf(p, (ext != null ? ext.op : null), (ext != null ? ext.value : null));

      }

    }

    catch (RecognitionException ex) {
      throw new IteraQl2Exception(IteraQl2Exception.PARSER_INVALID_QUERY_STRING, "The entered query is not syntactically correct: "
          + getErrorMessage(ex, tokenNames));
    } finally {
    }
    return pred;
  }

  // $ANTLR end "basePredicate"

  public static class predicateExtension_return extends ParserRuleReturnScope {
    public ComparisonOperatorExpression op;
    public PredicateLeafReferenceValue  value;
  };

  // $ANTLR start "predicateExtension"
  // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:304:1: predicateExtension returns [ComparisonOperatorExpression op, PredicateLeafReferenceValue value] : ( (bOp= bOperation ( (p= property ) | (pVal= predicateValue ) ( WSSEQ )? ) ) | ( ( WSSEQ )? FULL_STOP KEYWORD_BEGINS_WITH LEFT_PARENTHESIS ( WSSEQ )? bVal= stringPropertyValue ( WSSEQ )? RIGHT_PARENTHESIS ( WSSEQ )? ) | ( ( WSSEQ )? FULL_STOP KEYWORD_ENDS_WITH LEFT_PARENTHESIS ( WSSEQ )? eVal= stringPropertyValue ( WSSEQ )? RIGHT_PARENTHESIS ( WSSEQ )? ) | ( ( WSSEQ )? FULL_STOP KEYWORD_CONTAINS LEFT_PARENTHESIS ( WSSEQ )? cVal= stringPropertyValue ( WSSEQ )? RIGHT_PARENTHESIS ( WSSEQ )? ) );
  public final IteraQl2Parser.predicateExtension_return predicateExtension() throws RecognitionException {
    IteraQl2Parser.predicateExtension_return retval = new IteraQl2Parser.predicateExtension_return();
    retval.start = input.LT(1);

    ComparisonOperatorExpression bOp = null;

    PredicateLeafProperty p = null;

    String pVal = null;

    PredicateLeafReferenceValue bVal = null;

    PredicateLeafReferenceValue eVal = null;

    PredicateLeafReferenceValue cVal = null;

    try {
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:305:2: ( (bOp= bOperation ( (p= property ) | (pVal= predicateValue ) ( WSSEQ )? ) ) | ( ( WSSEQ )? FULL_STOP KEYWORD_BEGINS_WITH LEFT_PARENTHESIS ( WSSEQ )? bVal= stringPropertyValue ( WSSEQ )? RIGHT_PARENTHESIS ( WSSEQ )? ) | ( ( WSSEQ )? FULL_STOP KEYWORD_ENDS_WITH LEFT_PARENTHESIS ( WSSEQ )? eVal= stringPropertyValue ( WSSEQ )? RIGHT_PARENTHESIS ( WSSEQ )? ) | ( ( WSSEQ )? FULL_STOP KEYWORD_CONTAINS LEFT_PARENTHESIS ( WSSEQ )? cVal= stringPropertyValue ( WSSEQ )? RIGHT_PARENTHESIS ( WSSEQ )? ) )
      int alt54 = 4;
      switch (input.LA(1)) {
        case WSSEQ: {
          int LA54_1 = input.LA(2);

          if ((LA54_1 == EXCLAMATION_MARK || (LA54_1 >= LESS_THAN && LA54_1 <= EQUALS))) {
            alt54 = 1;
          }
          else if ((LA54_1 == FULL_STOP)) {
            switch (input.LA(3)) {
              case KEYWORD_BEGINS_WITH: {
                alt54 = 2;
              }
              break;
              case KEYWORD_ENDS_WITH: {
                alt54 = 3;
              }
              break;
              case KEYWORD_CONTAINS: {
                alt54 = 4;
              }
              break;
              default:
                NoViableAltException nvae = new NoViableAltException("", 54, 3, input);

                throw nvae;
            }

          }
          else {
            NoViableAltException nvae = new NoViableAltException("", 54, 1, input);

            throw nvae;
          }
        }
        break;
        case EXCLAMATION_MARK:
        case LESS_THAN:
        case GREATER_THAN:
        case EQUALS: {
          alt54 = 1;
        }
        break;
        case FULL_STOP: {
          switch (input.LA(2)) {
            case KEYWORD_BEGINS_WITH: {
              alt54 = 2;
            }
            break;
            case KEYWORD_ENDS_WITH: {
              alt54 = 3;
            }
            break;
            case KEYWORD_CONTAINS: {
              alt54 = 4;
            }
            break;
            default:
              NoViableAltException nvae = new NoViableAltException("", 54, 3, input);

              throw nvae;
          }

        }
        break;
        default:
          NoViableAltException nvae = new NoViableAltException("", 54, 0, input);

          throw nvae;
      }

      switch (alt54) {
        case 1:
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:305:4: (bOp= bOperation ( (p= property ) | (pVal= predicateValue ) ( WSSEQ )? ) )
        {
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:305:4: (bOp= bOperation ( (p= property ) | (pVal= predicateValue ) ( WSSEQ )? ) )
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:306:3: bOp= bOperation ( (p= property ) | (pVal= predicateValue ) ( WSSEQ )? )
          {
            pushFollow(FOLLOW_bOperation_in_predicateExtension1072);
            bOp = bOperation();

            state._fsp--;

            retval.op = bOp;
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:306:29: ( (p= property ) | (pVal= predicateValue ) ( WSSEQ )? )
            int alt41 = 2;
            int LA41_0 = input.LA(1);

            if (((LA41_0 >= AT_SIGN && LA41_0 <= KEYWORD_VIEW))) {
              alt41 = 1;
            }
            else if ((LA41_0 == NAME || LA41_0 == STRVALUE)) {
              alt41 = 2;
            }
            else {
              NoViableAltException nvae = new NoViableAltException("", 41, 0, input);

              throw nvae;
            }
            switch (alt41) {
              case 1:
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:307:4: (p= property )
              {
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:307:4: (p= property )
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:308:5: p= property
                {
                  pushFollow(FOLLOW_property_in_predicateExtension1089);
                  p = property();

                  state._fsp--;

                  retval.value = new PropertyAsReferenceValue(p);

                }

              }
              break;
              case 2:
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:312:8: (pVal= predicateValue ) ( WSSEQ )?
              {
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:312:8: (pVal= predicateValue )
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:313:5: pVal= predicateValue
                {
                  pushFollow(FOLLOW_predicateValue_in_predicateExtension1112);
                  pVal = predicateValue();

                  state._fsp--;

                  retval.value = new SimpleReferenceValue(pVal);

                }

                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:317:6: ( WSSEQ )?
                int alt40 = 2;
                int LA40_0 = input.LA(1);

                if ((LA40_0 == WSSEQ)) {
                  alt40 = 1;
                }
                switch (alt40) {
                  case 1:
                    // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:317:6: WSSEQ
                  {
                    match(input, WSSEQ, FOLLOW_WSSEQ_in_predicateExtension1125);

                  }
                  break;

                }

              }
              break;

            }

          }

        }
        break;
        case 2:
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:320:4: ( ( WSSEQ )? FULL_STOP KEYWORD_BEGINS_WITH LEFT_PARENTHESIS ( WSSEQ )? bVal= stringPropertyValue ( WSSEQ )? RIGHT_PARENTHESIS ( WSSEQ )? )
        {
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:320:4: ( ( WSSEQ )? FULL_STOP KEYWORD_BEGINS_WITH LEFT_PARENTHESIS ( WSSEQ )? bVal= stringPropertyValue ( WSSEQ )? RIGHT_PARENTHESIS ( WSSEQ )? )
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:321:3: ( WSSEQ )? FULL_STOP KEYWORD_BEGINS_WITH LEFT_PARENTHESIS ( WSSEQ )? bVal= stringPropertyValue ( WSSEQ )? RIGHT_PARENTHESIS ( WSSEQ )?
          {
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:321:3: ( WSSEQ )?
            int alt42 = 2;
            int LA42_0 = input.LA(1);

            if ((LA42_0 == WSSEQ)) {
              alt42 = 1;
            }
            switch (alt42) {
              case 1:
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:321:3: WSSEQ
              {
                match(input, WSSEQ, FOLLOW_WSSEQ_in_predicateExtension1144);

              }
              break;

            }

            match(input, FULL_STOP, FOLLOW_FULL_STOP_in_predicateExtension1147);
            match(input, KEYWORD_BEGINS_WITH, FOLLOW_KEYWORD_BEGINS_WITH_in_predicateExtension1149);
            match(input, LEFT_PARENTHESIS, FOLLOW_LEFT_PARENTHESIS_in_predicateExtension1151);
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:321:57: ( WSSEQ )?
            int alt43 = 2;
            int LA43_0 = input.LA(1);

            if ((LA43_0 == WSSEQ)) {
              alt43 = 1;
            }
            switch (alt43) {
              case 1:
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:321:57: WSSEQ
              {
                match(input, WSSEQ, FOLLOW_WSSEQ_in_predicateExtension1153);

              }
              break;

            }

            pushFollow(FOLLOW_stringPropertyValue_in_predicateExtension1158);
            bVal = stringPropertyValue();

            state._fsp--;

            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:321:89: ( WSSEQ )?
            int alt44 = 2;
            int LA44_0 = input.LA(1);

            if ((LA44_0 == WSSEQ)) {
              alt44 = 1;
            }
            switch (alt44) {
              case 1:
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:321:89: WSSEQ
              {
                match(input, WSSEQ, FOLLOW_WSSEQ_in_predicateExtension1160);

              }
              break;

            }

            match(input, RIGHT_PARENTHESIS, FOLLOW_RIGHT_PARENTHESIS_in_predicateExtension1163);
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:321:114: ( WSSEQ )?
            int alt45 = 2;
            int LA45_0 = input.LA(1);

            if ((LA45_0 == WSSEQ)) {
              alt45 = 1;
            }
            switch (alt45) {
              case 1:
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:321:114: WSSEQ
              {
                match(input, WSSEQ, FOLLOW_WSSEQ_in_predicateExtension1165);

              }
              break;

            }

            retval.op = ComparisonOperators.BEGINS_WITH;
            retval.value = bVal;

          }

        }
        break;
        case 3:
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:327:4: ( ( WSSEQ )? FULL_STOP KEYWORD_ENDS_WITH LEFT_PARENTHESIS ( WSSEQ )? eVal= stringPropertyValue ( WSSEQ )? RIGHT_PARENTHESIS ( WSSEQ )? )
        {
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:327:4: ( ( WSSEQ )? FULL_STOP KEYWORD_ENDS_WITH LEFT_PARENTHESIS ( WSSEQ )? eVal= stringPropertyValue ( WSSEQ )? RIGHT_PARENTHESIS ( WSSEQ )? )
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:328:3: ( WSSEQ )? FULL_STOP KEYWORD_ENDS_WITH LEFT_PARENTHESIS ( WSSEQ )? eVal= stringPropertyValue ( WSSEQ )? RIGHT_PARENTHESIS ( WSSEQ )?
          {
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:328:3: ( WSSEQ )?
            int alt46 = 2;
            int LA46_0 = input.LA(1);

            if ((LA46_0 == WSSEQ)) {
              alt46 = 1;
            }
            switch (alt46) {
              case 1:
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:328:3: WSSEQ
              {
                match(input, WSSEQ, FOLLOW_WSSEQ_in_predicateExtension1184);

              }
              break;

            }

            match(input, FULL_STOP, FOLLOW_FULL_STOP_in_predicateExtension1187);
            match(input, KEYWORD_ENDS_WITH, FOLLOW_KEYWORD_ENDS_WITH_in_predicateExtension1189);
            match(input, LEFT_PARENTHESIS, FOLLOW_LEFT_PARENTHESIS_in_predicateExtension1191);
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:328:55: ( WSSEQ )?
            int alt47 = 2;
            int LA47_0 = input.LA(1);

            if ((LA47_0 == WSSEQ)) {
              alt47 = 1;
            }
            switch (alt47) {
              case 1:
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:328:55: WSSEQ
              {
                match(input, WSSEQ, FOLLOW_WSSEQ_in_predicateExtension1193);

              }
              break;

            }

            pushFollow(FOLLOW_stringPropertyValue_in_predicateExtension1198);
            eVal = stringPropertyValue();

            state._fsp--;

            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:328:87: ( WSSEQ )?
            int alt48 = 2;
            int LA48_0 = input.LA(1);

            if ((LA48_0 == WSSEQ)) {
              alt48 = 1;
            }
            switch (alt48) {
              case 1:
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:328:87: WSSEQ
              {
                match(input, WSSEQ, FOLLOW_WSSEQ_in_predicateExtension1200);

              }
              break;

            }

            match(input, RIGHT_PARENTHESIS, FOLLOW_RIGHT_PARENTHESIS_in_predicateExtension1203);
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:328:112: ( WSSEQ )?
            int alt49 = 2;
            int LA49_0 = input.LA(1);

            if ((LA49_0 == WSSEQ)) {
              alt49 = 1;
            }
            switch (alt49) {
              case 1:
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:328:112: WSSEQ
              {
                match(input, WSSEQ, FOLLOW_WSSEQ_in_predicateExtension1205);

              }
              break;

            }

            retval.op = ComparisonOperators.ENDS_WITH;
            retval.value = eVal;

          }

        }
        break;
        case 4:
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:334:4: ( ( WSSEQ )? FULL_STOP KEYWORD_CONTAINS LEFT_PARENTHESIS ( WSSEQ )? cVal= stringPropertyValue ( WSSEQ )? RIGHT_PARENTHESIS ( WSSEQ )? )
        {
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:334:4: ( ( WSSEQ )? FULL_STOP KEYWORD_CONTAINS LEFT_PARENTHESIS ( WSSEQ )? cVal= stringPropertyValue ( WSSEQ )? RIGHT_PARENTHESIS ( WSSEQ )? )
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:335:3: ( WSSEQ )? FULL_STOP KEYWORD_CONTAINS LEFT_PARENTHESIS ( WSSEQ )? cVal= stringPropertyValue ( WSSEQ )? RIGHT_PARENTHESIS ( WSSEQ )?
          {
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:335:3: ( WSSEQ )?
            int alt50 = 2;
            int LA50_0 = input.LA(1);

            if ((LA50_0 == WSSEQ)) {
              alt50 = 1;
            }
            switch (alt50) {
              case 1:
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:335:3: WSSEQ
              {
                match(input, WSSEQ, FOLLOW_WSSEQ_in_predicateExtension1224);

              }
              break;

            }

            match(input, FULL_STOP, FOLLOW_FULL_STOP_in_predicateExtension1227);
            match(input, KEYWORD_CONTAINS, FOLLOW_KEYWORD_CONTAINS_in_predicateExtension1229);
            match(input, LEFT_PARENTHESIS, FOLLOW_LEFT_PARENTHESIS_in_predicateExtension1231);
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:335:54: ( WSSEQ )?
            int alt51 = 2;
            int LA51_0 = input.LA(1);

            if ((LA51_0 == WSSEQ)) {
              alt51 = 1;
            }
            switch (alt51) {
              case 1:
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:335:54: WSSEQ
              {
                match(input, WSSEQ, FOLLOW_WSSEQ_in_predicateExtension1233);

              }
              break;

            }

            pushFollow(FOLLOW_stringPropertyValue_in_predicateExtension1238);
            cVal = stringPropertyValue();

            state._fsp--;

            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:335:86: ( WSSEQ )?
            int alt52 = 2;
            int LA52_0 = input.LA(1);

            if ((LA52_0 == WSSEQ)) {
              alt52 = 1;
            }
            switch (alt52) {
              case 1:
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:335:86: WSSEQ
              {
                match(input, WSSEQ, FOLLOW_WSSEQ_in_predicateExtension1240);

              }
              break;

            }

            match(input, RIGHT_PARENTHESIS, FOLLOW_RIGHT_PARENTHESIS_in_predicateExtension1243);
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:335:111: ( WSSEQ )?
            int alt53 = 2;
            int LA53_0 = input.LA(1);

            if ((LA53_0 == WSSEQ)) {
              alt53 = 1;
            }
            switch (alt53) {
              case 1:
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:335:111: WSSEQ
              {
                match(input, WSSEQ, FOLLOW_WSSEQ_in_predicateExtension1245);

              }
              break;

            }

            retval.op = ComparisonOperators.CONTAINS;
            retval.value = cVal;

          }

        }
        break;

      }
      retval.stop = input.LT(-1);

    }

    catch (RecognitionException ex) {
      throw new IteraQl2Exception(IteraQl2Exception.PARSER_INVALID_QUERY_STRING, "The entered query is not syntactically correct: "
          + getErrorMessage(ex, tokenNames));
    } finally {
    }
    return retval;
  }

  // $ANTLR end "predicateExtension"

  // $ANTLR start "predicateValue"
  // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:343:1: predicateValue returns [String value] : ( (tVal= predicateValueToken ) | (val= STRVALUE ) );
  public final String predicateValue() throws RecognitionException {
    String value = null;

    Token val = null;
    IteraQl2Parser.predicateValueToken_return tVal = null;

    try {
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:344:2: ( (tVal= predicateValueToken ) | (val= STRVALUE ) )
      int alt55 = 2;
      int LA55_0 = input.LA(1);

      if ((LA55_0 == NAME)) {
        alt55 = 1;
      }
      else if ((LA55_0 == STRVALUE)) {
        alt55 = 2;
      }
      else {
        NoViableAltException nvae = new NoViableAltException("", 55, 0, input);

        throw nvae;
      }
      switch (alt55) {
        case 1:
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:344:4: (tVal= predicateValueToken )
        {
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:344:4: (tVal= predicateValueToken )
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:345:3: tVal= predicateValueToken
          {
            pushFollow(FOLLOW_predicateValueToken_in_predicateValue1277);
            tVal = predicateValueToken();

            state._fsp--;

            value = (tVal != null ? input.toString(tVal.start, tVal.stop) : null).trim();

          }

        }
        break;
        case 2:
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:350:4: (val= STRVALUE )
        {
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:350:4: (val= STRVALUE )
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:351:3: val= STRVALUE
          {
            val = (Token) match(input, STRVALUE, FOLLOW_STRVALUE_in_predicateValue1299);

            value = (val != null ? val.getText() : null).trim().substring(1, ((val != null ? val.getText() : null).trim().length() - 1));

          }

        }
        break;

      }
    }

    catch (RecognitionException ex) {
      throw new IteraQl2Exception(IteraQl2Exception.PARSER_INVALID_QUERY_STRING, "The entered query is not syntactically correct: "
          + getErrorMessage(ex, tokenNames));
    } finally {
    }
    return value;
  }

  // $ANTLR end "predicateValue"

  public static class predicateValueToken_return extends ParserRuleReturnScope {
    public String val;
  };

  // $ANTLR start "predicateValueToken"
  // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:360:1: predicateValueToken returns [String val] : (baseName= NAME (fs= FULL_STOP aName= NAME )* ) ;
  public final IteraQl2Parser.predicateValueToken_return predicateValueToken() throws RecognitionException {
    IteraQl2Parser.predicateValueToken_return retval = new IteraQl2Parser.predicateValueToken_return();
    retval.start = input.LT(1);

    Token baseName = null;
    Token fs = null;
    Token aName = null;

    try {
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:361:3: ( (baseName= NAME (fs= FULL_STOP aName= NAME )* ) )
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:361:5: (baseName= NAME (fs= FULL_STOP aName= NAME )* )
      {

        String result = null;

        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:364:5: (baseName= NAME (fs= FULL_STOP aName= NAME )* )
        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:365:7: baseName= NAME (fs= FULL_STOP aName= NAME )*
        {
          baseName = (Token) match(input, NAME, FOLLOW_NAME_in_predicateValueToken1344);

          result = (baseName != null ? baseName.getText() : null);

          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:369:7: (fs= FULL_STOP aName= NAME )*
          loop56: do {
            int alt56 = 2;
            int LA56_0 = input.LA(1);

            if ((LA56_0 == FULL_STOP)) {
              alt56 = 1;
            }

            switch (alt56) {
              case 1:
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:370:9: fs= FULL_STOP aName= NAME
              {
                fs = (Token) match(input, FULL_STOP, FOLLOW_FULL_STOP_in_predicateValueToken1372);
                aName = (Token) match(input, NAME, FOLLOW_NAME_in_predicateValueToken1376);

                result = result + (fs != null ? fs.getText() : null) + (aName != null ? aName.getText() : null);

              }
              break;

              default:
                break loop56;
            }
          } while (true);

        }

        retval.val = result;

      }

      retval.stop = input.LT(-1);

    }

    catch (RecognitionException ex) {
      throw new IteraQl2Exception(IteraQl2Exception.PARSER_INVALID_QUERY_STRING, "The entered query is not syntactically correct: "
          + getErrorMessage(ex, tokenNames));
    } finally {
    }
    return retval;
  }

  // $ANTLR end "predicateValueToken"

  // $ANTLR start "stringPropertyValue"
  // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:382:1: stringPropertyValue returns [PredicateLeafReferenceValue value] : ( (p= property ) | (val= STRVALUE ) );
  public final PredicateLeafReferenceValue stringPropertyValue() throws RecognitionException {
    PredicateLeafReferenceValue value = null;

    Token val = null;
    PredicateLeafProperty p = null;

    try {
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:383:2: ( (p= property ) | (val= STRVALUE ) )
      int alt57 = 2;
      int LA57_0 = input.LA(1);

      if (((LA57_0 >= AT_SIGN && LA57_0 <= KEYWORD_VIEW))) {
        alt57 = 1;
      }
      else if ((LA57_0 == STRVALUE)) {
        alt57 = 2;
      }
      else {
        NoViableAltException nvae = new NoViableAltException("", 57, 0, input);

        throw nvae;
      }
      switch (alt57) {
        case 1:
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:383:4: (p= property )
        {
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:383:4: (p= property )
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:384:3: p= property
          {
            pushFollow(FOLLOW_property_in_stringPropertyValue1430);
            p = property();

            state._fsp--;

            value = new PropertyAsReferenceValue(p);

          }

        }
        break;
        case 2:
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:389:4: (val= STRVALUE )
        {
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:389:4: (val= STRVALUE )
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:390:3: val= STRVALUE
          {
            val = (Token) match(input, STRVALUE, FOLLOW_STRVALUE_in_stringPropertyValue1451);

            value = new SimpleReferenceValue((val != null ? val.getText() : null).trim().substring(1,
                ((val != null ? val.getText() : null).trim().length() - 1)));

          }

        }
        break;

      }
    }

    catch (RecognitionException ex) {
      throw new IteraQl2Exception(IteraQl2Exception.PARSER_INVALID_QUERY_STRING, "The entered query is not syntactically correct: "
          + getErrorMessage(ex, tokenNames));
    } finally {
    }
    return value;
  }

  // $ANTLR end "stringPropertyValue"

  // $ANTLR start "bOperation"
  // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:397:1: bOperation returns [ComparisonOperatorExpression op] : ( WSSEQ )? ( ( LESS_THAN ) | ( GREATER_THAN ) | ( LESS_THAN EQUALS ) | ( GREATER_THAN EQUALS ) | ( EQUALS ) | ( EXCLAMATION_MARK EQUALS ) ) ( WSSEQ )? ;
  public final ComparisonOperatorExpression bOperation() throws RecognitionException {
    ComparisonOperatorExpression op = null;

    try {
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:398:2: ( ( WSSEQ )? ( ( LESS_THAN ) | ( GREATER_THAN ) | ( LESS_THAN EQUALS ) | ( GREATER_THAN EQUALS ) | ( EQUALS ) | ( EXCLAMATION_MARK EQUALS ) ) ( WSSEQ )? )
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:398:4: ( WSSEQ )? ( ( LESS_THAN ) | ( GREATER_THAN ) | ( LESS_THAN EQUALS ) | ( GREATER_THAN EQUALS ) | ( EQUALS ) | ( EXCLAMATION_MARK EQUALS ) ) ( WSSEQ )?
      {
        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:398:4: ( WSSEQ )?
        int alt58 = 2;
        int LA58_0 = input.LA(1);

        if ((LA58_0 == WSSEQ)) {
          alt58 = 1;
        }
        switch (alt58) {
          case 1:
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:398:4: WSSEQ
          {
            match(input, WSSEQ, FOLLOW_WSSEQ_in_bOperation1475);

          }
          break;

        }

        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:398:11: ( ( LESS_THAN ) | ( GREATER_THAN ) | ( LESS_THAN EQUALS ) | ( GREATER_THAN EQUALS ) | ( EQUALS ) | ( EXCLAMATION_MARK EQUALS ) )
        int alt59 = 6;
        switch (input.LA(1)) {
          case LESS_THAN: {
            int LA59_1 = input.LA(2);

            if ((LA59_1 == EQUALS)) {
              alt59 = 3;
            }
            else if ((LA59_1 == WSSEQ || LA59_1 == NAME || (LA59_1 >= AT_SIGN && LA59_1 <= KEYWORD_VIEW) || LA59_1 == STRVALUE)) {
              alt59 = 1;
            }
            else {
              NoViableAltException nvae = new NoViableAltException("", 59, 1, input);

              throw nvae;
            }
          }
          break;
          case GREATER_THAN: {
            int LA59_2 = input.LA(2);

            if ((LA59_2 == EQUALS)) {
              alt59 = 4;
            }
            else if ((LA59_2 == WSSEQ || LA59_2 == NAME || (LA59_2 >= AT_SIGN && LA59_2 <= KEYWORD_VIEW) || LA59_2 == STRVALUE)) {
              alt59 = 2;
            }
            else {
              NoViableAltException nvae = new NoViableAltException("", 59, 2, input);

              throw nvae;
            }
          }
          break;
          case EQUALS: {
            alt59 = 5;
          }
          break;
          case EXCLAMATION_MARK: {
            alt59 = 6;
          }
          break;
          default:
            NoViableAltException nvae = new NoViableAltException("", 59, 0, input);

            throw nvae;
        }

        switch (alt59) {
          case 1:
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:399:2: ( LESS_THAN )
          {
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:399:2: ( LESS_THAN )
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:399:4: LESS_THAN
            {
              match(input, LESS_THAN, FOLLOW_LESS_THAN_in_bOperation1483);
              op = ComparisonOperators.LESS;

            }

          }
          break;
          case 2:
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:400:4: ( GREATER_THAN )
          {
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:400:4: ( GREATER_THAN )
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:400:6: GREATER_THAN
            {
              match(input, GREATER_THAN, FOLLOW_GREATER_THAN_in_bOperation1493);
              op = ComparisonOperators.GREATER;

            }

          }
          break;
          case 3:
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:401:4: ( LESS_THAN EQUALS )
          {
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:401:4: ( LESS_THAN EQUALS )
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:401:6: LESS_THAN EQUALS
            {
              match(input, LESS_THAN, FOLLOW_LESS_THAN_in_bOperation1504);
              match(input, EQUALS, FOLLOW_EQUALS_in_bOperation1506);
              op = ComparisonOperators.LESS_EQUALS;

            }

          }
          break;
          case 4:
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:402:4: ( GREATER_THAN EQUALS )
          {
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:402:4: ( GREATER_THAN EQUALS )
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:402:6: GREATER_THAN EQUALS
            {
              match(input, GREATER_THAN, FOLLOW_GREATER_THAN_in_bOperation1517);
              match(input, EQUALS, FOLLOW_EQUALS_in_bOperation1519);
              op = ComparisonOperators.GREATER_EQUALS;

            }

          }
          break;
          case 5:
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:403:4: ( EQUALS )
          {
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:403:4: ( EQUALS )
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:403:6: EQUALS
            {
              match(input, EQUALS, FOLLOW_EQUALS_in_bOperation1530);
              op = ComparisonOperators.EQUALS;

            }

          }
          break;
          case 6:
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:404:4: ( EXCLAMATION_MARK EQUALS )
          {
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:404:4: ( EXCLAMATION_MARK EQUALS )
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:404:6: EXCLAMATION_MARK EQUALS
            {
              match(input, EXCLAMATION_MARK, FOLLOW_EXCLAMATION_MARK_in_bOperation1541);
              match(input, EQUALS, FOLLOW_EQUALS_in_bOperation1543);
              op = ComparisonOperators.NOT_EQUALS;

            }

          }
          break;

        }

        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:405:4: ( WSSEQ )?
        int alt60 = 2;
        int LA60_0 = input.LA(1);

        if ((LA60_0 == WSSEQ)) {
          alt60 = 1;
        }
        switch (alt60) {
          case 1:
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:405:4: WSSEQ
          {
            match(input, WSSEQ, FOLLOW_WSSEQ_in_bOperation1552);

          }
          break;

        }

      }

    }

    catch (RecognitionException ex) {
      throw new IteraQl2Exception(IteraQl2Exception.PARSER_INVALID_QUERY_STRING, "The entered query is not syntactically correct: "
          + getErrorMessage(ex, tokenNames));
    } finally {
    }
    return op;
  }

  // $ANTLR end "bOperation"

  // $ANTLR start "extension"
  // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:408:1: extension returns [Extension extension] : ( ( LEFT_CURLY_BRACKET ( (newName= NAME EQUALS ( WSSEQ )? )? p= property )+ ( WSSEQ )? RIGHT_CURLY_BRACKET ) | ( FULL_STOP KEYWORD_CLUSTER LEFT_PARENTHESIS ( WSSEQ )? kRelEnd= relationshipEnd ( WSSEQ )? RIGHT_PARENTHESIS ) | ( FULL_STOP KEYWORD_OBJECTIFY LEFT_PARENTHESIS ( WSSEQ )? p= property ( WSSEQ )? RIGHT_PARENTHESIS ) | ( LEFT_SQUARE_BRACKET ( WSSEQ )? pred= predicate RIGHT_SQUARE_BRACKET ) | ( FULL_STOP KEYWORD_EXPAND LEFT_PARENTHESIS ( WSSEQ )? expEnd= relationshipEnd ( WSSEQ )? RIGHT_PARENTHESIS ) );
  public final Extension extension() throws RecognitionException {
    Extension extension = null;

    Token newName = null;
    PredicateLeafProperty p = null;

    RelationshipEnd kRelEnd = null;

    Predicate pred = null;

    RelationshipEnd expEnd = null;

    try {
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:409:2: ( ( LEFT_CURLY_BRACKET ( (newName= NAME EQUALS ( WSSEQ )? )? p= property )+ ( WSSEQ )? RIGHT_CURLY_BRACKET ) | ( FULL_STOP KEYWORD_CLUSTER LEFT_PARENTHESIS ( WSSEQ )? kRelEnd= relationshipEnd ( WSSEQ )? RIGHT_PARENTHESIS ) | ( FULL_STOP KEYWORD_OBJECTIFY LEFT_PARENTHESIS ( WSSEQ )? p= property ( WSSEQ )? RIGHT_PARENTHESIS ) | ( LEFT_SQUARE_BRACKET ( WSSEQ )? pred= predicate RIGHT_SQUARE_BRACKET ) | ( FULL_STOP KEYWORD_EXPAND LEFT_PARENTHESIS ( WSSEQ )? expEnd= relationshipEnd ( WSSEQ )? RIGHT_PARENTHESIS ) )
      int alt72 = 5;
      switch (input.LA(1)) {
        case LEFT_CURLY_BRACKET: {
          alt72 = 1;
        }
        break;
        case FULL_STOP: {
          switch (input.LA(2)) {
            case KEYWORD_CLUSTER: {
              alt72 = 2;
            }
            break;
            case KEYWORD_OBJECTIFY: {
              alt72 = 3;
            }
            break;
            case KEYWORD_EXPAND: {
              alt72 = 5;
            }
            break;
            default:
              NoViableAltException nvae = new NoViableAltException("", 72, 2, input);

              throw nvae;
          }

        }
        break;
        case LEFT_SQUARE_BRACKET: {
          alt72 = 4;
        }
        break;
        default:
          NoViableAltException nvae = new NoViableAltException("", 72, 0, input);

          throw nvae;
      }

      switch (alt72) {
        case 1:
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:409:4: ( LEFT_CURLY_BRACKET ( (newName= NAME EQUALS ( WSSEQ )? )? p= property )+ ( WSSEQ )? RIGHT_CURLY_BRACKET )
        {
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:409:4: ( LEFT_CURLY_BRACKET ( (newName= NAME EQUALS ( WSSEQ )? )? p= property )+ ( WSSEQ )? RIGHT_CURLY_BRACKET )
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:410:3: LEFT_CURLY_BRACKET ( (newName= NAME EQUALS ( WSSEQ )? )? p= property )+ ( WSSEQ )? RIGHT_CURLY_BRACKET
          {

            List<MoveExtensionProperty> props = new ArrayList<MoveExtensionProperty>();

            match(input, LEFT_CURLY_BRACKET, FOLLOW_LEFT_CURLY_BRACKET_in_extension1577);
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:414:4: ( (newName= NAME EQUALS ( WSSEQ )? )? p= property )+
            int cnt63 = 0;
            loop63: do {
              int alt63 = 2;
              int LA63_0 = input.LA(1);

              if ((LA63_0 == NAME || (LA63_0 >= AT_SIGN && LA63_0 <= KEYWORD_VIEW))) {
                alt63 = 1;
              }

              switch (alt63) {
                case 1:
                  // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:415:6: (newName= NAME EQUALS ( WSSEQ )? )? p= property
                {

                  String identifier = null;

                  // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:418:5: (newName= NAME EQUALS ( WSSEQ )? )?
                  int alt62 = 2;
                  int LA62_0 = input.LA(1);

                  if ((LA62_0 == NAME)) {
                    alt62 = 1;
                  }
                  switch (alt62) {
                    case 1:
                      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:419:6: newName= NAME EQUALS ( WSSEQ )?
                    {
                      newName = (Token) match(input, NAME, FOLLOW_NAME_in_extension1605);
                      match(input, EQUALS, FOLLOW_EQUALS_in_extension1607);
                      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:419:26: ( WSSEQ )?
                      int alt61 = 2;
                      int LA61_0 = input.LA(1);

                      if ((LA61_0 == WSSEQ)) {
                        alt61 = 1;
                      }
                      switch (alt61) {
                        case 1:
                          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:419:26: WSSEQ
                        {
                          match(input, WSSEQ, FOLLOW_WSSEQ_in_extension1609);

                        }
                        break;

                      }

                      identifier = (newName != null ? newName.getText() : null).trim();

                    }
                    break;

                  }

                  pushFollow(FOLLOW_property_in_extension1630);
                  p = property();

                  state._fsp--;

                  props.add(new MoveExtensionProperty(identifier, p));

                }
                break;

                default:
                  if (cnt63 >= 1) {
                    break loop63;
                  }
                  EarlyExitException eee = new EarlyExitException(63, input);
                  throw eee;
              }
              cnt63++;
            } while (true);

            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:427:7: ( WSSEQ )?
            int alt64 = 2;
            int LA64_0 = input.LA(1);

            if ((LA64_0 == WSSEQ)) {
              alt64 = 1;
            }
            switch (alt64) {
              case 1:
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:427:7: WSSEQ
              {
                match(input, WSSEQ, FOLLOW_WSSEQ_in_extension1645);

              }
              break;

            }

            match(input, RIGHT_CURLY_BRACKET, FOLLOW_RIGHT_CURLY_BRACKET_in_extension1648);

            extension = new MoveExtension(props);

          }

        }
        break;
        case 2:
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:432:4: ( FULL_STOP KEYWORD_CLUSTER LEFT_PARENTHESIS ( WSSEQ )? kRelEnd= relationshipEnd ( WSSEQ )? RIGHT_PARENTHESIS )
        {
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:432:4: ( FULL_STOP KEYWORD_CLUSTER LEFT_PARENTHESIS ( WSSEQ )? kRelEnd= relationshipEnd ( WSSEQ )? RIGHT_PARENTHESIS )
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:433:3: FULL_STOP KEYWORD_CLUSTER LEFT_PARENTHESIS ( WSSEQ )? kRelEnd= relationshipEnd ( WSSEQ )? RIGHT_PARENTHESIS
          {
            match(input, FULL_STOP, FOLLOW_FULL_STOP_in_extension1667);
            match(input, KEYWORD_CLUSTER, FOLLOW_KEYWORD_CLUSTER_in_extension1669);
            match(input, LEFT_PARENTHESIS, FOLLOW_LEFT_PARENTHESIS_in_extension1671);
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:433:46: ( WSSEQ )?
            int alt65 = 2;
            int LA65_0 = input.LA(1);

            if ((LA65_0 == WSSEQ)) {
              alt65 = 1;
            }
            switch (alt65) {
              case 1:
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:433:46: WSSEQ
              {
                match(input, WSSEQ, FOLLOW_WSSEQ_in_extension1673);

              }
              break;

            }

            pushFollow(FOLLOW_relationshipEnd_in_extension1678);
            kRelEnd = relationshipEnd();

            state._fsp--;

            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:433:77: ( WSSEQ )?
            int alt66 = 2;
            int LA66_0 = input.LA(1);

            if ((LA66_0 == WSSEQ)) {
              alt66 = 1;
            }
            switch (alt66) {
              case 1:
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:433:77: WSSEQ
              {
                match(input, WSSEQ, FOLLOW_WSSEQ_in_extension1680);

              }
              break;

            }

            match(input, RIGHT_PARENTHESIS, FOLLOW_RIGHT_PARENTHESIS_in_extension1683);

            extension = new ClusterExtension(kRelEnd);

          }

        }
        break;
        case 3:
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:438:4: ( FULL_STOP KEYWORD_OBJECTIFY LEFT_PARENTHESIS ( WSSEQ )? p= property ( WSSEQ )? RIGHT_PARENTHESIS )
        {
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:438:4: ( FULL_STOP KEYWORD_OBJECTIFY LEFT_PARENTHESIS ( WSSEQ )? p= property ( WSSEQ )? RIGHT_PARENTHESIS )
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:439:3: FULL_STOP KEYWORD_OBJECTIFY LEFT_PARENTHESIS ( WSSEQ )? p= property ( WSSEQ )? RIGHT_PARENTHESIS
          {
            match(input, FULL_STOP, FOLLOW_FULL_STOP_in_extension1703);
            match(input, KEYWORD_OBJECTIFY, FOLLOW_KEYWORD_OBJECTIFY_in_extension1705);
            match(input, LEFT_PARENTHESIS, FOLLOW_LEFT_PARENTHESIS_in_extension1707);
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:439:48: ( WSSEQ )?
            int alt67 = 2;
            int LA67_0 = input.LA(1);

            if ((LA67_0 == WSSEQ)) {
              alt67 = 1;
            }
            switch (alt67) {
              case 1:
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:439:48: WSSEQ
              {
                match(input, WSSEQ, FOLLOW_WSSEQ_in_extension1709);

              }
              break;

            }

            pushFollow(FOLLOW_property_in_extension1714);
            p = property();

            state._fsp--;

            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:439:66: ( WSSEQ )?
            int alt68 = 2;
            int LA68_0 = input.LA(1);

            if ((LA68_0 == WSSEQ)) {
              alt68 = 1;
            }
            switch (alt68) {
              case 1:
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:439:66: WSSEQ
              {
                match(input, WSSEQ, FOLLOW_WSSEQ_in_extension1716);

              }
              break;

            }

            match(input, RIGHT_PARENTHESIS, FOLLOW_RIGHT_PARENTHESIS_in_extension1719);

            extension = new ObjectifyExtension(p);

          }

        }
        break;
        case 4:
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:444:4: ( LEFT_SQUARE_BRACKET ( WSSEQ )? pred= predicate RIGHT_SQUARE_BRACKET )
        {
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:444:4: ( LEFT_SQUARE_BRACKET ( WSSEQ )? pred= predicate RIGHT_SQUARE_BRACKET )
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:445:3: LEFT_SQUARE_BRACKET ( WSSEQ )? pred= predicate RIGHT_SQUARE_BRACKET
          {

            Extension nextExtension = null;

            match(input, LEFT_SQUARE_BRACKET, FOLLOW_LEFT_SQUARE_BRACKET_in_extension1742);
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:448:23: ( WSSEQ )?
            int alt69 = 2;
            int LA69_0 = input.LA(1);

            if ((LA69_0 == WSSEQ)) {
              alt69 = 1;
            }
            switch (alt69) {
              case 1:
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:448:23: WSSEQ
              {
                match(input, WSSEQ, FOLLOW_WSSEQ_in_extension1744);

              }
              break;

            }

            pushFollow(FOLLOW_predicate_in_extension1749);
            pred = predicate();

            state._fsp--;

            match(input, RIGHT_SQUARE_BRACKET, FOLLOW_RIGHT_SQUARE_BRACKET_in_extension1751);

            extension = new PredicateExtension(pred);

          }

        }
        break;
        case 5:
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:453:4: ( FULL_STOP KEYWORD_EXPAND LEFT_PARENTHESIS ( WSSEQ )? expEnd= relationshipEnd ( WSSEQ )? RIGHT_PARENTHESIS )
        {
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:453:4: ( FULL_STOP KEYWORD_EXPAND LEFT_PARENTHESIS ( WSSEQ )? expEnd= relationshipEnd ( WSSEQ )? RIGHT_PARENTHESIS )
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:454:3: FULL_STOP KEYWORD_EXPAND LEFT_PARENTHESIS ( WSSEQ )? expEnd= relationshipEnd ( WSSEQ )? RIGHT_PARENTHESIS
          {

            Extension nextExtension = null;

            match(input, FULL_STOP, FOLLOW_FULL_STOP_in_extension1774);
            match(input, KEYWORD_EXPAND, FOLLOW_KEYWORD_EXPAND_in_extension1776);
            match(input, LEFT_PARENTHESIS, FOLLOW_LEFT_PARENTHESIS_in_extension1778);
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:457:45: ( WSSEQ )?
            int alt70 = 2;
            int LA70_0 = input.LA(1);

            if ((LA70_0 == WSSEQ)) {
              alt70 = 1;
            }
            switch (alt70) {
              case 1:
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:457:45: WSSEQ
              {
                match(input, WSSEQ, FOLLOW_WSSEQ_in_extension1780);

              }
              break;

            }

            pushFollow(FOLLOW_relationshipEnd_in_extension1785);
            expEnd = relationshipEnd();

            state._fsp--;

            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:457:75: ( WSSEQ )?
            int alt71 = 2;
            int LA71_0 = input.LA(1);

            if ((LA71_0 == WSSEQ)) {
              alt71 = 1;
            }
            switch (alt71) {
              case 1:
                // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:457:75: WSSEQ
              {
                match(input, WSSEQ, FOLLOW_WSSEQ_in_extension1787);

              }
              break;

            }

            match(input, RIGHT_PARENTHESIS, FOLLOW_RIGHT_PARENTHESIS_in_extension1790);

            extension = new ExpandExtension(expEnd);

          }

        }
        break;

      }
    }

    catch (RecognitionException ex) {
      throw new IteraQl2Exception(IteraQl2Exception.PARSER_INVALID_QUERY_STRING, "The entered query is not syntactically correct: "
          + getErrorMessage(ex, tokenNames));
    } finally {
    }
    return extension;
  }

  // $ANTLR end "extension"

  // Delegated rules

  public static final BitSet FOLLOW_universalType_in_query79                           = new BitSet(new long[] { 0x00000000000010B0L });
  public static final BitSet FOLLOW_WSSEQ_in_query89                                   = new BitSet(new long[] { 0x0000000000001090L });
  public static final BitSet FOLLOW_relationshipEnd_in_query94                         = new BitSet(new long[] { 0x0000000000000030L });
  public static final BitSet FOLLOW_WSSEQ_in_query106                                  = new BitSet(new long[] { 0x0000000000000020L });
  public static final BitSet FOLLOW_SEMICOLON_in_query109                              = new BitSet(new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_NAME_in_universalType134                           = new BitSet(new long[] { 0x0000000110000092L });
  public static final BitSet FOLLOW_WSSEQ_in_universalType143                          = new BitSet(new long[] { 0x0000000110000090L });
  public static final BitSet FOLLOW_universalTypeExtension_in_universalType148         = new BitSet(new long[] { 0x0000000110000092L });
  public static final BitSet FOLLOW_FULL_STOP_in_universalTypeExtension182             = new BitSet(new long[] { 0x0000000000000100L });
  public static final BitSet FOLLOW_KEYWORD_POWER_in_universalTypeExtension184         = new BitSet(new long[] { 0x0000000000000200L });
  public static final BitSet FOLLOW_LEFT_PARENTHESIS_in_universalTypeExtension186      = new BitSet(new long[] { 0x0000000000000410L });
  public static final BitSet FOLLOW_WSSEQ_in_universalTypeExtension188                 = new BitSet(new long[] { 0x0000000000000400L });
  public static final BitSet FOLLOW_RIGHT_PARENTHESIS_in_universalTypeExtension191     = new BitSet(new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_FULL_STOP_in_universalTypeExtension209             = new BitSet(new long[] { 0x0000000000000800L });
  public static final BitSet FOLLOW_KEYWORD_NULLIFY_in_universalTypeExtension211       = new BitSet(new long[] { 0x0000000000000200L });
  public static final BitSet FOLLOW_LEFT_PARENTHESIS_in_universalTypeExtension213      = new BitSet(new long[] { 0x0000000000000410L });
  public static final BitSet FOLLOW_WSSEQ_in_universalTypeExtension215                 = new BitSet(new long[] { 0x0000000000000400L });
  public static final BitSet FOLLOW_RIGHT_PARENTHESIS_in_universalTypeExtension218     = new BitSet(new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_extension_in_universalTypeExtension238             = new BitSet(new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_SLASH_in_relationshipEnd272                        = new BitSet(new long[] { 0x0000000000000040L });
  public static final BitSet FOLLOW_NAME_in_relationshipEnd276                         = new BitSet(new long[] { 0x0000000110001092L });
  public static final BitSet FOLLOW_WSSEQ_in_relationshipEnd288                        = new BitSet(new long[] { 0x0000000110000090L });
  public static final BitSet FOLLOW_relationshipEndExtension_in_relationshipEnd293     = new BitSet(new long[] { 0x0000000110001092L });
  public static final BitSet FOLLOW_WSSEQ_in_relationshipEnd319                        = new BitSet(new long[] { 0x0000000000001090L });
  public static final BitSet FOLLOW_relationshipEnd_in_relationshipEnd324              = new BitSet(new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_FULL_STOP_in_relationshipEnd360                    = new BitSet(new long[] { 0x0000000000002000L });
  public static final BitSet FOLLOW_KEYWORD_UNFOLD_in_relationshipEnd362               = new BitSet(new long[] { 0x0000000000000200L });
  public static final BitSet FOLLOW_LEFT_PARENTHESIS_in_relationshipEnd364             = new BitSet(new long[] { 0x0000000000001090L });
  public static final BitSet FOLLOW_WSSEQ_in_relationshipEnd366                        = new BitSet(new long[] { 0x0000000000001090L });
  public static final BitSet FOLLOW_relationshipEnd_in_relationshipEnd371              = new BitSet(new long[] { 0x0000000000000410L });
  public static final BitSet FOLLOW_WSSEQ_in_relationshipEnd373                        = new BitSet(new long[] { 0x0000000000000400L });
  public static final BitSet FOLLOW_RIGHT_PARENTHESIS_in_relationshipEnd376            = new BitSet(new long[] { 0x0000000110001092L });
  public static final BitSet FOLLOW_WSSEQ_in_relationshipEnd388                        = new BitSet(new long[] { 0x0000000110000090L });
  public static final BitSet FOLLOW_relationshipEndExtension_in_relationshipEnd393     = new BitSet(new long[] { 0x0000000110001092L });
  public static final BitSet FOLLOW_WSSEQ_in_relationshipEnd417                        = new BitSet(new long[] { 0x0000000000001090L });
  public static final BitSet FOLLOW_relationshipEnd_in_relationshipEnd422              = new BitSet(new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_FULL_STOP_in_relationshipEndExtension463           = new BitSet(new long[] { 0x0000000000000800L });
  public static final BitSet FOLLOW_KEYWORD_NULLIFY_in_relationshipEndExtension465     = new BitSet(new long[] { 0x0000000000000200L });
  public static final BitSet FOLLOW_LEFT_PARENTHESIS_in_relationshipEndExtension467    = new BitSet(new long[] { 0x0000000000001090L });
  public static final BitSet FOLLOW_WSSEQ_in_relationshipEndExtension469               = new BitSet(new long[] { 0x0000000000001090L });
  public static final BitSet FOLLOW_relationshipEnd_in_relationshipEndExtension474     = new BitSet(new long[] { 0x0000000000000410L });
  public static final BitSet FOLLOW_WSSEQ_in_relationshipEndExtension476               = new BitSet(new long[] { 0x0000000000000400L });
  public static final BitSet FOLLOW_RIGHT_PARENTHESIS_in_relationshipEndExtension479   = new BitSet(new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_extension_in_relationshipEndExtension500           = new BitSet(new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_AT_SIGN_in_property529                             = new BitSet(new long[] { 0x0000000000000040L });
  public static final BitSet FOLLOW_NAME_in_property533                                = new BitSet(new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_KEYWORD_FOLD_LEVEL_in_property552                  = new BitSet(new long[] { 0x0000000000000200L });
  public static final BitSet FOLLOW_LEFT_PARENTHESIS_in_property554                    = new BitSet(new long[] { 0x0000000000001090L });
  public static final BitSet FOLLOW_WSSEQ_in_property556                               = new BitSet(new long[] { 0x0000000000001090L });
  public static final BitSet FOLLOW_relationshipEnd_in_property561                     = new BitSet(new long[] { 0x0000000000000400L });
  public static final BitSet FOLLOW_RIGHT_PARENTHESIS_in_property563                   = new BitSet(new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_KEYWORD_COUNT_in_property581                       = new BitSet(new long[] { 0x0000000000000200L });
  public static final BitSet FOLLOW_LEFT_PARENTHESIS_in_property583                    = new BitSet(new long[] { 0x000000000003D090L });
  public static final BitSet FOLLOW_WSSEQ_in_property585                               = new BitSet(new long[] { 0x000000000003D090L });
  public static final BitSet FOLLOW_feature_in_property590                             = new BitSet(new long[] { 0x0000000000000400L });
  public static final BitSet FOLLOW_RIGHT_PARENTHESIS_in_property592                   = new BitSet(new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_KEYWORD_VIEW_in_property609                        = new BitSet(new long[] { 0x0000000000000200L });
  public static final BitSet FOLLOW_LEFT_PARENTHESIS_in_property611                    = new BitSet(new long[] { 0x0000000000001090L });
  public static final BitSet FOLLOW_WSSEQ_in_property613                               = new BitSet(new long[] { 0x0000000000001090L });
  public static final BitSet FOLLOW_relationshipEnd_in_property618                     = new BitSet(new long[] { 0x000000000003D090L });
  public static final BitSet FOLLOW_WSSEQ_in_property620                               = new BitSet(new long[] { 0x000000000003D090L });
  public static final BitSet FOLLOW_property_in_property625                            = new BitSet(new long[] { 0x0000000000000410L });
  public static final BitSet FOLLOW_WSSEQ_in_property627                               = new BitSet(new long[] { 0x0000000000000400L });
  public static final BitSet FOLLOW_RIGHT_PARENTHESIS_in_property630                   = new BitSet(new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_relationshipEnd_in_feature660                      = new BitSet(new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_property_in_feature680                             = new BitSet(new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_LEFT_PARENTHESIS_in_predicate720                   = new BitSet(new long[] { 0x000000000007D290L });
  public static final BitSet FOLLOW_WSSEQ_in_predicate722                              = new BitSet(new long[] { 0x000000000007D290L });
  public static final BitSet FOLLOW_predicate_in_predicate727                          = new BitSet(new long[] { 0x0000000000000400L });
  public static final BitSet FOLLOW_RIGHT_PARENTHESIS_in_predicate729                  = new BitSet(new long[] { 0x00000000001FD292L });
  public static final BitSet FOLLOW_WSSEQ_in_predicate731                              = new BitSet(new long[] { 0x00000000001FD292L });
  public static final BitSet FOLLOW_booleanOperationPredicate_in_predicate755          = new BitSet(new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_basePredicate_in_predicate801                      = new BitSet(new long[] { 0x0000000000180002L });
  public static final BitSet FOLLOW_compositePredicate_in_predicate805                 = new BitSet(new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_notPredicate_in_predicate827                       = new BitSet(new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_compositePredicate_in_booleanOperationPredicate866 = new BitSet(new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_notPredicate_in_booleanOperationPredicate899       = new BitSet(new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_EXCLAMATION_MARK_in_notPredicate938                = new BitSet(new long[] { 0x000000000007D290L });
  public static final BitSet FOLLOW_WSSEQ_in_notPredicate940                           = new BitSet(new long[] { 0x000000000007D290L });
  public static final BitSet FOLLOW_predicate_in_notPredicate945                       = new BitSet(new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_AMPERSAND_in_compositePredicate981                 = new BitSet(new long[] { 0x000000000007D290L });
  public static final BitSet FOLLOW_WSSEQ_in_compositePredicate983                     = new BitSet(new long[] { 0x000000000007D290L });
  public static final BitSet FOLLOW_predicate_in_compositePredicate988                 = new BitSet(new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_VERTICAL_BAR_in_compositePredicate1007             = new BitSet(new long[] { 0x000000000007D290L });
  public static final BitSet FOLLOW_WSSEQ_in_compositePredicate1009                    = new BitSet(new long[] { 0x000000000007D290L });
  public static final BitSet FOLLOW_predicate_in_compositePredicate1014                = new BitSet(new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_property_in_basePredicate1042                      = new BitSet(new long[] { 0x000000000E040090L });
  public static final BitSet FOLLOW_predicateExtension_in_basePredicate1046            = new BitSet(new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_bOperation_in_predicateExtension1072               = new BitSet(new long[] { 0x000000000103D0D0L });
  public static final BitSet FOLLOW_property_in_predicateExtension1089                 = new BitSet(new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_predicateValue_in_predicateExtension1112           = new BitSet(new long[] { 0x0000000000000012L });
  public static final BitSet FOLLOW_WSSEQ_in_predicateExtension1125                    = new BitSet(new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_WSSEQ_in_predicateExtension1144                    = new BitSet(new long[] { 0x0000000000000080L });
  public static final BitSet FOLLOW_FULL_STOP_in_predicateExtension1147                = new BitSet(new long[] { 0x0000000000200000L });
  public static final BitSet FOLLOW_KEYWORD_BEGINS_WITH_in_predicateExtension1149      = new BitSet(new long[] { 0x0000000000000200L });
  public static final BitSet FOLLOW_LEFT_PARENTHESIS_in_predicateExtension1151         = new BitSet(new long[] { 0x000000000103D090L });
  public static final BitSet FOLLOW_WSSEQ_in_predicateExtension1153                    = new BitSet(new long[] { 0x000000000103D090L });
  public static final BitSet FOLLOW_stringPropertyValue_in_predicateExtension1158      = new BitSet(new long[] { 0x0000000000000410L });
  public static final BitSet FOLLOW_WSSEQ_in_predicateExtension1160                    = new BitSet(new long[] { 0x0000000000000400L });
  public static final BitSet FOLLOW_RIGHT_PARENTHESIS_in_predicateExtension1163        = new BitSet(new long[] { 0x0000000000000012L });
  public static final BitSet FOLLOW_WSSEQ_in_predicateExtension1165                    = new BitSet(new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_WSSEQ_in_predicateExtension1184                    = new BitSet(new long[] { 0x0000000000000080L });
  public static final BitSet FOLLOW_FULL_STOP_in_predicateExtension1187                = new BitSet(new long[] { 0x0000000000400000L });
  public static final BitSet FOLLOW_KEYWORD_ENDS_WITH_in_predicateExtension1189        = new BitSet(new long[] { 0x0000000000000200L });
  public static final BitSet FOLLOW_LEFT_PARENTHESIS_in_predicateExtension1191         = new BitSet(new long[] { 0x000000000103D090L });
  public static final BitSet FOLLOW_WSSEQ_in_predicateExtension1193                    = new BitSet(new long[] { 0x000000000103D090L });
  public static final BitSet FOLLOW_stringPropertyValue_in_predicateExtension1198      = new BitSet(new long[] { 0x0000000000000410L });
  public static final BitSet FOLLOW_WSSEQ_in_predicateExtension1200                    = new BitSet(new long[] { 0x0000000000000400L });
  public static final BitSet FOLLOW_RIGHT_PARENTHESIS_in_predicateExtension1203        = new BitSet(new long[] { 0x0000000000000012L });
  public static final BitSet FOLLOW_WSSEQ_in_predicateExtension1205                    = new BitSet(new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_WSSEQ_in_predicateExtension1224                    = new BitSet(new long[] { 0x0000000000000080L });
  public static final BitSet FOLLOW_FULL_STOP_in_predicateExtension1227                = new BitSet(new long[] { 0x0000000000800000L });
  public static final BitSet FOLLOW_KEYWORD_CONTAINS_in_predicateExtension1229         = new BitSet(new long[] { 0x0000000000000200L });
  public static final BitSet FOLLOW_LEFT_PARENTHESIS_in_predicateExtension1231         = new BitSet(new long[] { 0x000000000103D090L });
  public static final BitSet FOLLOW_WSSEQ_in_predicateExtension1233                    = new BitSet(new long[] { 0x000000000103D090L });
  public static final BitSet FOLLOW_stringPropertyValue_in_predicateExtension1238      = new BitSet(new long[] { 0x0000000000000410L });
  public static final BitSet FOLLOW_WSSEQ_in_predicateExtension1240                    = new BitSet(new long[] { 0x0000000000000400L });
  public static final BitSet FOLLOW_RIGHT_PARENTHESIS_in_predicateExtension1243        = new BitSet(new long[] { 0x0000000000000012L });
  public static final BitSet FOLLOW_WSSEQ_in_predicateExtension1245                    = new BitSet(new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_predicateValueToken_in_predicateValue1277          = new BitSet(new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_STRVALUE_in_predicateValue1299                     = new BitSet(new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_NAME_in_predicateValueToken1344                    = new BitSet(new long[] { 0x0000000000000082L });
  public static final BitSet FOLLOW_FULL_STOP_in_predicateValueToken1372               = new BitSet(new long[] { 0x0000000000000040L });
  public static final BitSet FOLLOW_NAME_in_predicateValueToken1376                    = new BitSet(new long[] { 0x0000000000000082L });
  public static final BitSet FOLLOW_property_in_stringPropertyValue1430                = new BitSet(new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_STRVALUE_in_stringPropertyValue1451                = new BitSet(new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_WSSEQ_in_bOperation1475                            = new BitSet(new long[] { 0x000000000E040000L });
  public static final BitSet FOLLOW_LESS_THAN_in_bOperation1483                        = new BitSet(new long[] { 0x0000000000000012L });
  public static final BitSet FOLLOW_GREATER_THAN_in_bOperation1493                     = new BitSet(new long[] { 0x0000000000000012L });
  public static final BitSet FOLLOW_LESS_THAN_in_bOperation1504                        = new BitSet(new long[] { 0x0000000008000000L });
  public static final BitSet FOLLOW_EQUALS_in_bOperation1506                           = new BitSet(new long[] { 0x0000000000000012L });
  public static final BitSet FOLLOW_GREATER_THAN_in_bOperation1517                     = new BitSet(new long[] { 0x0000000008000000L });
  public static final BitSet FOLLOW_EQUALS_in_bOperation1519                           = new BitSet(new long[] { 0x0000000000000012L });
  public static final BitSet FOLLOW_EQUALS_in_bOperation1530                           = new BitSet(new long[] { 0x0000000000000012L });
  public static final BitSet FOLLOW_EXCLAMATION_MARK_in_bOperation1541                 = new BitSet(new long[] { 0x0000000008000000L });
  public static final BitSet FOLLOW_EQUALS_in_bOperation1543                           = new BitSet(new long[] { 0x0000000000000012L });
  public static final BitSet FOLLOW_WSSEQ_in_bOperation1552                            = new BitSet(new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_LEFT_CURLY_BRACKET_in_extension1577                = new BitSet(new long[] { 0x000000000003D0D0L });
  public static final BitSet FOLLOW_NAME_in_extension1605                              = new BitSet(new long[] { 0x0000000008000000L });
  public static final BitSet FOLLOW_EQUALS_in_extension1607                            = new BitSet(new long[] { 0x000000000003D090L });
  public static final BitSet FOLLOW_WSSEQ_in_extension1609                             = new BitSet(new long[] { 0x000000000003D090L });
  public static final BitSet FOLLOW_property_in_extension1630                          = new BitSet(new long[] { 0x000000002003D0D0L });
  public static final BitSet FOLLOW_WSSEQ_in_extension1645                             = new BitSet(new long[] { 0x0000000020000000L });
  public static final BitSet FOLLOW_RIGHT_CURLY_BRACKET_in_extension1648               = new BitSet(new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_FULL_STOP_in_extension1667                         = new BitSet(new long[] { 0x0000000040000000L });
  public static final BitSet FOLLOW_KEYWORD_CLUSTER_in_extension1669                   = new BitSet(new long[] { 0x0000000000000200L });
  public static final BitSet FOLLOW_LEFT_PARENTHESIS_in_extension1671                  = new BitSet(new long[] { 0x0000000000001090L });
  public static final BitSet FOLLOW_WSSEQ_in_extension1673                             = new BitSet(new long[] { 0x0000000000001090L });
  public static final BitSet FOLLOW_relationshipEnd_in_extension1678                   = new BitSet(new long[] { 0x0000000000000410L });
  public static final BitSet FOLLOW_WSSEQ_in_extension1680                             = new BitSet(new long[] { 0x0000000000000400L });
  public static final BitSet FOLLOW_RIGHT_PARENTHESIS_in_extension1683                 = new BitSet(new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_FULL_STOP_in_extension1703                         = new BitSet(new long[] { 0x0000000080000000L });
  public static final BitSet FOLLOW_KEYWORD_OBJECTIFY_in_extension1705                 = new BitSet(new long[] { 0x0000000000000200L });
  public static final BitSet FOLLOW_LEFT_PARENTHESIS_in_extension1707                  = new BitSet(new long[] { 0x000000000003D090L });
  public static final BitSet FOLLOW_WSSEQ_in_extension1709                             = new BitSet(new long[] { 0x000000000003D090L });
  public static final BitSet FOLLOW_property_in_extension1714                          = new BitSet(new long[] { 0x0000000000000410L });
  public static final BitSet FOLLOW_WSSEQ_in_extension1716                             = new BitSet(new long[] { 0x0000000000000400L });
  public static final BitSet FOLLOW_RIGHT_PARENTHESIS_in_extension1719                 = new BitSet(new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_LEFT_SQUARE_BRACKET_in_extension1742               = new BitSet(new long[] { 0x000000000007D290L });
  public static final BitSet FOLLOW_WSSEQ_in_extension1744                             = new BitSet(new long[] { 0x000000000007D290L });
  public static final BitSet FOLLOW_predicate_in_extension1749                         = new BitSet(new long[] { 0x0000000200000000L });
  public static final BitSet FOLLOW_RIGHT_SQUARE_BRACKET_in_extension1751              = new BitSet(new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_FULL_STOP_in_extension1774                         = new BitSet(new long[] { 0x0000000400000000L });
  public static final BitSet FOLLOW_KEYWORD_EXPAND_in_extension1776                    = new BitSet(new long[] { 0x0000000000000200L });
  public static final BitSet FOLLOW_LEFT_PARENTHESIS_in_extension1778                  = new BitSet(new long[] { 0x0000000000001090L });
  public static final BitSet FOLLOW_WSSEQ_in_extension1780                             = new BitSet(new long[] { 0x0000000000001090L });
  public static final BitSet FOLLOW_relationshipEnd_in_extension1785                   = new BitSet(new long[] { 0x0000000000000410L });
  public static final BitSet FOLLOW_WSSEQ_in_extension1787                             = new BitSet(new long[] { 0x0000000000000400L });
  public static final BitSet FOLLOW_RIGHT_PARENTHESIS_in_extension1790                 = new BitSet(new long[] { 0x0000000000000002L });

}