/*
 * iteraplan is an IT Governance web application developed by iteratec, GmbH
 * Copyright (C) 2004 - 2014 iteratec, GmbH
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License version 3 as published by
 * the Free Software Foundation with the addition of the following permission
 * added to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED
 * WORK IN WHICH THE COPYRIGHT IS OWNED BY ITERATEC, ITERATEC DISCLAIMS THE
 * WARRANTY OF NON INFRINGEMENT  OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, see http://www.gnu.org/licenses or write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301 USA.
 *
 * You can contact iteratec GmbH headquarters at Inselkammerstr. 4
 * 82008 Munich - Unterhaching, Germany, or at email address info@iteratec.de.
 *
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Public License version 3.
 *
 * In accordance with Section 7(b) of the GNU Affero General Public License
 * version 3, these Appropriate Legal Notices must retain the display of the
 * "iteraplan" logo. If the display of the logo is not reasonably
 * feasible for technical reasons, the Appropriate Legal Notices must display
 * the words "Powered by iteraplan".
 */
// $ANTLR 3.3 Nov 30, 2010 12:50:56 /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g 2012-04-10 16:44:37

package de.iteratec.iteraplan.elasticeam.iteraql2;

import org.antlr.runtime.BaseRecognizer;
import org.antlr.runtime.CharStream;
import org.antlr.runtime.DFA;
import org.antlr.runtime.IntStream;
import org.antlr.runtime.Lexer;
import org.antlr.runtime.MismatchedSetException;
import org.antlr.runtime.NoViableAltException;
import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.RecognizerSharedState;


/**
 * Note: This class is code generated by ANTLR. Therefore we ignore all kinds of warnings.
 */
@edu.umd.cs.findbugs.annotations.SuppressWarnings({ "SIC_INNER_SHOULD_BE_STATIC", "SF_SWITCH_NO_DEFAULT" })
@SuppressWarnings({ "PMD", "all" })
public class IteraQl2Lexer extends Lexer {
  public static final int EOF                  = -1;
  public static final int WSSEQ                = 4;
  public static final int SEMICOLON            = 5;
  public static final int NAME                 = 6;
  public static final int FULL_STOP            = 7;
  public static final int KEYWORD_POWER        = 8;
  public static final int LEFT_PARENTHESIS     = 9;
  public static final int RIGHT_PARENTHESIS    = 10;
  public static final int KEYWORD_NULLIFY      = 11;
  public static final int SLASH                = 12;
  public static final int KEYWORD_UNFOLD       = 13;
  public static final int AT_SIGN              = 14;
  public static final int KEYWORD_FOLD_LEVEL   = 15;
  public static final int KEYWORD_COUNT        = 16;
  public static final int KEYWORD_VIEW         = 17;
  public static final int EXCLAMATION_MARK     = 18;
  public static final int AMPERSAND            = 19;
  public static final int VERTICAL_BAR         = 20;
  public static final int KEYWORD_BEGINS_WITH  = 21;
  public static final int KEYWORD_ENDS_WITH    = 22;
  public static final int KEYWORD_CONTAINS     = 23;
  public static final int STRVALUE             = 24;
  public static final int LESS_THAN            = 25;
  public static final int GREATER_THAN         = 26;
  public static final int EQUALS               = 27;
  public static final int LEFT_CURLY_BRACKET   = 28;
  public static final int RIGHT_CURLY_BRACKET  = 29;
  public static final int KEYWORD_CLUSTER      = 30;
  public static final int KEYWORD_OBJECTIFY    = 31;
  public static final int LEFT_SQUARE_BRACKET  = 32;
  public static final int RIGHT_SQUARE_BRACKET = 33;
  public static final int KEYWORD_EXPAND       = 34;
  public static final int SINGLE_QUOTATION     = 35;
  public static final int DOUBLE_QUOTATION     = 36;
  public static final int WHITESPACE_CHAR      = 37;
  public static final int CONTROL_CHAR         = 38;
  public static final int WORD_CHAR            = 39;

  public void displayRecognitionError(String[] tokenNames, RecognitionException ex) {
    //Overrides the standard method, so that recovery does not occur.
    throw new IteraQl2Exception(IteraQl2Exception.PARSER_INVALID_QUERY_STRING, "The entered query is not syntactically correct: "
        + getErrorMessage(ex, tokenNames));
  }

  // delegates
  // delegators

  public IteraQl2Lexer() {
    ;
  }

  public IteraQl2Lexer(CharStream input) {
    this(input, new RecognizerSharedState());
  }

  public IteraQl2Lexer(CharStream input, RecognizerSharedState state) {
    super(input, state);

  }

  public String getGrammarFileName() {
    return "/home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g";
  }

  // $ANTLR start "LEFT_CURLY_BRACKET"
  public final void mLEFT_CURLY_BRACKET() throws RecognitionException {
    try {
      int _type = LEFT_CURLY_BRACKET;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:467:2: ( '\\u007B' )
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:467:4: '\\u007B'
      {
        match('{');

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }

  // $ANTLR end "LEFT_CURLY_BRACKET"

  // $ANTLR start "RIGHT_CURLY_BRACKET"
  public final void mRIGHT_CURLY_BRACKET() throws RecognitionException {
    try {
      int _type = RIGHT_CURLY_BRACKET;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:471:2: ( '\\u007D' )
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:471:4: '\\u007D'
      {
        match('}');

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }

  // $ANTLR end "RIGHT_CURLY_BRACKET"

  // $ANTLR start "SINGLE_QUOTATION"
  public final void mSINGLE_QUOTATION() throws RecognitionException {
    try {
      int _type = SINGLE_QUOTATION;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:475:2: ( '\\u0027' )
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:475:4: '\\u0027'
      {
        match('\'');

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }

  // $ANTLR end "SINGLE_QUOTATION"

  // $ANTLR start "DOUBLE_QUOTATION"
  public final void mDOUBLE_QUOTATION() throws RecognitionException {
    try {
      int _type = DOUBLE_QUOTATION;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:479:2: ( '\\u0022' )
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:479:4: '\\u0022'
      {
        match('\"');

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }

  // $ANTLR end "DOUBLE_QUOTATION"

  // $ANTLR start "LEFT_SQUARE_BRACKET"
  public final void mLEFT_SQUARE_BRACKET() throws RecognitionException {
    try {
      int _type = LEFT_SQUARE_BRACKET;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:483:2: ( '\\u005B' )
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:483:4: '\\u005B'
      {
        match('[');

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }

  // $ANTLR end "LEFT_SQUARE_BRACKET"

  // $ANTLR start "SLASH"
  public final void mSLASH() throws RecognitionException {
    try {
      int _type = SLASH;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:487:2: ( '\\u002F' )
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:487:4: '\\u002F'
      {
        match('/');

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }

  // $ANTLR end "SLASH"

  // $ANTLR start "FULL_STOP"
  public final void mFULL_STOP() throws RecognitionException {
    try {
      int _type = FULL_STOP;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:491:2: ( '\\u002E' )
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:491:4: '\\u002E'
      {
        match('.');

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }

  // $ANTLR end "FULL_STOP"

  // $ANTLR start "LEFT_PARENTHESIS"
  public final void mLEFT_PARENTHESIS() throws RecognitionException {
    try {
      int _type = LEFT_PARENTHESIS;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:495:2: ( '\\u0028' )
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:495:4: '\\u0028'
      {
        match('(');

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }

  // $ANTLR end "LEFT_PARENTHESIS"

  // $ANTLR start "AT_SIGN"
  public final void mAT_SIGN() throws RecognitionException {
    try {
      int _type = AT_SIGN;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:499:2: ( '\\u0040' )
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:499:4: '\\u0040'
      {
        match('@');

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }

  // $ANTLR end "AT_SIGN"

  // $ANTLR start "SEMICOLON"
  public final void mSEMICOLON() throws RecognitionException {
    try {
      int _type = SEMICOLON;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:503:2: ( '\\u003B' )
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:503:4: '\\u003B'
      {
        match(';');

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }

  // $ANTLR end "SEMICOLON"

  // $ANTLR start "RIGHT_PARENTHESIS"
  public final void mRIGHT_PARENTHESIS() throws RecognitionException {
    try {
      int _type = RIGHT_PARENTHESIS;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:507:2: ( '\\u0029' )
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:507:4: '\\u0029'
      {
        match(')');

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }

  // $ANTLR end "RIGHT_PARENTHESIS"

  // $ANTLR start "RIGHT_SQUARE_BRACKET"
  public final void mRIGHT_SQUARE_BRACKET() throws RecognitionException {
    try {
      int _type = RIGHT_SQUARE_BRACKET;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:511:2: ( '\\u005D' )
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:511:4: '\\u005D'
      {
        match(']');

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }

  // $ANTLR end "RIGHT_SQUARE_BRACKET"

  // $ANTLR start "AMPERSAND"
  public final void mAMPERSAND() throws RecognitionException {
    try {
      int _type = AMPERSAND;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:515:2: ( '\\u0026' )
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:515:4: '\\u0026'
      {
        match('&');

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }

  // $ANTLR end "AMPERSAND"

  // $ANTLR start "EXCLAMATION_MARK"
  public final void mEXCLAMATION_MARK() throws RecognitionException {
    try {
      int _type = EXCLAMATION_MARK;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:519:2: ( '\\u0021' )
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:519:4: '\\u0021'
      {
        match('!');

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }

  // $ANTLR end "EXCLAMATION_MARK"

  // $ANTLR start "LESS_THAN"
  public final void mLESS_THAN() throws RecognitionException {
    try {
      int _type = LESS_THAN;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:523:2: ( '\\u003C' )
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:523:4: '\\u003C'
      {
        match('<');

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }

  // $ANTLR end "LESS_THAN"

  // $ANTLR start "EQUALS"
  public final void mEQUALS() throws RecognitionException {
    try {
      int _type = EQUALS;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:527:2: ( '\\u003D' )
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:527:4: '\\u003D'
      {
        match('=');

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }

  // $ANTLR end "EQUALS"

  // $ANTLR start "GREATER_THAN"
  public final void mGREATER_THAN() throws RecognitionException {
    try {
      int _type = GREATER_THAN;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:531:2: ( '\\u003E' )
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:531:4: '\\u003E'
      {
        match('>');

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }

  // $ANTLR end "GREATER_THAN"

  // $ANTLR start "VERTICAL_BAR"
  public final void mVERTICAL_BAR() throws RecognitionException {
    try {
      int _type = VERTICAL_BAR;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:535:2: ( '\\u007C' )
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:535:4: '\\u007C'
      {
        match('|');

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }

  // $ANTLR end "VERTICAL_BAR"

  // $ANTLR start "KEYWORD_EXPAND"
  public final void mKEYWORD_EXPAND() throws RecognitionException {
    try {
      int _type = KEYWORD_EXPAND;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:539:2: ( 'expand' )
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:539:4: 'expand'
      {
        match("expand");

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }

  // $ANTLR end "KEYWORD_EXPAND"

  // $ANTLR start "KEYWORD_POWER"
  public final void mKEYWORD_POWER() throws RecognitionException {
    try {
      int _type = KEYWORD_POWER;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:543:2: ( 'power' )
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:543:4: 'power'
      {
        match("power");

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }

  // $ANTLR end "KEYWORD_POWER"

  // $ANTLR start "KEYWORD_UNFOLD"
  public final void mKEYWORD_UNFOLD() throws RecognitionException {
    try {
      int _type = KEYWORD_UNFOLD;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:547:2: ( 'unfold' )
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:547:4: 'unfold'
      {
        match("unfold");

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }

  // $ANTLR end "KEYWORD_UNFOLD"

  // $ANTLR start "KEYWORD_FOLD_LEVEL"
  public final void mKEYWORD_FOLD_LEVEL() throws RecognitionException {
    try {
      int _type = KEYWORD_FOLD_LEVEL;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:551:2: ( ( WHITESPACE_CHAR )* 'foldLevel' )
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:551:4: ( WHITESPACE_CHAR )* 'foldLevel'
      {
        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:551:4: ( WHITESPACE_CHAR )*
        loop1: do {
          int alt1 = 2;
          int LA1_0 = input.LA(1);

          if (((LA1_0 >= '\t' && LA1_0 <= '\r') || LA1_0 == ' ' || LA1_0 == '\u0085' || LA1_0 == '\u00A0' || LA1_0 == '\u1680' || LA1_0 == '\u180E'
              || (LA1_0 >= '\u2000' && LA1_0 <= '\u200A') || (LA1_0 >= '\u2028' && LA1_0 <= '\u2029') || LA1_0 == '\u202F' || LA1_0 == '\u205F' || LA1_0 == '\u3000')) {
            alt1 = 1;
          }

          switch (alt1) {
            case 1:
              // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:551:5: WHITESPACE_CHAR
            {
              mWHITESPACE_CHAR();

            }
            break;

            default:
              break loop1;
          }
        } while (true);

      match("foldLevel");

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }

  // $ANTLR end "KEYWORD_FOLD_LEVEL"

  // $ANTLR start "KEYWORD_COUNT"
  public final void mKEYWORD_COUNT() throws RecognitionException {
    try {
      int _type = KEYWORD_COUNT;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:555:2: ( ( WHITESPACE_CHAR )* 'count' )
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:555:4: ( WHITESPACE_CHAR )* 'count'
      {
        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:555:4: ( WHITESPACE_CHAR )*
        loop2: do {
          int alt2 = 2;
          int LA2_0 = input.LA(1);

          if (((LA2_0 >= '\t' && LA2_0 <= '\r') || LA2_0 == ' ' || LA2_0 == '\u0085' || LA2_0 == '\u00A0' || LA2_0 == '\u1680' || LA2_0 == '\u180E'
              || (LA2_0 >= '\u2000' && LA2_0 <= '\u200A') || (LA2_0 >= '\u2028' && LA2_0 <= '\u2029') || LA2_0 == '\u202F' || LA2_0 == '\u205F' || LA2_0 == '\u3000')) {
            alt2 = 1;
          }

          switch (alt2) {
            case 1:
              // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:555:5: WHITESPACE_CHAR
            {
              mWHITESPACE_CHAR();

            }
            break;

            default:
              break loop2;
          }
        } while (true);

      match("count");

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }

  // $ANTLR end "KEYWORD_COUNT"

  // $ANTLR start "KEYWORD_VIEW"
  public final void mKEYWORD_VIEW() throws RecognitionException {
    try {
      int _type = KEYWORD_VIEW;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:559:2: ( ( WHITESPACE_CHAR )* 'view' )
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:559:4: ( WHITESPACE_CHAR )* 'view'
      {
        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:559:4: ( WHITESPACE_CHAR )*
        loop3: do {
          int alt3 = 2;
          int LA3_0 = input.LA(1);

          if (((LA3_0 >= '\t' && LA3_0 <= '\r') || LA3_0 == ' ' || LA3_0 == '\u0085' || LA3_0 == '\u00A0' || LA3_0 == '\u1680' || LA3_0 == '\u180E'
              || (LA3_0 >= '\u2000' && LA3_0 <= '\u200A') || (LA3_0 >= '\u2028' && LA3_0 <= '\u2029') || LA3_0 == '\u202F' || LA3_0 == '\u205F' || LA3_0 == '\u3000')) {
            alt3 = 1;
          }

          switch (alt3) {
            case 1:
              // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:559:5: WHITESPACE_CHAR
            {
              mWHITESPACE_CHAR();

            }
            break;

            default:
              break loop3;
          }
        } while (true);

      match("view");

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }

  // $ANTLR end "KEYWORD_VIEW"

  // $ANTLR start "KEYWORD_BEGINS_WITH"
  public final void mKEYWORD_BEGINS_WITH() throws RecognitionException {
    try {
      int _type = KEYWORD_BEGINS_WITH;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:563:2: ( 'beginsWith' )
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:563:4: 'beginsWith'
      {
        match("beginsWith");

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }

  // $ANTLR end "KEYWORD_BEGINS_WITH"

  // $ANTLR start "KEYWORD_ENDS_WITH"
  public final void mKEYWORD_ENDS_WITH() throws RecognitionException {
    try {
      int _type = KEYWORD_ENDS_WITH;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:567:2: ( 'endsWith' )
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:567:4: 'endsWith'
      {
        match("endsWith");

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }

  // $ANTLR end "KEYWORD_ENDS_WITH"

  // $ANTLR start "KEYWORD_CONTAINS"
  public final void mKEYWORD_CONTAINS() throws RecognitionException {
    try {
      int _type = KEYWORD_CONTAINS;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:571:2: ( 'contains' )
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:571:4: 'contains'
      {
        match("contains");

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }

  // $ANTLR end "KEYWORD_CONTAINS"

  // $ANTLR start "KEYWORD_CLUSTER"
  public final void mKEYWORD_CLUSTER() throws RecognitionException {
    try {
      int _type = KEYWORD_CLUSTER;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:575:2: ( 'cluster' )
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:575:4: 'cluster'
      {
        match("cluster");

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }

  // $ANTLR end "KEYWORD_CLUSTER"

  // $ANTLR start "KEYWORD_NULLIFY"
  public final void mKEYWORD_NULLIFY() throws RecognitionException {
    try {
      int _type = KEYWORD_NULLIFY;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:579:2: ( 'nullify' )
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:579:4: 'nullify'
      {
        match("nullify");

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }

  // $ANTLR end "KEYWORD_NULLIFY"

  // $ANTLR start "KEYWORD_OBJECTIFY"
  public final void mKEYWORD_OBJECTIFY() throws RecognitionException {
    try {
      int _type = KEYWORD_OBJECTIFY;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:583:2: ( 'objectify' )
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:583:4: 'objectify'
      {
        match("objectify");

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }

  // $ANTLR end "KEYWORD_OBJECTIFY"

  // $ANTLR start "WHITESPACE_CHAR"
  public final void mWHITESPACE_CHAR() throws RecognitionException {
    try {
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:588:2: ( '\\u0009' | '\
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:
      {
        if ((input.LA(1) >= '\t' && input.LA(1) <= '\r') || input.LA(1) == ' ' || input.LA(1) == '\u0085' || input.LA(1) == '\u00A0'
            || input.LA(1) == '\u1680' || input.LA(1) == '\u180E' || (input.LA(1) >= '\u2000' && input.LA(1) <= '\u200A')
            || (input.LA(1) >= '\u2028' && input.LA(1) <= '\u2029') || input.LA(1) == '\u202F' || input.LA(1) == '\u205F' || input.LA(1) == '\u3000') {
          input.consume();

        }
        else {
          MismatchedSetException mse = new MismatchedSetException(null, input);
          recover(mse);
          throw mse;
        }

      }

    } finally {
    }
  }

  // $ANTLR end "WHITESPACE_CHAR"

  // $ANTLR start "CONTROL_CHAR"
  public final void mCONTROL_CHAR() throws RecognitionException {
    try {
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:605:2: ( LEFT_SQUARE_BRACKET | SLASH | FULL_STOP | LEFT_PARENTHESIS | AT_SIGN | SINGLE_QUOTATION | DOUBLE_QUOTATION | SEMICOLON | RIGHT_PARENTHESIS | RIGHT_SQUARE_BRACKET | AMPERSAND | EXCLAMATION_MARK | LESS_THAN | EQUALS | GREATER_THAN | VERTICAL_BAR | LEFT_CURLY_BRACKET | RIGHT_CURLY_BRACKET )
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:
      {
        if ((input.LA(1) >= '!' && input.LA(1) <= '\"') || (input.LA(1) >= '&' && input.LA(1) <= ')') || (input.LA(1) >= '.' && input.LA(1) <= '/')
            || (input.LA(1) >= ';' && input.LA(1) <= '>') || input.LA(1) == '@' || input.LA(1) == '[' || input.LA(1) == ']'
            || (input.LA(1) >= '{' && input.LA(1) <= '}')) {
          input.consume();

        }
        else {
          MismatchedSetException mse = new MismatchedSetException(null, input);
          recover(mse);
          throw mse;
        }

      }

    } finally {
    }
  }

  // $ANTLR end "CONTROL_CHAR"

  // $ANTLR start "WORD_CHAR"
  public final void mWORD_CHAR() throws RecognitionException {
    try {
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:626:2: (~ ( WHITESPACE_CHAR | CONTROL_CHAR ) )
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:626:4: ~ ( WHITESPACE_CHAR | CONTROL_CHAR )
      {
        if ((input.LA(1) >= '\u0000' && input.LA(1) <= '\b') || (input.LA(1) >= '\u000E' && input.LA(1) <= '\u001F')
            || (input.LA(1) >= '#' && input.LA(1) <= '%') || (input.LA(1) >= '*' && input.LA(1) <= '-') || (input.LA(1) >= '0' && input.LA(1) <= ':')
            || input.LA(1) == '?' || (input.LA(1) >= 'A' && input.LA(1) <= 'Z') || input.LA(1) == '\\' || (input.LA(1) >= '^' && input.LA(1) <= 'z')
            || (input.LA(1) >= '~' && input.LA(1) <= '\u0084') || (input.LA(1) >= '\u0086' && input.LA(1) <= '\u009F')
            || (input.LA(1) >= '\u00A1' && input.LA(1) <= '\u167F') || (input.LA(1) >= '\u1681' && input.LA(1) <= '\u180D')
            || (input.LA(1) >= '\u180F' && input.LA(1) <= '\u1FFF') || (input.LA(1) >= '\u200B' && input.LA(1) <= '\u2027')
            || (input.LA(1) >= '\u202A' && input.LA(1) <= '\u202E') || (input.LA(1) >= '\u2030' && input.LA(1) <= '\u205E')
            || (input.LA(1) >= '\u2060' && input.LA(1) <= '\u2FFF') || (input.LA(1) >= '\u3001' && input.LA(1) <= '\uFFFF')) {
          input.consume();

        }
        else {
          MismatchedSetException mse = new MismatchedSetException(null, input);
          recover(mse);
          throw mse;
        }

      }

    } finally {
    }
  }

  // $ANTLR end "WORD_CHAR"

  // $ANTLR start "NAME"
  public final void mNAME() throws RecognitionException {
    try {
      int _type = NAME;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:630:2: ( ( WHITESPACE_CHAR )* ( ( WORD_CHAR ( WORD_CHAR | WHITESPACE_CHAR )* WORD_CHAR ) | WORD_CHAR ) ( WHITESPACE_CHAR )* )
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:630:4: ( WHITESPACE_CHAR )* ( ( WORD_CHAR ( WORD_CHAR | WHITESPACE_CHAR )* WORD_CHAR ) | WORD_CHAR ) ( WHITESPACE_CHAR )*
      {
        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:630:4: ( WHITESPACE_CHAR )*
        loop4: do {
          int alt4 = 2;
          int LA4_0 = input.LA(1);

          if (((LA4_0 >= '\t' && LA4_0 <= '\r') || LA4_0 == ' ' || LA4_0 == '\u0085' || LA4_0 == '\u00A0' || LA4_0 == '\u1680' || LA4_0 == '\u180E'
              || (LA4_0 >= '\u2000' && LA4_0 <= '\u200A') || (LA4_0 >= '\u2028' && LA4_0 <= '\u2029') || LA4_0 == '\u202F' || LA4_0 == '\u205F' || LA4_0 == '\u3000')) {
            alt4 = 1;
          }

          switch (alt4) {
            case 1:
              // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:630:4: WHITESPACE_CHAR
            {
              mWHITESPACE_CHAR();

            }
            break;

            default:
              break loop4;
          }
        } while (true);

      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:630:21: ( ( WORD_CHAR ( WORD_CHAR | WHITESPACE_CHAR )* WORD_CHAR ) | WORD_CHAR )
      int alt6 = 2;
      alt6 = dfa6.predict(input);
      switch (alt6) {
        case 1:
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:630:22: ( WORD_CHAR ( WORD_CHAR | WHITESPACE_CHAR )* WORD_CHAR )
        {
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:630:22: ( WORD_CHAR ( WORD_CHAR | WHITESPACE_CHAR )* WORD_CHAR )
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:630:23: WORD_CHAR ( WORD_CHAR | WHITESPACE_CHAR )* WORD_CHAR
          {
            mWORD_CHAR();
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:630:33: ( WORD_CHAR | WHITESPACE_CHAR )*
            loop5: do {
              int alt5 = 2;
              alt5 = dfa5.predict(input);
              switch (alt5) {
                case 1:
                  // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:
                {
                  if ((input.LA(1) >= '\u0000' && input.LA(1) <= ' ') || (input.LA(1) >= '#' && input.LA(1) <= '%')
                      || (input.LA(1) >= '*' && input.LA(1) <= '-') || (input.LA(1) >= '0' && input.LA(1) <= ':') || input.LA(1) == '?'
                      || (input.LA(1) >= 'A' && input.LA(1) <= 'Z') || input.LA(1) == '\\' || (input.LA(1) >= '^' && input.LA(1) <= 'z')
                      || (input.LA(1) >= '~' && input.LA(1) <= '\uFFFF')) {
                    input.consume();

                  }
                  else {
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    recover(mse);
                    throw mse;
                  }

                }
                break;

                default:
                  break loop5;
              }
            } while (true);

            mWORD_CHAR();

          }

        }
        break;
        case 2:
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:630:77: WORD_CHAR
        {
          mWORD_CHAR();

        }
        break;

      }

      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:630:88: ( WHITESPACE_CHAR )*
      loop7: do {
        int alt7 = 2;
        int LA7_0 = input.LA(1);

        if (((LA7_0 >= '\t' && LA7_0 <= '\r') || LA7_0 == ' ' || LA7_0 == '\u0085' || LA7_0 == '\u00A0' || LA7_0 == '\u1680' || LA7_0 == '\u180E'
            || (LA7_0 >= '\u2000' && LA7_0 <= '\u200A') || (LA7_0 >= '\u2028' && LA7_0 <= '\u2029') || LA7_0 == '\u202F' || LA7_0 == '\u205F' || LA7_0 == '\u3000')) {
          alt7 = 1;
        }

        switch (alt7) {
          case 1:
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:630:88: WHITESPACE_CHAR
          {
            mWHITESPACE_CHAR();

          }
          break;

          default:
            break loop7;
        }
      } while (true);

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }

  // $ANTLR end "NAME"

  // $ANTLR start "STRVALUE"
  public final void mSTRVALUE() throws RecognitionException {
    try {
      int _type = STRVALUE;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:635:2: ( ( WHITESPACE_CHAR )* ( ( DOUBLE_QUOTATION (~ ( DOUBLE_QUOTATION | '\\\\' ) )* DOUBLE_QUOTATION ) | ( SINGLE_QUOTATION (~ ( SINGLE_QUOTATION | '\\\\' ) )* SINGLE_QUOTATION ) ) ( WHITESPACE_CHAR )* )
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:635:4: ( WHITESPACE_CHAR )* ( ( DOUBLE_QUOTATION (~ ( DOUBLE_QUOTATION | '\\\\' ) )* DOUBLE_QUOTATION ) | ( SINGLE_QUOTATION (~ ( SINGLE_QUOTATION | '\\\\' ) )* SINGLE_QUOTATION ) ) ( WHITESPACE_CHAR )*
      {
        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:635:4: ( WHITESPACE_CHAR )*
        loop8: do {
          int alt8 = 2;
          int LA8_0 = input.LA(1);

          if (((LA8_0 >= '\t' && LA8_0 <= '\r') || LA8_0 == ' ' || LA8_0 == '\u0085' || LA8_0 == '\u00A0' || LA8_0 == '\u1680' || LA8_0 == '\u180E'
              || (LA8_0 >= '\u2000' && LA8_0 <= '\u200A') || (LA8_0 >= '\u2028' && LA8_0 <= '\u2029') || LA8_0 == '\u202F' || LA8_0 == '\u205F' || LA8_0 == '\u3000')) {
            alt8 = 1;
          }

          switch (alt8) {
            case 1:
              // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:635:4: WHITESPACE_CHAR
            {
              mWHITESPACE_CHAR();

            }
            break;

            default:
              break loop8;
          }
        } while (true);

      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:635:21: ( ( DOUBLE_QUOTATION (~ ( DOUBLE_QUOTATION | '\\\\' ) )* DOUBLE_QUOTATION ) | ( SINGLE_QUOTATION (~ ( SINGLE_QUOTATION | '\\\\' ) )* SINGLE_QUOTATION ) )
      int alt11 = 2;
      int LA11_0 = input.LA(1);

      if ((LA11_0 == '\"')) {
        alt11 = 1;
      }
      else if ((LA11_0 == '\'')) {
        alt11 = 2;
      }
      else {
        NoViableAltException nvae = new NoViableAltException("", 11, 0, input);

        throw nvae;
      }
      switch (alt11) {
        case 1:
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:635:22: ( DOUBLE_QUOTATION (~ ( DOUBLE_QUOTATION | '\\\\' ) )* DOUBLE_QUOTATION )
        {
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:635:22: ( DOUBLE_QUOTATION (~ ( DOUBLE_QUOTATION | '\\\\' ) )* DOUBLE_QUOTATION )
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:635:23: DOUBLE_QUOTATION (~ ( DOUBLE_QUOTATION | '\\\\' ) )* DOUBLE_QUOTATION
          {
            mDOUBLE_QUOTATION();
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:635:40: (~ ( DOUBLE_QUOTATION | '\\\\' ) )*
            loop9: do {
              int alt9 = 2;
              int LA9_0 = input.LA(1);

              if (((LA9_0 >= '\u0000' && LA9_0 <= '!') || (LA9_0 >= '#' && LA9_0 <= '[') || (LA9_0 >= ']' && LA9_0 <= '\uFFFF'))) {
                alt9 = 1;
              }

              switch (alt9) {
                case 1:
                  // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:635:41: ~ ( DOUBLE_QUOTATION | '\\\\' )
                {
                  if ((input.LA(1) >= '\u0000' && input.LA(1) <= '!') || (input.LA(1) >= '#' && input.LA(1) <= '[')
                      || (input.LA(1) >= ']' && input.LA(1) <= '\uFFFF')) {
                    input.consume();

                  }
                  else {
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    recover(mse);
                    throw mse;
                  }

                }
                break;

                default:
                  break loop9;
              }
            } while (true);

            mDOUBLE_QUOTATION();

          }

        }
        break;
        case 2:
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:635:88: ( SINGLE_QUOTATION (~ ( SINGLE_QUOTATION | '\\\\' ) )* SINGLE_QUOTATION )
        {
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:635:88: ( SINGLE_QUOTATION (~ ( SINGLE_QUOTATION | '\\\\' ) )* SINGLE_QUOTATION )
          // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:635:89: SINGLE_QUOTATION (~ ( SINGLE_QUOTATION | '\\\\' ) )* SINGLE_QUOTATION
          {
            mSINGLE_QUOTATION();
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:635:106: (~ ( SINGLE_QUOTATION | '\\\\' ) )*
            loop10: do {
              int alt10 = 2;
              int LA10_0 = input.LA(1);

              if (((LA10_0 >= '\u0000' && LA10_0 <= '&') || (LA10_0 >= '(' && LA10_0 <= '[') || (LA10_0 >= ']' && LA10_0 <= '\uFFFF'))) {
                alt10 = 1;
              }

              switch (alt10) {
                case 1:
                  // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:635:107: ~ ( SINGLE_QUOTATION | '\\\\' )
                {
                  if ((input.LA(1) >= '\u0000' && input.LA(1) <= '&') || (input.LA(1) >= '(' && input.LA(1) <= '[')
                      || (input.LA(1) >= ']' && input.LA(1) <= '\uFFFF')) {
                    input.consume();

                  }
                  else {
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    recover(mse);
                    throw mse;
                  }

                }
                break;

                default:
                  break loop10;
              }
            } while (true);

            mSINGLE_QUOTATION();

          }

        }
        break;

      }

      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:635:153: ( WHITESPACE_CHAR )*
      loop12: do {
        int alt12 = 2;
        int LA12_0 = input.LA(1);

        if (((LA12_0 >= '\t' && LA12_0 <= '\r') || LA12_0 == ' ' || LA12_0 == '\u0085' || LA12_0 == '\u00A0' || LA12_0 == '\u1680'
            || LA12_0 == '\u180E' || (LA12_0 >= '\u2000' && LA12_0 <= '\u200A') || (LA12_0 >= '\u2028' && LA12_0 <= '\u2029') || LA12_0 == '\u202F'
            || LA12_0 == '\u205F' || LA12_0 == '\u3000')) {
          alt12 = 1;
        }

        switch (alt12) {
          case 1:
            // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:635:153: WHITESPACE_CHAR
          {
            mWHITESPACE_CHAR();

          }
          break;

          default:
            break loop12;
        }
      } while (true);

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }

  // $ANTLR end "STRVALUE"

  // $ANTLR start "WSSEQ"
  public final void mWSSEQ() throws RecognitionException {
    try {
      int _type = WSSEQ;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:640:2: ( ( WHITESPACE_CHAR )* )
      // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:640:4: ( WHITESPACE_CHAR )*
      {
        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:640:4: ( WHITESPACE_CHAR )*
        loop13: do {
          int alt13 = 2;
          int LA13_0 = input.LA(1);

          if (((LA13_0 >= '\t' && LA13_0 <= '\r') || LA13_0 == ' ' || LA13_0 == '\u0085' || LA13_0 == '\u00A0' || LA13_0 == '\u1680'
              || LA13_0 == '\u180E' || (LA13_0 >= '\u2000' && LA13_0 <= '\u200A') || (LA13_0 >= '\u2028' && LA13_0 <= '\u2029') || LA13_0 == '\u202F'
              || LA13_0 == '\u205F' || LA13_0 == '\u3000')) {
            alt13 = 1;
          }

          switch (alt13) {
            case 1:
              // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:640:5: WHITESPACE_CHAR
            {
              mWHITESPACE_CHAR();

            }
            break;

            default:
              break loop13;
          }
        } while (true);

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }

  // $ANTLR end "WSSEQ"

  public void mTokens() throws RecognitionException {
    // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:1:8: ( LEFT_CURLY_BRACKET | RIGHT_CURLY_BRACKET | SINGLE_QUOTATION | DOUBLE_QUOTATION | LEFT_SQUARE_BRACKET | SLASH | FULL_STOP | LEFT_PARENTHESIS | AT_SIGN | SEMICOLON | RIGHT_PARENTHESIS | RIGHT_SQUARE_BRACKET | AMPERSAND | EXCLAMATION_MARK | LESS_THAN | EQUALS | GREATER_THAN | VERTICAL_BAR | KEYWORD_EXPAND | KEYWORD_POWER | KEYWORD_UNFOLD | KEYWORD_FOLD_LEVEL | KEYWORD_COUNT | KEYWORD_VIEW | KEYWORD_BEGINS_WITH | KEYWORD_ENDS_WITH | KEYWORD_CONTAINS | KEYWORD_CLUSTER | KEYWORD_NULLIFY | KEYWORD_OBJECTIFY | NAME | STRVALUE | WSSEQ )
    int alt14 = 33;
    alt14 = dfa14.predict(input);
    switch (alt14) {
      case 1:
        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:1:10: LEFT_CURLY_BRACKET
      {
        mLEFT_CURLY_BRACKET();

      }
      break;
      case 2:
        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:1:29: RIGHT_CURLY_BRACKET
      {
        mRIGHT_CURLY_BRACKET();

      }
      break;
      case 3:
        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:1:49: SINGLE_QUOTATION
      {
        mSINGLE_QUOTATION();

      }
      break;
      case 4:
        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:1:66: DOUBLE_QUOTATION
      {
        mDOUBLE_QUOTATION();

      }
      break;
      case 5:
        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:1:83: LEFT_SQUARE_BRACKET
      {
        mLEFT_SQUARE_BRACKET();

      }
      break;
      case 6:
        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:1:103: SLASH
      {
        mSLASH();

      }
      break;
      case 7:
        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:1:109: FULL_STOP
      {
        mFULL_STOP();

      }
      break;
      case 8:
        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:1:119: LEFT_PARENTHESIS
      {
        mLEFT_PARENTHESIS();

      }
      break;
      case 9:
        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:1:136: AT_SIGN
      {
        mAT_SIGN();

      }
      break;
      case 10:
        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:1:144: SEMICOLON
      {
        mSEMICOLON();

      }
      break;
      case 11:
        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:1:154: RIGHT_PARENTHESIS
      {
        mRIGHT_PARENTHESIS();

      }
      break;
      case 12:
        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:1:172: RIGHT_SQUARE_BRACKET
      {
        mRIGHT_SQUARE_BRACKET();

      }
      break;
      case 13:
        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:1:193: AMPERSAND
      {
        mAMPERSAND();

      }
      break;
      case 14:
        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:1:203: EXCLAMATION_MARK
      {
        mEXCLAMATION_MARK();

      }
      break;
      case 15:
        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:1:220: LESS_THAN
      {
        mLESS_THAN();

      }
      break;
      case 16:
        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:1:230: EQUALS
      {
        mEQUALS();

      }
      break;
      case 17:
        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:1:237: GREATER_THAN
      {
        mGREATER_THAN();

      }
      break;
      case 18:
        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:1:250: VERTICAL_BAR
      {
        mVERTICAL_BAR();

      }
      break;
      case 19:
        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:1:263: KEYWORD_EXPAND
      {
        mKEYWORD_EXPAND();

      }
      break;
      case 20:
        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:1:278: KEYWORD_POWER
      {
        mKEYWORD_POWER();

      }
      break;
      case 21:
        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:1:292: KEYWORD_UNFOLD
      {
        mKEYWORD_UNFOLD();

      }
      break;
      case 22:
        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:1:307: KEYWORD_FOLD_LEVEL
      {
        mKEYWORD_FOLD_LEVEL();

      }
      break;
      case 23:
        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:1:326: KEYWORD_COUNT
      {
        mKEYWORD_COUNT();

      }
      break;
      case 24:
        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:1:340: KEYWORD_VIEW
      {
        mKEYWORD_VIEW();

      }
      break;
      case 25:
        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:1:353: KEYWORD_BEGINS_WITH
      {
        mKEYWORD_BEGINS_WITH();

      }
      break;
      case 26:
        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:1:373: KEYWORD_ENDS_WITH
      {
        mKEYWORD_ENDS_WITH();

      }
      break;
      case 27:
        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:1:391: KEYWORD_CONTAINS
      {
        mKEYWORD_CONTAINS();

      }
      break;
      case 28:
        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:1:408: KEYWORD_CLUSTER
      {
        mKEYWORD_CLUSTER();

      }
      break;
      case 29:
        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:1:424: KEYWORD_NULLIFY
      {
        mKEYWORD_NULLIFY();

      }
      break;
      case 30:
        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:1:440: KEYWORD_OBJECTIFY
      {
        mKEYWORD_OBJECTIFY();

      }
      break;
      case 31:
        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:1:458: NAME
      {
        mNAME();

      }
      break;
      case 32:
        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:1:463: STRVALUE
      {
        mSTRVALUE();

      }
      break;
      case 33:
        // /home/kgo/Dev/workspace_3.6/ANTLR/src/de/iteratec/iteraplan/elasticeam/iteraql2/IteraQl2.g:1:472: WSSEQ
      {
        mWSSEQ();

      }
      break;

    }

  }

  protected DFA6         dfa6             = new DFA6(this);
  protected DFA5         dfa5             = new DFA5(this);
  protected DFA14        dfa14            = new DFA14(this);
  static final String    DFA6_eotS        = "\1\uffff\1\2\2\uffff\1\2";
  static final String    DFA6_eofS        = "\5\uffff";
  static final String    DFA6_minS        = "\2\0\2\uffff\1\0";
  static final String    DFA6_maxS        = "\2\uffff\2\uffff\1\uffff";
  static final String    DFA6_acceptS     = "\2\uffff\1\2\1\1\1\uffff";
  static final String    DFA6_specialS    = "\1\2\1\1\2\uffff\1\0}>";
  static final String[]  DFA6_transitionS = {
    "\11\1\5\uffff\22\1\3\uffff\3\1\4\uffff\4\1\2\uffff\13\1\4\uffff" + "\1\1\1\uffff\32\1\1\uffff\1\1\1\uffff\35\1\3\uffff\7\1\1\uffff"
        + "\32\1\1\uffff\u15df\1\1\uffff\u018d\1\1\uffff\u07f1\1\13\uffff" + "\35\1\2\uffff\5\1\1\uffff\57\1\1\uffff\u0fa0\1\1\uffff\ucfff" + "\1",
        "\11\3\5\4\22\3\1\4\2\uffff\3\3\4\uffff\4\3\2\uffff\13\3\4\uffff" + "\1\3\1\uffff\32\3\1\uffff\1\3\1\uffff\35\3\3\uffff\7\3\1\4\32"
            + "\3\1\4\u15df\3\1\4\u018d\3\1\4\u07f1\3\13\4\35\3\2\4\5\3\1\4" + "\57\3\1\4\u0fa0\3\1\4\ucfff\3",
            "",
            "",
            "\11\3\5\4\22\3\1\4\2\uffff\3\3\4\uffff\4\3\2\uffff\13\3\4\uffff" + "\1\3\1\uffff\32\3\1\uffff\1\3\1\uffff\35\3\3\uffff\7\3\1\4\32"
                + "\3\1\4\u15df\3\1\4\u018d\3\1\4\u07f1\3\13\4\35\3\2\4\5\3\1\4" + "\57\3\1\4\u0fa0\3\1\4\ucfff\3" };

  static final short[]   DFA6_eot         = DFA.unpackEncodedString(DFA6_eotS);
  static final short[]   DFA6_eof         = DFA.unpackEncodedString(DFA6_eofS);
  static final char[]    DFA6_min         = DFA.unpackEncodedStringToUnsignedChars(DFA6_minS);
  static final char[]    DFA6_max         = DFA.unpackEncodedStringToUnsignedChars(DFA6_maxS);
  static final short[]   DFA6_accept      = DFA.unpackEncodedString(DFA6_acceptS);
  static final short[]   DFA6_special     = DFA.unpackEncodedString(DFA6_specialS);
  static final short[][] DFA6_transition;

  static {
    int numStates = DFA6_transitionS.length;
    DFA6_transition = new short[numStates][];
    for (int i = 0; i < numStates; i++) {
      DFA6_transition[i] = DFA.unpackEncodedString(DFA6_transitionS[i]);
    }
  }

  class DFA6 extends DFA {

    public DFA6(BaseRecognizer recognizer) {
      this.recognizer = recognizer;
      this.decisionNumber = 6;
      this.eot = DFA6_eot;
      this.eof = DFA6_eof;
      this.min = DFA6_min;
      this.max = DFA6_max;
      this.accept = DFA6_accept;
      this.special = DFA6_special;
      this.transition = DFA6_transition;
    }

    public String getDescription() {
      return "630:21: ( ( WORD_CHAR ( WORD_CHAR | WHITESPACE_CHAR )* WORD_CHAR ) | WORD_CHAR )";
    }

    public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
      IntStream input = _input;
      int _s = s;
      switch (s) {
        case 0:
          int LA6_4 = input.LA(1);

          s = -1;
          if (((LA6_4 >= '\u0000' && LA6_4 <= '\b') || (LA6_4 >= '\u000E' && LA6_4 <= '\u001F') || (LA6_4 >= '#' && LA6_4 <= '%')
              || (LA6_4 >= '*' && LA6_4 <= '-') || (LA6_4 >= '0' && LA6_4 <= ':') || LA6_4 == '?' || (LA6_4 >= 'A' && LA6_4 <= 'Z') || LA6_4 == '\\'
              || (LA6_4 >= '^' && LA6_4 <= 'z') || (LA6_4 >= '~' && LA6_4 <= '\u0084') || (LA6_4 >= '\u0086' && LA6_4 <= '\u009F')
              || (LA6_4 >= '\u00A1' && LA6_4 <= '\u167F') || (LA6_4 >= '\u1681' && LA6_4 <= '\u180D') || (LA6_4 >= '\u180F' && LA6_4 <= '\u1FFF')
              || (LA6_4 >= '\u200B' && LA6_4 <= '\u2027') || (LA6_4 >= '\u202A' && LA6_4 <= '\u202E') || (LA6_4 >= '\u2030' && LA6_4 <= '\u205E')
              || (LA6_4 >= '\u2060' && LA6_4 <= '\u2FFF') || (LA6_4 >= '\u3001' && LA6_4 <= '\uFFFF'))) {
            s = 3;
          }

          else if (((LA6_4 >= '\t' && LA6_4 <= '\r') || LA6_4 == ' ' || LA6_4 == '\u0085' || LA6_4 == '\u00A0' || LA6_4 == '\u1680'
              || LA6_4 == '\u180E' || (LA6_4 >= '\u2000' && LA6_4 <= '\u200A') || (LA6_4 >= '\u2028' && LA6_4 <= '\u2029') || LA6_4 == '\u202F'
              || LA6_4 == '\u205F' || LA6_4 == '\u3000')) {
            s = 4;
          }
          else {
            s = 2;
          }

          if (s >= 0) {
            return s;
          }
          break;
        case 1:
          int LA6_1 = input.LA(1);

          s = -1;
          if (((LA6_1 >= '\u0000' && LA6_1 <= '\b') || (LA6_1 >= '\u000E' && LA6_1 <= '\u001F') || (LA6_1 >= '#' && LA6_1 <= '%')
              || (LA6_1 >= '*' && LA6_1 <= '-') || (LA6_1 >= '0' && LA6_1 <= ':') || LA6_1 == '?' || (LA6_1 >= 'A' && LA6_1 <= 'Z') || LA6_1 == '\\'
              || (LA6_1 >= '^' && LA6_1 <= 'z') || (LA6_1 >= '~' && LA6_1 <= '\u0084') || (LA6_1 >= '\u0086' && LA6_1 <= '\u009F')
              || (LA6_1 >= '\u00A1' && LA6_1 <= '\u167F') || (LA6_1 >= '\u1681' && LA6_1 <= '\u180D') || (LA6_1 >= '\u180F' && LA6_1 <= '\u1FFF')
              || (LA6_1 >= '\u200B' && LA6_1 <= '\u2027') || (LA6_1 >= '\u202A' && LA6_1 <= '\u202E') || (LA6_1 >= '\u2030' && LA6_1 <= '\u205E')
              || (LA6_1 >= '\u2060' && LA6_1 <= '\u2FFF') || (LA6_1 >= '\u3001' && LA6_1 <= '\uFFFF'))) {
            s = 3;
          }

          else if (((LA6_1 >= '\t' && LA6_1 <= '\r') || LA6_1 == ' ' || LA6_1 == '\u0085' || LA6_1 == '\u00A0' || LA6_1 == '\u1680'
              || LA6_1 == '\u180E' || (LA6_1 >= '\u2000' && LA6_1 <= '\u200A') || (LA6_1 >= '\u2028' && LA6_1 <= '\u2029') || LA6_1 == '\u202F'
              || LA6_1 == '\u205F' || LA6_1 == '\u3000')) {
            s = 4;
          }
          else {
            s = 2;
          }

          if (s >= 0) {
            return s;
          }
          break;
        case 2:
          int LA6_0 = input.LA(1);

          s = -1;
          if (((LA6_0 >= '\u0000' && LA6_0 <= '\b') || (LA6_0 >= '\u000E' && LA6_0 <= '\u001F') || (LA6_0 >= '#' && LA6_0 <= '%')
              || (LA6_0 >= '*' && LA6_0 <= '-') || (LA6_0 >= '0' && LA6_0 <= ':') || LA6_0 == '?' || (LA6_0 >= 'A' && LA6_0 <= 'Z') || LA6_0 == '\\'
              || (LA6_0 >= '^' && LA6_0 <= 'z') || (LA6_0 >= '~' && LA6_0 <= '\u0084') || (LA6_0 >= '\u0086' && LA6_0 <= '\u009F')
              || (LA6_0 >= '\u00A1' && LA6_0 <= '\u167F') || (LA6_0 >= '\u1681' && LA6_0 <= '\u180D') || (LA6_0 >= '\u180F' && LA6_0 <= '\u1FFF')
              || (LA6_0 >= '\u200B' && LA6_0 <= '\u2027') || (LA6_0 >= '\u202A' && LA6_0 <= '\u202E') || (LA6_0 >= '\u2030' && LA6_0 <= '\u205E')
              || (LA6_0 >= '\u2060' && LA6_0 <= '\u2FFF') || (LA6_0 >= '\u3001' && LA6_0 <= '\uFFFF'))) {
            s = 1;
          }

          if (s >= 0) {
            return s;
          }
          break;
      }
      NoViableAltException nvae = new NoViableAltException(getDescription(), 6, _s, input);
      error(nvae);
      throw nvae;
    }
  }

  static final String    DFA5_eotS        = "\1\uffff\1\3\2\uffff\1\3";
  static final String    DFA5_eofS        = "\5\uffff";
  static final String    DFA5_minS        = "\2\0\2\uffff\1\0";
  static final String    DFA5_maxS        = "\2\uffff\2\uffff\1\uffff";
  static final String    DFA5_acceptS     = "\2\uffff\1\1\1\2\1\uffff";
  static final String    DFA5_specialS    = "\1\1\1\0\2\uffff\1\2}>";
  static final String[]  DFA5_transitionS = {
    "\11\1\5\2\22\1\1\2\2\uffff\3\1\4\uffff\4\1\2\uffff\13\1\4\uffff" + "\1\1\1\uffff\32\1\1\uffff\1\1\1\uffff\35\1\3\uffff\7\1\1\2\32"
        + "\1\1\2\u15df\1\1\2\u018d\1\1\2\u07f1\1\13\2\35\1\2\2\5\1\1\2" + "\57\1\1\2\u0fa0\1\1\2\ucfff\1",
        "\11\2\5\4\22\2\1\4\2\uffff\3\2\4\uffff\4\2\2\uffff\13\2\4\uffff" + "\1\2\1\uffff\32\2\1\uffff\1\2\1\uffff\35\2\3\uffff\7\2\1\4\32"
            + "\2\1\4\u15df\2\1\4\u018d\2\1\4\u07f1\2\13\4\35\2\2\4\5\2\1\4" + "\57\2\1\4\u0fa0\2\1\4\ucfff\2",
            "",
            "",
            "\11\2\5\4\22\2\1\4\2\uffff\3\2\4\uffff\4\2\2\uffff\13\2\4\uffff" + "\1\2\1\uffff\32\2\1\uffff\1\2\1\uffff\35\2\3\uffff\7\2\1\4\32"
                + "\2\1\4\u15df\2\1\4\u018d\2\1\4\u07f1\2\13\4\35\2\2\4\5\2\1\4" + "\57\2\1\4\u0fa0\2\1\4\ucfff\2" };

  static final short[]   DFA5_eot         = DFA.unpackEncodedString(DFA5_eotS);
  static final short[]   DFA5_eof         = DFA.unpackEncodedString(DFA5_eofS);
  static final char[]    DFA5_min         = DFA.unpackEncodedStringToUnsignedChars(DFA5_minS);
  static final char[]    DFA5_max         = DFA.unpackEncodedStringToUnsignedChars(DFA5_maxS);
  static final short[]   DFA5_accept      = DFA.unpackEncodedString(DFA5_acceptS);
  static final short[]   DFA5_special     = DFA.unpackEncodedString(DFA5_specialS);
  static final short[][] DFA5_transition;

  static {
    int numStates = DFA5_transitionS.length;
    DFA5_transition = new short[numStates][];
    for (int i = 0; i < numStates; i++) {
      DFA5_transition[i] = DFA.unpackEncodedString(DFA5_transitionS[i]);
    }
  }

  class DFA5 extends DFA {

    public DFA5(BaseRecognizer recognizer) {
      this.recognizer = recognizer;
      this.decisionNumber = 5;
      this.eot = DFA5_eot;
      this.eof = DFA5_eof;
      this.min = DFA5_min;
      this.max = DFA5_max;
      this.accept = DFA5_accept;
      this.special = DFA5_special;
      this.transition = DFA5_transition;
    }

    public String getDescription() {
      return "()* loopback of 630:33: ( WORD_CHAR | WHITESPACE_CHAR )*";
    }

    public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
      IntStream input = _input;
      int _s = s;
      switch (s) {
        case 0:
          int LA5_1 = input.LA(1);

          s = -1;
          if (((LA5_1 >= '\t' && LA5_1 <= '\r') || LA5_1 == ' ' || LA5_1 == '\u0085' || LA5_1 == '\u00A0' || LA5_1 == '\u1680' || LA5_1 == '\u180E'
              || (LA5_1 >= '\u2000' && LA5_1 <= '\u200A') || (LA5_1 >= '\u2028' && LA5_1 <= '\u2029') || LA5_1 == '\u202F' || LA5_1 == '\u205F' || LA5_1 == '\u3000')) {
            s = 4;
          }

          else if (((LA5_1 >= '\u0000' && LA5_1 <= '\b') || (LA5_1 >= '\u000E' && LA5_1 <= '\u001F') || (LA5_1 >= '#' && LA5_1 <= '%')
              || (LA5_1 >= '*' && LA5_1 <= '-') || (LA5_1 >= '0' && LA5_1 <= ':') || LA5_1 == '?' || (LA5_1 >= 'A' && LA5_1 <= 'Z') || LA5_1 == '\\'
              || (LA5_1 >= '^' && LA5_1 <= 'z') || (LA5_1 >= '~' && LA5_1 <= '\u0084') || (LA5_1 >= '\u0086' && LA5_1 <= '\u009F')
              || (LA5_1 >= '\u00A1' && LA5_1 <= '\u167F') || (LA5_1 >= '\u1681' && LA5_1 <= '\u180D') || (LA5_1 >= '\u180F' && LA5_1 <= '\u1FFF')
              || (LA5_1 >= '\u200B' && LA5_1 <= '\u2027') || (LA5_1 >= '\u202A' && LA5_1 <= '\u202E') || (LA5_1 >= '\u2030' && LA5_1 <= '\u205E')
              || (LA5_1 >= '\u2060' && LA5_1 <= '\u2FFF') || (LA5_1 >= '\u3001' && LA5_1 <= '\uFFFF'))) {
            s = 2;
          }
          else {
            s = 3;
          }

          if (s >= 0) {
            return s;
          }
          break;
        case 1:
          int LA5_0 = input.LA(1);

          s = -1;
          if (((LA5_0 >= '\u0000' && LA5_0 <= '\b') || (LA5_0 >= '\u000E' && LA5_0 <= '\u001F') || (LA5_0 >= '#' && LA5_0 <= '%')
              || (LA5_0 >= '*' && LA5_0 <= '-') || (LA5_0 >= '0' && LA5_0 <= ':') || LA5_0 == '?' || (LA5_0 >= 'A' && LA5_0 <= 'Z') || LA5_0 == '\\'
              || (LA5_0 >= '^' && LA5_0 <= 'z') || (LA5_0 >= '~' && LA5_0 <= '\u0084') || (LA5_0 >= '\u0086' && LA5_0 <= '\u009F')
              || (LA5_0 >= '\u00A1' && LA5_0 <= '\u167F') || (LA5_0 >= '\u1681' && LA5_0 <= '\u180D') || (LA5_0 >= '\u180F' && LA5_0 <= '\u1FFF')
              || (LA5_0 >= '\u200B' && LA5_0 <= '\u2027') || (LA5_0 >= '\u202A' && LA5_0 <= '\u202E') || (LA5_0 >= '\u2030' && LA5_0 <= '\u205E')
              || (LA5_0 >= '\u2060' && LA5_0 <= '\u2FFF') || (LA5_0 >= '\u3001' && LA5_0 <= '\uFFFF'))) {
            s = 1;
          }

          else if (((LA5_0 >= '\t' && LA5_0 <= '\r') || LA5_0 == ' ' || LA5_0 == '\u0085' || LA5_0 == '\u00A0' || LA5_0 == '\u1680'
              || LA5_0 == '\u180E' || (LA5_0 >= '\u2000' && LA5_0 <= '\u200A') || (LA5_0 >= '\u2028' && LA5_0 <= '\u2029') || LA5_0 == '\u202F'
              || LA5_0 == '\u205F' || LA5_0 == '\u3000')) {
            s = 2;
          }

          if (s >= 0) {
            return s;
          }
          break;
        case 2:
          int LA5_4 = input.LA(1);

          s = -1;
          if (((LA5_4 >= '\t' && LA5_4 <= '\r') || LA5_4 == ' ' || LA5_4 == '\u0085' || LA5_4 == '\u00A0' || LA5_4 == '\u1680' || LA5_4 == '\u180E'
              || (LA5_4 >= '\u2000' && LA5_4 <= '\u200A') || (LA5_4 >= '\u2028' && LA5_4 <= '\u2029') || LA5_4 == '\u202F' || LA5_4 == '\u205F' || LA5_4 == '\u3000')) {
            s = 4;
          }

          else if (((LA5_4 >= '\u0000' && LA5_4 <= '\b') || (LA5_4 >= '\u000E' && LA5_4 <= '\u001F') || (LA5_4 >= '#' && LA5_4 <= '%')
              || (LA5_4 >= '*' && LA5_4 <= '-') || (LA5_4 >= '0' && LA5_4 <= ':') || LA5_4 == '?' || (LA5_4 >= 'A' && LA5_4 <= 'Z') || LA5_4 == '\\'
              || (LA5_4 >= '^' && LA5_4 <= 'z') || (LA5_4 >= '~' && LA5_4 <= '\u0084') || (LA5_4 >= '\u0086' && LA5_4 <= '\u009F')
              || (LA5_4 >= '\u00A1' && LA5_4 <= '\u167F') || (LA5_4 >= '\u1681' && LA5_4 <= '\u180D') || (LA5_4 >= '\u180F' && LA5_4 <= '\u1FFF')
              || (LA5_4 >= '\u200B' && LA5_4 <= '\u2027') || (LA5_4 >= '\u202A' && LA5_4 <= '\u202E') || (LA5_4 >= '\u2030' && LA5_4 <= '\u205E')
              || (LA5_4 >= '\u2060' && LA5_4 <= '\u2FFF') || (LA5_4 >= '\u3001' && LA5_4 <= '\uFFFF'))) {
            s = 2;
          }
          else {
            s = 3;
          }

          if (s >= 0) {
            return s;
          }
          break;
      }
      NoViableAltException nvae = new NoViableAltException(getDescription(), 5, _s, input);
      error(nvae);
      throw nvae;
    }
  }

  static final String    DFA14_eotS        = "\1\36\2\uffff\1\37\1\41\16\uffff\3\35\1\36\6\35\5\uffff\41\35\1"
      + "\117\5\35\1\125\2\35\1\130\2\35\1\uffff\3\35\1\136\1\35\1\uffff"
      + "\1\140\1\35\1\uffff\5\35\1\uffff\1\35\1\uffff\2\35\1\152\1\35\1"
      + "\154\1\35\1\156\1\35\1\160\1\uffff\1\35\1\uffff\1\35\1\uffff\1\163"
      + "\1\uffff\1\35\1\165\1\uffff\1\166\2\uffff";
  static final String    DFA14_eofS        = "\167\uffff";
  static final String    DFA14_minS        = "\1\0\2\uffff\2\0\16\uffff\1\156\1\157\1\156\1\0\1\157\1\154\1\151"
      + "\1\145\1\165\1\142\5\uffff\1\160\1\144\1\167\1\146\1\157\1\154\1"
      + "\156\1\165\1\145\1\147\1\154\1\152\1\141\1\163\1\145\1\157\1\165"
      + "\1\144\1\156\1\164\1\163\1\167\1\151\1\154\1\145\1\156\1\127\1\162"
      + "\1\154\1\114\1\164\1\141\1\164\1\0\1\156\1\151\1\143\1\144\1\151"
      + "\1\0\1\144\1\145\1\0\1\151\1\145\1\uffff\1\163\1\146\1\164\1\0\1"
      + "\164\1\uffff\1\0\1\166\1\uffff\1\156\1\162\1\127\1\171\1\151\1\uffff"
      + "\1\150\1\uffff\1\145\1\163\1\0\1\151\1\0\1\146\1\0\1\154\1\0\1\uffff"
      + "\1\164\1\uffff\1\171\1\uffff\1\0\1\uffff\1\150\1\0\1\uffff\1\0\2" + "\uffff";
  static final String    DFA14_maxS        = "\1\uffff\2\uffff\2\uffff\16\uffff\1\170\1\157\1\156\1\uffff\2\157"
      + "\1\151\1\145\1\165\1\142\5\uffff\1\160\1\144\1\167\1\146\1\157\1"
      + "\154\2\165\1\145\1\147\1\154\1\152\1\141\1\163\1\145\1\157\1\165"
      + "\1\144\1\156\1\164\1\163\1\167\1\151\1\154\1\145\1\156\1\127\1\162"
      + "\1\154\1\114\1\164\1\141\1\164\1\uffff\1\156\1\151\1\143\1\144\1"
      + "\151\1\uffff\1\144\1\145\1\uffff\1\151\1\145\1\uffff\1\163\1\146"
      + "\1\164\1\uffff\1\164\1\uffff\1\uffff\1\166\1\uffff\1\156\1\162\1"
      + "\127\1\171\1\151\1\uffff\1\150\1\uffff\1\145\1\163\1\uffff\1\151"
      + "\1\uffff\1\146\1\uffff\1\154\1\uffff\1\uffff\1\164\1\uffff\1\171"
      + "\1\uffff\1\uffff\1\uffff\1\150\1\uffff\1\uffff\1\uffff\2\uffff";
  static final String    DFA14_acceptS     = "\1\uffff\1\1\1\2\2\uffff\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"
      + "\15\1\16\1\17\1\20\1\21\1\22\12\uffff\1\37\1\41\1\3\1\40\1\4\55"
      + "\uffff\1\30\5\uffff\1\24\2\uffff\1\27\5\uffff\1\23\1\uffff\1\25"
      + "\11\uffff\1\34\1\uffff\1\35\1\uffff\1\32\1\uffff\1\33\2\uffff\1" + "\26\1\uffff\1\36\1\31";
  static final String    DFA14_specialS    = "\1\6\2\uffff\1\4\1\12\21\uffff\1\1\54\uffff\1\10\5\uffff\1\17\2"
      + "\uffff\1\13\6\uffff\1\16\2\uffff\1\14\14\uffff\1\5\1\uffff\1\0\1"
      + "\uffff\1\7\1\uffff\1\3\5\uffff\1\15\2\uffff\1\2\1\uffff\1\11\2\uffff}>";
  static final String[]  DFA14_transitionS = {
    "\11\35\5\26\22\35\1\26\1\16\1\4\3\35\1\15\1\3\1\10\1\13\4\35" + "\1\7\1\6\13\35\1\12\1\17\1\20\1\21\1\35\1\11\32\35\1\5\1\35"
        + "\1\14\4\35\1\32\1\30\1\35\1\23\1\27\7\35\1\33\1\34\1\24\4\35" + "\1\25\1\31\4\35\1\1\1\22\1\2\7\35\1\26\32\35\1\26\u15df\35\1"
        + "\26\u018d\35\1\26\u07f1\35\13\26\35\35\2\26\5\35\1\26\57\35" + "\1\26\u0fa0\35\1\26\ucfff\35",
        "",
        "",
        "\134\40\1\uffff\uffa3\40",
        "\134\40\1\uffff\uffa3\40",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "\1\43\11\uffff\1\42",
        "\1\44",
        "\1\45",
        "\11\35\5\26\22\35\1\26\1\uffff\1\40\3\35\1\uffff\1\40\2\uffff" + "\4\35\2\uffff\13\35\4\uffff\1\35\1\uffff\32\35\1\uffff\1\35"
            + "\1\uffff\5\35\1\46\2\35\1\27\17\35\1\31\4\35\3\uffff\7\35\1" + "\26\32\35\1\26\u15df\35\1\26\u018d\35\1\26\u07f1\35\13\26\35"
            + "\35\2\26\5\35\1\26\57\35\1\26\u0fa0\35\1\26\ucfff\35", "\1\47", "\1\51\2\uffff\1\50", "\1\52", "\1\53", "\1\54", "\1\55", "", "", "",
            "", "", "\1\56", "\1\57", "\1\60", "\1\61", "\1\62", "\1\63", "\1\65\6\uffff\1\64", "\1\66", "\1\67", "\1\70", "\1\71", "\1\72", "\1\73",
            "\1\74", "\1\75", "\1\76", "\1\64", "\1\77", "\1\100", "\1\101", "\1\102", "\1\103", "\1\104", "\1\105", "\1\106", "\1\107", "\1\110",
            "\1\111", "\1\112", "\1\113", "\1\114", "\1\115", "\1\116",
            "\41\35\2\uffff\3\35\4\uffff\4\35\2\uffff\13\35\4\uffff\1\35" + "\1\uffff\32\35\1\uffff\1\35\1\uffff\35\35\3\uffff\uff82\35", "\1\120",
            "\1\121", "\1\122", "\1\123", "\1\124",
            "\41\35\2\uffff\3\35\4\uffff\4\35\2\uffff\13\35\4\uffff\1\35" + "\1\uffff\32\35\1\uffff\1\35\1\uffff\35\35\3\uffff\uff82\35", "\1\126",
            "\1\127", "\41\35\2\uffff\3\35\4\uffff\4\35\2\uffff\13\35\4\uffff\1\35" + "\1\uffff\32\35\1\uffff\1\35\1\uffff\35\35\3\uffff\uff82\35",
            "\1\131", "\1\132", "", "\1\133", "\1\134", "\1\135",
            "\41\35\2\uffff\3\35\4\uffff\4\35\2\uffff\13\35\4\uffff\1\35" + "\1\uffff\32\35\1\uffff\1\35\1\uffff\35\35\3\uffff\uff82\35", "\1\137", "",
            "\41\35\2\uffff\3\35\4\uffff\4\35\2\uffff\13\35\4\uffff\1\35" + "\1\uffff\32\35\1\uffff\1\35\1\uffff\35\35\3\uffff\uff82\35", "\1\141", "",
            "\1\142", "\1\143", "\1\144", "\1\145", "\1\146", "", "\1\147", "", "\1\150", "\1\151",
            "\41\35\2\uffff\3\35\4\uffff\4\35\2\uffff\13\35\4\uffff\1\35" + "\1\uffff\32\35\1\uffff\1\35\1\uffff\35\35\3\uffff\uff82\35", "\1\153",
            "\41\35\2\uffff\3\35\4\uffff\4\35\2\uffff\13\35\4\uffff\1\35" + "\1\uffff\32\35\1\uffff\1\35\1\uffff\35\35\3\uffff\uff82\35", "\1\155",
            "\41\35\2\uffff\3\35\4\uffff\4\35\2\uffff\13\35\4\uffff\1\35" + "\1\uffff\32\35\1\uffff\1\35\1\uffff\35\35\3\uffff\uff82\35", "\1\157",
            "\41\35\2\uffff\3\35\4\uffff\4\35\2\uffff\13\35\4\uffff\1\35" + "\1\uffff\32\35\1\uffff\1\35\1\uffff\35\35\3\uffff\uff82\35", "", "\1\161", "",
            "\1\162", "", "\41\35\2\uffff\3\35\4\uffff\4\35\2\uffff\13\35\4\uffff\1\35" + "\1\uffff\32\35\1\uffff\1\35\1\uffff\35\35\3\uffff\uff82\35", "",
            "\1\164", "\41\35\2\uffff\3\35\4\uffff\4\35\2\uffff\13\35\4\uffff\1\35" + "\1\uffff\32\35\1\uffff\1\35\1\uffff\35\35\3\uffff\uff82\35", "",
            "\41\35\2\uffff\3\35\4\uffff\4\35\2\uffff\13\35\4\uffff\1\35" + "\1\uffff\32\35\1\uffff\1\35\1\uffff\35\35\3\uffff\uff82\35", "", "" };

  static final short[]   DFA14_eot         = DFA.unpackEncodedString(DFA14_eotS);
  static final short[]   DFA14_eof         = DFA.unpackEncodedString(DFA14_eofS);
  static final char[]    DFA14_min         = DFA.unpackEncodedStringToUnsignedChars(DFA14_minS);
  static final char[]    DFA14_max         = DFA.unpackEncodedStringToUnsignedChars(DFA14_maxS);
  static final short[]   DFA14_accept      = DFA.unpackEncodedString(DFA14_acceptS);
  static final short[]   DFA14_special     = DFA.unpackEncodedString(DFA14_specialS);
  static final short[][] DFA14_transition;

  static {
    int numStates = DFA14_transitionS.length;
    DFA14_transition = new short[numStates][];
    for (int i = 0; i < numStates; i++) {
      DFA14_transition[i] = DFA.unpackEncodedString(DFA14_transitionS[i]);
    }
  }

  class DFA14 extends DFA {

    public DFA14(BaseRecognizer recognizer) {
      this.recognizer = recognizer;
      this.decisionNumber = 14;
      this.eot = DFA14_eot;
      this.eof = DFA14_eof;
      this.min = DFA14_min;
      this.max = DFA14_max;
      this.accept = DFA14_accept;
      this.special = DFA14_special;
      this.transition = DFA14_transition;
    }

    public String getDescription() {
      return "1:1: Tokens : ( LEFT_CURLY_BRACKET | RIGHT_CURLY_BRACKET | SINGLE_QUOTATION | DOUBLE_QUOTATION | LEFT_SQUARE_BRACKET | SLASH | FULL_STOP | LEFT_PARENTHESIS | AT_SIGN | SEMICOLON | RIGHT_PARENTHESIS | RIGHT_SQUARE_BRACKET | AMPERSAND | EXCLAMATION_MARK | LESS_THAN | EQUALS | GREATER_THAN | VERTICAL_BAR | KEYWORD_EXPAND | KEYWORD_POWER | KEYWORD_UNFOLD | KEYWORD_FOLD_LEVEL | KEYWORD_COUNT | KEYWORD_VIEW | KEYWORD_BEGINS_WITH | KEYWORD_ENDS_WITH | KEYWORD_CONTAINS | KEYWORD_CLUSTER | KEYWORD_NULLIFY | KEYWORD_OBJECTIFY | NAME | STRVALUE | WSSEQ );";
    }

    public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
      IntStream input = _input;
      int _s = s;
      switch (s) {
        case 0:
          int LA14_101 = input.LA(1);

          s = -1;
          if (((LA14_101 >= '\u0000' && LA14_101 <= ' ') || (LA14_101 >= '#' && LA14_101 <= '%') || (LA14_101 >= '*' && LA14_101 <= '-')
              || (LA14_101 >= '0' && LA14_101 <= ':') || LA14_101 == '?' || (LA14_101 >= 'A' && LA14_101 <= 'Z') || LA14_101 == '\\'
              || (LA14_101 >= '^' && LA14_101 <= 'z') || (LA14_101 >= '~' && LA14_101 <= '\uFFFF'))) {
            s = 29;
          }
          else {
            s = 108;
          }

          if (s >= 0) {
            return s;
          }
          break;
        case 1:
          int LA14_22 = input.LA(1);

          s = -1;
          if ((LA14_22 == 'f')) {
            s = 23;
          }

          else if (((LA14_22 >= '\t' && LA14_22 <= '\r') || LA14_22 == ' ' || LA14_22 == '\u0085' || LA14_22 == '\u00A0' || LA14_22 == '\u1680'
              || LA14_22 == '\u180E' || (LA14_22 >= '\u2000' && LA14_22 <= '\u200A') || (LA14_22 >= '\u2028' && LA14_22 <= '\u2029')
              || LA14_22 == '\u202F' || LA14_22 == '\u205F' || LA14_22 == '\u3000')) {
            s = 22;
          }

          else if ((LA14_22 == 'c')) {
            s = 38;
          }

          else if ((LA14_22 == 'v')) {
            s = 25;
          }

          else if (((LA14_22 >= '\u0000' && LA14_22 <= '\b') || (LA14_22 >= '\u000E' && LA14_22 <= '\u001F') || (LA14_22 >= '#' && LA14_22 <= '%')
              || (LA14_22 >= '*' && LA14_22 <= '-') || (LA14_22 >= '0' && LA14_22 <= ':') || LA14_22 == '?' || (LA14_22 >= 'A' && LA14_22 <= 'Z')
              || LA14_22 == '\\' || (LA14_22 >= '^' && LA14_22 <= 'b') || (LA14_22 >= 'd' && LA14_22 <= 'e') || (LA14_22 >= 'g' && LA14_22 <= 'u')
              || (LA14_22 >= 'w' && LA14_22 <= 'z') || (LA14_22 >= '~' && LA14_22 <= '\u0084') || (LA14_22 >= '\u0086' && LA14_22 <= '\u009F')
              || (LA14_22 >= '\u00A1' && LA14_22 <= '\u167F') || (LA14_22 >= '\u1681' && LA14_22 <= '\u180D')
              || (LA14_22 >= '\u180F' && LA14_22 <= '\u1FFF') || (LA14_22 >= '\u200B' && LA14_22 <= '\u2027')
              || (LA14_22 >= '\u202A' && LA14_22 <= '\u202E') || (LA14_22 >= '\u2030' && LA14_22 <= '\u205E')
              || (LA14_22 >= '\u2060' && LA14_22 <= '\u2FFF') || (LA14_22 >= '\u3001' && LA14_22 <= '\uFFFF'))) {
            s = 29;
          }

          else if ((LA14_22 == '\"' || LA14_22 == '\'')) {
            s = 32;
          }
          else {
            s = 30;
          }

          if (s >= 0) {
            return s;
          }
          break;
        case 2:
          int LA14_114 = input.LA(1);

          s = -1;
          if (((LA14_114 >= '\u0000' && LA14_114 <= ' ') || (LA14_114 >= '#' && LA14_114 <= '%') || (LA14_114 >= '*' && LA14_114 <= '-')
              || (LA14_114 >= '0' && LA14_114 <= ':') || LA14_114 == '?' || (LA14_114 >= 'A' && LA14_114 <= 'Z') || LA14_114 == '\\'
              || (LA14_114 >= '^' && LA14_114 <= 'z') || (LA14_114 >= '~' && LA14_114 <= '\uFFFF'))) {
            s = 29;
          }
          else {
            s = 117;
          }

          if (s >= 0) {
            return s;
          }
          break;
        case 3:
          int LA14_105 = input.LA(1);

          s = -1;
          if (((LA14_105 >= '\u0000' && LA14_105 <= ' ') || (LA14_105 >= '#' && LA14_105 <= '%') || (LA14_105 >= '*' && LA14_105 <= '-')
              || (LA14_105 >= '0' && LA14_105 <= ':') || LA14_105 == '?' || (LA14_105 >= 'A' && LA14_105 <= 'Z') || LA14_105 == '\\'
              || (LA14_105 >= '^' && LA14_105 <= 'z') || (LA14_105 >= '~' && LA14_105 <= '\uFFFF'))) {
            s = 29;
          }
          else {
            s = 112;
          }

          if (s >= 0) {
            return s;
          }
          break;
        case 4:
          int LA14_3 = input.LA(1);

          s = -1;
          if (((LA14_3 >= '\u0000' && LA14_3 <= '[') || (LA14_3 >= ']' && LA14_3 <= '\uFFFF'))) {
            s = 32;
          }
          else {
            s = 31;
          }

          if (s >= 0) {
            return s;
          }
          break;
        case 5:
          int LA14_99 = input.LA(1);

          s = -1;
          if (((LA14_99 >= '\u0000' && LA14_99 <= ' ') || (LA14_99 >= '#' && LA14_99 <= '%') || (LA14_99 >= '*' && LA14_99 <= '-')
              || (LA14_99 >= '0' && LA14_99 <= ':') || LA14_99 == '?' || (LA14_99 >= 'A' && LA14_99 <= 'Z') || LA14_99 == '\\'
              || (LA14_99 >= '^' && LA14_99 <= 'z') || (LA14_99 >= '~' && LA14_99 <= '\uFFFF'))) {
            s = 29;
          }
          else {
            s = 106;
          }

          if (s >= 0) {
            return s;
          }
          break;
        case 6:
          int LA14_0 = input.LA(1);

          s = -1;
          if ((LA14_0 == '{')) {
            s = 1;
          }

          else if ((LA14_0 == '}')) {
            s = 2;
          }

          else if ((LA14_0 == '\'')) {
            s = 3;
          }

          else if ((LA14_0 == '\"')) {
            s = 4;
          }

          else if ((LA14_0 == '[')) {
            s = 5;
          }

          else if ((LA14_0 == '/')) {
            s = 6;
          }

          else if ((LA14_0 == '.')) {
            s = 7;
          }

          else if ((LA14_0 == '(')) {
            s = 8;
          }

          else if ((LA14_0 == '@')) {
            s = 9;
          }

          else if ((LA14_0 == ';')) {
            s = 10;
          }

          else if ((LA14_0 == ')')) {
            s = 11;
          }

          else if ((LA14_0 == ']')) {
            s = 12;
          }

          else if ((LA14_0 == '&')) {
            s = 13;
          }

          else if ((LA14_0 == '!')) {
            s = 14;
          }

          else if ((LA14_0 == '<')) {
            s = 15;
          }

          else if ((LA14_0 == '=')) {
            s = 16;
          }

          else if ((LA14_0 == '>')) {
            s = 17;
          }

          else if ((LA14_0 == '|')) {
            s = 18;
          }

          else if ((LA14_0 == 'e')) {
            s = 19;
          }

          else if ((LA14_0 == 'p')) {
            s = 20;
          }

          else if ((LA14_0 == 'u')) {
            s = 21;
          }

          else if (((LA14_0 >= '\t' && LA14_0 <= '\r') || LA14_0 == ' ' || LA14_0 == '\u0085' || LA14_0 == '\u00A0' || LA14_0 == '\u1680'
              || LA14_0 == '\u180E' || (LA14_0 >= '\u2000' && LA14_0 <= '\u200A') || (LA14_0 >= '\u2028' && LA14_0 <= '\u2029') || LA14_0 == '\u202F'
              || LA14_0 == '\u205F' || LA14_0 == '\u3000')) {
            s = 22;
          }

          else if ((LA14_0 == 'f')) {
            s = 23;
          }

          else if ((LA14_0 == 'c')) {
            s = 24;
          }

          else if ((LA14_0 == 'v')) {
            s = 25;
          }

          else if ((LA14_0 == 'b')) {
            s = 26;
          }

          else if ((LA14_0 == 'n')) {
            s = 27;
          }

          else if ((LA14_0 == 'o')) {
            s = 28;
          }

          else if (((LA14_0 >= '\u0000' && LA14_0 <= '\b') || (LA14_0 >= '\u000E' && LA14_0 <= '\u001F') || (LA14_0 >= '#' && LA14_0 <= '%')
              || (LA14_0 >= '*' && LA14_0 <= '-') || (LA14_0 >= '0' && LA14_0 <= ':') || LA14_0 == '?' || (LA14_0 >= 'A' && LA14_0 <= 'Z')
              || LA14_0 == '\\' || (LA14_0 >= '^' && LA14_0 <= 'a') || LA14_0 == 'd' || (LA14_0 >= 'g' && LA14_0 <= 'm')
              || (LA14_0 >= 'q' && LA14_0 <= 't') || (LA14_0 >= 'w' && LA14_0 <= 'z') || (LA14_0 >= '~' && LA14_0 <= '\u0084')
              || (LA14_0 >= '\u0086' && LA14_0 <= '\u009F') || (LA14_0 >= '\u00A1' && LA14_0 <= '\u167F')
              || (LA14_0 >= '\u1681' && LA14_0 <= '\u180D') || (LA14_0 >= '\u180F' && LA14_0 <= '\u1FFF')
              || (LA14_0 >= '\u200B' && LA14_0 <= '\u2027') || (LA14_0 >= '\u202A' && LA14_0 <= '\u202E')
              || (LA14_0 >= '\u2030' && LA14_0 <= '\u205E') || (LA14_0 >= '\u2060' && LA14_0 <= '\u2FFF') || (LA14_0 >= '\u3001' && LA14_0 <= '\uFFFF'))) {
            s = 29;
          }
          else {
            s = 30;
          }

          if (s >= 0) {
            return s;
          }
          break;
        case 7:
          int LA14_103 = input.LA(1);

          s = -1;
          if (((LA14_103 >= '\u0000' && LA14_103 <= ' ') || (LA14_103 >= '#' && LA14_103 <= '%') || (LA14_103 >= '*' && LA14_103 <= '-')
              || (LA14_103 >= '0' && LA14_103 <= ':') || LA14_103 == '?' || (LA14_103 >= 'A' && LA14_103 <= 'Z') || LA14_103 == '\\'
              || (LA14_103 >= '^' && LA14_103 <= 'z') || (LA14_103 >= '~' && LA14_103 <= '\uFFFF'))) {
            s = 29;
          }
          else {
            s = 110;
          }

          if (s >= 0) {
            return s;
          }
          break;
        case 8:
          int LA14_67 = input.LA(1);

          s = -1;
          if (((LA14_67 >= '\u0000' && LA14_67 <= ' ') || (LA14_67 >= '#' && LA14_67 <= '%') || (LA14_67 >= '*' && LA14_67 <= '-')
              || (LA14_67 >= '0' && LA14_67 <= ':') || LA14_67 == '?' || (LA14_67 >= 'A' && LA14_67 <= 'Z') || LA14_67 == '\\'
              || (LA14_67 >= '^' && LA14_67 <= 'z') || (LA14_67 >= '~' && LA14_67 <= '\uFFFF'))) {
            s = 29;
          }
          else {
            s = 79;
          }

          if (s >= 0) {
            return s;
          }
          break;
        case 9:
          int LA14_116 = input.LA(1);

          s = -1;
          if (((LA14_116 >= '\u0000' && LA14_116 <= ' ') || (LA14_116 >= '#' && LA14_116 <= '%') || (LA14_116 >= '*' && LA14_116 <= '-')
              || (LA14_116 >= '0' && LA14_116 <= ':') || LA14_116 == '?' || (LA14_116 >= 'A' && LA14_116 <= 'Z') || LA14_116 == '\\'
              || (LA14_116 >= '^' && LA14_116 <= 'z') || (LA14_116 >= '~' && LA14_116 <= '\uFFFF'))) {
            s = 29;
          }
          else {
            s = 118;
          }

          if (s >= 0) {
            return s;
          }
          break;
        case 10:
          int LA14_4 = input.LA(1);

          s = -1;
          if (((LA14_4 >= '\u0000' && LA14_4 <= '[') || (LA14_4 >= ']' && LA14_4 <= '\uFFFF'))) {
            s = 32;
          }
          else {
            s = 33;
          }

          if (s >= 0) {
            return s;
          }
          break;
        case 11:
          int LA14_76 = input.LA(1);

          s = -1;
          if (((LA14_76 >= '\u0000' && LA14_76 <= ' ') || (LA14_76 >= '#' && LA14_76 <= '%') || (LA14_76 >= '*' && LA14_76 <= '-')
              || (LA14_76 >= '0' && LA14_76 <= ':') || LA14_76 == '?' || (LA14_76 >= 'A' && LA14_76 <= 'Z') || LA14_76 == '\\'
              || (LA14_76 >= '^' && LA14_76 <= 'z') || (LA14_76 >= '~' && LA14_76 <= '\uFFFF'))) {
            s = 29;
          }
          else {
            s = 88;
          }

          if (s >= 0) {
            return s;
          }
          break;
        case 12:
          int LA14_86 = input.LA(1);

          s = -1;
          if (((LA14_86 >= '\u0000' && LA14_86 <= ' ') || (LA14_86 >= '#' && LA14_86 <= '%') || (LA14_86 >= '*' && LA14_86 <= '-')
              || (LA14_86 >= '0' && LA14_86 <= ':') || LA14_86 == '?' || (LA14_86 >= 'A' && LA14_86 <= 'Z') || LA14_86 == '\\'
              || (LA14_86 >= '^' && LA14_86 <= 'z') || (LA14_86 >= '~' && LA14_86 <= '\uFFFF'))) {
            s = 29;
          }
          else {
            s = 96;
          }

          if (s >= 0) {
            return s;
          }
          break;
        case 13:
          int LA14_111 = input.LA(1);

          s = -1;
          if (((LA14_111 >= '\u0000' && LA14_111 <= ' ') || (LA14_111 >= '#' && LA14_111 <= '%') || (LA14_111 >= '*' && LA14_111 <= '-')
              || (LA14_111 >= '0' && LA14_111 <= ':') || LA14_111 == '?' || (LA14_111 >= 'A' && LA14_111 <= 'Z') || LA14_111 == '\\'
              || (LA14_111 >= '^' && LA14_111 <= 'z') || (LA14_111 >= '~' && LA14_111 <= '\uFFFF'))) {
            s = 29;
          }
          else {
            s = 115;
          }

          if (s >= 0) {
            return s;
          }
          break;
        case 14:
          int LA14_83 = input.LA(1);

          s = -1;
          if (((LA14_83 >= '\u0000' && LA14_83 <= ' ') || (LA14_83 >= '#' && LA14_83 <= '%') || (LA14_83 >= '*' && LA14_83 <= '-')
              || (LA14_83 >= '0' && LA14_83 <= ':') || LA14_83 == '?' || (LA14_83 >= 'A' && LA14_83 <= 'Z') || LA14_83 == '\\'
              || (LA14_83 >= '^' && LA14_83 <= 'z') || (LA14_83 >= '~' && LA14_83 <= '\uFFFF'))) {
            s = 29;
          }
          else {
            s = 94;
          }

          if (s >= 0) {
            return s;
          }
          break;
        case 15:
          int LA14_73 = input.LA(1);

          s = -1;
          if (((LA14_73 >= '\u0000' && LA14_73 <= ' ') || (LA14_73 >= '#' && LA14_73 <= '%') || (LA14_73 >= '*' && LA14_73 <= '-')
              || (LA14_73 >= '0' && LA14_73 <= ':') || LA14_73 == '?' || (LA14_73 >= 'A' && LA14_73 <= 'Z') || LA14_73 == '\\'
              || (LA14_73 >= '^' && LA14_73 <= 'z') || (LA14_73 >= '~' && LA14_73 <= '\uFFFF'))) {
            s = 29;
          }
          else {
            s = 85;
          }

          if (s >= 0) {
            return s;
          }
          break;
      }
      NoViableAltException nvae = new NoViableAltException(getDescription(), 14, _s, input);
      error(nvae);
      throw nvae;
    }
  }

}