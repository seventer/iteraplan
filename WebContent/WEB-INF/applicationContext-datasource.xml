<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd">

	<!--
		The concrete values used for the configuration of the master data
		source are set in the file 'iteraplan-db.properties.'
	-->
	<bean id="masterDataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${database.driver}"/>
		<property name="url" value="${database.url}"/>
		<property name="username" value="${database.login}"/>
		<property name="password" value="${database.password}"/>
		<property name="defaultAutoCommit" value="${database.pool.autoCommit}"/>
		<property name="validationQuery" value="${database.validationquery}"/>
		<property name="testOnBorrow" value="${database.pool.testOnBorrow}"/>
		<property name="initialSize" value="${database.pool.initialSize}"/>
		<property name="maxActive" value="${database.pool.maxActive}"/>
		<property name="maxIdle" value="${database.pool.maxIdle}"/>
		<property name="minIdle" value="${database.pool.minIdle}"/>
		<property name="defaultTransactionIsolation" value="${database.pool.transactionIsolation}"/>
		<property name="maxWait" value="${database.pool.maxWait}"/>
	</bean>

	<bean id="iteraplanDataSource" class="de.iteratec.iteraplan.persistence.RoutingDataSource"
		destroy-method="destroy">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry key="MASTER" value-ref="masterDataSource"/>
			</map>
		</property>
		<property name="closeDataSources">
			<map key-type="java.lang.String">
				<entry key="BasicDataSource" value="close"/>
				<entry key="CachableBasicDataSource" value="close"/>
			</map>
		</property>
	</bean>
	
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="iteraplanDataSource"/>
		<property name="mappingResources" ref="hibernateMappingResources" />
		
		<!-- Following two properties are set depending on the currently active Spring Profile -->
		<property name="hibernateProperties" ref="hibernateSessionProperties" />
    	<property name="eventListeners" ref="hibernateEventListeners" />
	</bean>
	
	<util:list id="hibernateMappingResources">
		<value>de/iteratec/iteraplan/persistence/mapping/UserTypes.hbm.xml</value>
		<value>de/iteratec/iteraplan/persistence/mapping/BuildingBlock.hbm.xml</value>
		<value>de/iteratec/iteraplan/persistence/mapping/BuildingBlockType.hbm.xml</value>
		<value>de/iteratec/iteraplan/persistence/mapping/BusinessObject.hbm.xml</value>
		<value>de/iteratec/iteraplan/persistence/mapping/InformationSystem.hbm.xml</value>
		<value>de/iteratec/iteraplan/persistence/mapping/TechnicalComponent.hbm.xml</value>
		<value>de/iteratec/iteraplan/persistence/mapping/InformationSystemInterface.hbm.xml</value>
		<value>de/iteratec/iteraplan/persistence/mapping/Release.hbm.xml</value>
		<value>de/iteratec/iteraplan/persistence/mapping/user/DataSource.hbm.xml</value>
		<value>de/iteratec/iteraplan/persistence/mapping/user/PermissionAttrTypeGroup.hbm.xml</value>
		<value>de/iteratec/iteraplan/persistence/mapping/user/PermissionFunctional.hbm.xml</value>
		<value>de/iteratec/iteraplan/persistence/mapping/user/Role2BbtPermission.hbm.xml</value>
		<value>de/iteratec/iteraplan/persistence/mapping/user/Role.hbm.xml</value>
		<value>de/iteratec/iteraplan/persistence/mapping/user/UserEntity.hbm.xml</value>
		<value>de/iteratec/iteraplan/persistence/mapping/attribute/AttributeType.hbm.xml</value>
		<value>de/iteratec/iteraplan/persistence/mapping/attribute/AttributeTypeGroup.hbm.xml</value>
		<value>de/iteratec/iteraplan/persistence/mapping/attribute/AttributeValue.hbm.xml</value>
		<value>de/iteratec/iteraplan/persistence/mapping/attribute/AttributeValueAssignment.hbm.xml</value>
		<value>de/iteratec/iteraplan/persistence/mapping/attribute/RangeValue.hbm.xml</value>
		<value>de/iteratec/iteraplan/persistence/mapping/attribute/Timeseries.hbm.xml</value>
		<value>de/iteratec/iteraplan/persistence/mapping/attribute/DateInterval.hbm.xml</value>
		<value>de/iteratec/iteraplan/persistence/mapping/ConsistencyCheck.hbm.xml</value>
		<value>de/iteratec/iteraplan/persistence/mapping/PermissionQuery.hbm.xml</value>
		<value>de/iteratec/iteraplan/persistence/mapping/CustomDashboardInstance.hbm.xml</value>    
		<value>de/iteratec/iteraplan/persistence/mapping/CustomDashboardTemplate.hbm.xml</value>                     
		<value>de/iteratec/iteraplan/persistence/mapping/SavedQueryEntity.hbm.xml</value>
		<value>de/iteratec/iteraplan/persistence/mapping/HistoryRevisionEntity.hbm.xml</value> 
	</util:list>

    <!-- SearchListener Bean --> 
	<bean id="searchListener" class="de.iteratec.iteraplan.persistence.search.IteraFullTextIndexEventListener"/>
    
    <!-- EnversListener Bean -->
	<bean id="historyListener" class="de.iteratec.iteraplan.persistence.history.HistoryEventListener" />
  
	<!-- IteraQl EventListener Bean -->
	<bean id="iteraQlListener" class="de.iteratec.iteraplan.persistence.iteraql.IteraQlEventListener" />
	
    
	<beans profile="de.iteratec.iteraplan.testing">
		<util:properties id="hibernateSessionProperties">
			<prop key="hibernate.dialect">${hibernate.dialect}</prop>
			<prop key="hibernate.show_sql">false</prop>
			<prop key="hibernate.format_sql">true</prop>
			<prop key="hibernate.use_sql_comments">true</prop>
			<prop key="hibernate.cache.use_second_level_cache">false</prop>
			<prop key="hibernate.cache.use_query_cache">false</prop>
			<prop key="hibernate.cache.region.factory_class">net.sf.ehcache.hibernate.SingletonEhCacheRegionFactory</prop>
			<prop key="hibernate.generate_statistics">true</prop>
			<prop key="hibernate.jdbc.batch_size">100</prop>
			<prop key="hibernate.default_batch_fetch_size">100</prop>
			<prop key="hibernate.jdbc.use_streams_for_binary">true</prop>

			<!-- Hibernate Search configuration -->
			<prop key="hibernate.search.default.directory_provider">org.hibernate.search.store.FSDirectoryProvider</prop>
			<prop key="hibernate.search.default.indexBase">${hibernate.search.index}</prop>
			<prop key="hibernate.search.autoregister_listeners">false</prop>

			<!-- Hibernate Envers configuration -->
			<prop key="org.hibernate.envers.audit_table_prefix">HIST_</prop>
			<prop key="org.hibernate.envers.audit_table_suffix"></prop>

			<!-- Limit the number of outer joins to one level of depth from the initial object -->
			<prop key="hibernate.max_fetch_depth">1</prop>

			<!-- When set to *false*: Workaround to prevent Hibernate from opening a connection to Oracle during Session Factory init. 
				This can cause problems when you just want to generate some SQL but don't have an actual DB around to connect to -->
			<prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop>
		</util:properties>

		<util:map id="hibernateEventListeners">
			<!-- Listeners for both -->
			<entry key="post-insert">
				<list>
					<ref bean="historyListener" />
				</list>
			</entry>
			<entry key="post-update">
				<list>
					<ref bean="historyListener" />
				</list>
			</entry>
			<entry key="post-delete">
				<list>
					<ref bean="historyListener" />
				</list>
			</entry>
			<entry key="post-collection-recreate">
				<list>
					<ref bean="historyListener" />
				</list>
			</entry>

			<entry key="pre-collection-update" value-ref="historyListener" />
			<entry key="pre-collection-remove" value-ref="historyListener" />

		</util:map>

	</beans>
	
	<beans profile="de.iteratec.iteraplan.deployment">
		<util:properties id="hibernateSessionProperties">
			<prop key="hibernate.dialect">${hibernate.dialect}</prop>
			<prop key="hibernate.show_sql">false</prop>
			<prop key="hibernate.format_sql">true</prop>
			<prop key="hibernate.use_sql_comments">true</prop>				
			<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.usesecondlevelcache}</prop>
			<prop key="hibernate.cache.use_query_cache">${hibernate.cache.usequerycache}</prop>
			<prop key="hibernate.cache.region.factory_class">net.sf.ehcache.hibernate.SingletonEhCacheRegionFactory</prop>
			<prop key="hibernate.generate_statistics">false</prop>
			<prop key="hibernate.jdbc.batch_size">100</prop>
			<prop key="hibernate.default_batch_fetch_size">100</prop>
			<prop key="hibernate.jdbc.use_streams_for_binary">true</prop>
   			
   			<!-- Hibernate Search configuration -->
   			<prop key="hibernate.search.default.directory_provider">org.hibernate.search.store.FSDirectoryProvider</prop>
			<prop key="hibernate.search.default.indexBase">${hibernate.search.index}</prop>
			<prop key="hibernate.search.autoregister_listeners">false</prop>
			
			<!--  Hibernate Envers configuration -->
			<prop key="org.hibernate.envers.audit_table_prefix">HIST_</prop>
			<prop key="org.hibernate.envers.audit_table_suffix"></prop>
			
			<!-- Limit the number of outer joins to one level of depth from the initial object-->
			<prop key="hibernate.max_fetch_depth">1</prop>
			
			<!-- When set to *false*: Workaround to prevent Hibernate from opening a connection to Oracle during Session Factory init. 
				This can cause problems when you just want to generate some SQL but don't have an actual DB around to connect to -->
			<prop key="hibernate.temp.use_jdbc_metadata_defaults">true</prop>
		</util:properties>

		<util:map id="hibernateEventListeners">
				<!-- Listeners for both -->
				<entry key="post-insert" >
					<list>
						<ref bean="searchListener"/>
						<ref bean="historyListener"/>
						<ref bean="iteraQlListener"/>
					</list>
				</entry>
				<entry key="post-update" >
					<list>
						<ref bean="searchListener"/>
						<ref bean="historyListener"/>
						<ref bean="iteraQlListener"/>
					</list>
				</entry>
				<entry key="post-delete" >
					<list>
						<ref bean="searchListener"/>
						<ref bean="historyListener"/>
						<ref bean="iteraQlListener"/>
					</list>
				</entry>
				<entry key="post-collection-recreate" >
					<list>
						<ref bean="searchListener"/>
						<ref bean="historyListener"/>
					</list>
				</entry>
				
				<entry key="pre-collection-update" value-ref="historyListener" />
				<entry key="pre-collection-remove" value-ref="historyListener" />
				
                <entry key="post-collection-remove" value-ref="searchListener" />
                <entry key="post-collection-update" value-ref="searchListener" />
		</util:map>
	</beans>
	
<!--	<bean id="hibernateStatisticsMBean" class="org.hibernate.jmx.StatisticsService">-->
<!--		<property name="statisticsEnabled" value="true" />-->
<!--		<property name="sessionFactory" ref="sessionFactory" />-->
<!--	</bean>-->
<!---->
<!--	<bean id="ehCacheMBeanRegistration" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">-->
<!--		<property name="staticMethod" value="net.sf.ehcache.management.ManagementService.registerMBeans" />-->
<!--		<property name="arguments">-->
<!--			<list>-->
<!--				<ref bean="cacheManager" />-->
<!--				<ref bean="mbeanServer" />-->
<!--				<value>true</value>-->
<!--				<value>true</value>-->
<!--				<value>true</value>-->
<!--				<value>true</value>-->
<!--			</list>-->
<!--		</property>-->
<!--	</bean>-->
<!---->
<!--	<bean id="mbeanServer" class="org.springframework.jmx.support.MBeanServerFactoryBean">-->
<!--		<property name="locateExistingServerIfPossible" value="true" />-->
<!--	</bean>-->
<!---->
<!--	<bean id="mbeanExporter" class="org.springframework.jmx.export.MBeanExporter">-->
<!--		<property name="beans">-->
<!--			<map>-->
<!--				<entry key="Hibernate:name=statistics" value-ref="hibernateStatisticsMBean" />-->
<!--			</map>-->
<!--		</property>-->
<!--		<property name="server" ref="mbeanServer" />		-->
<!--	</bean>-->
<!---->
<!--	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">-->
<!--		<property name="configLocation" value="classpath:ehcache.xml" />-->
<!--		<property name="shared" value="true"/>-->
<!--	</bean>-->

</beans>