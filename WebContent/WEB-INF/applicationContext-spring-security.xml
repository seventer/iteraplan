<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:security="http://www.springframework.org/schema/security"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
                      http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd">

  <!-- ============================================================================================= 
    The main filter that is declared in the web.xml. It can map relative URLs to a chain of filters.
    ============================================================================================ -->
	<bean id="filterChainProxy" class="org.springframework.security.web.FilterChainProxy">
        <constructor-arg>
          <list>
         	<security:filter-chain pattern="/api/**"
         	  filters="
         	    securityContextPersistenceFilter,
          	    logoutFilter,
         	    basicAuthenticationFilter,
          	    securityContextHolderAwareRequestFilter,
          	    anonymousAuthenticationFilter,
         	    exceptionTranslationFilter,
         	    filterInvocationInterceptor" />
         	<security:filter-chain pattern="/**"
         	  filters="
         	    securityContextPersistenceFilter,
         	    logoutFilter,
         	    usernamePasswordAuthenticationFilter,
         	    securityContextHolderAwareRequestFilter,
         	    anonymousAuthenticationFilter,
         	    exceptionTranslationFilter,
         	    filterInvocationInterceptor" />         	
           </list>
         </constructor-arg>
	</bean>

  <bean id="basicAuthenticationFilter" class="de.iteratec.springframework.security.UserInitializingBasicAuthenticationFilter">
    <constructor-arg name="authenticationManager" ref="authenticationManager" />
    <constructor-arg name="authenticationEntryPoint" ref="authenticationEntryPoint" />
    <property name="userContextInitializationService" ref="userContextInitializationService" />
  </bean>
  
  <bean id="authenticationEntryPoint" class="org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint">
      <property name="realmName" value="RESTful iteraplan API" />
  </bean>

  <!-- ============================================================================================= 
    Stores the SecurityContextHolder in the HttpSession.
    ============================================================================================ -->
	<bean id="securityContextPersistenceFilter" class="org.springframework.security.web.context.SecurityContextPersistenceFilter"/>

  <!-- =============================================================================================
    Logs a principal out. Can call several LogoutHandlers.
    ============================================================================================ -->
	<bean id="logoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">
		<!-- URL redirected to after logout -->
		<constructor-arg value="/jsp/index.jsp"/>
		<constructor-arg>
			<list>
				<bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler">
          			<property name="invalidateHttpSession" value="true"/>
        		</bean>
			</list>
		</constructor-arg>
		<!-- URL for activating logout -->
    	<property name="filterProcessesUrl" value="/j_iteraplan_logout"/>
	</bean>

  <!-- =============================================================================================
    Processes an authentication form. (login.jsp)
    ===========================================================================================  -->
	<bean id="usernamePasswordAuthenticationFilter" class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
		<property name="authenticationManager" ref="authenticationManager"/>
		<property name="authenticationFailureHandler" ref="failureHandler" />
		<property name="authenticationSuccessHandler" ref="successHandler" />
		<property name="sessionAuthenticationStrategy" ref="sas"/>
		<property name="filterProcessesUrl" value="/j_iteraplan_security_check"/>
		<property name="allowSessionCreation" value="true" />
	</bean>
	
  <!-- =============================================================================================
    Handlers for failure/exception / success and session authentication startegy
    ===========================================================================================  -->
    
	<bean id="failureHandler" class="org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler" >
		<property name="defaultFailureUrl" value="/login.do?errorKey=login.error.badCredentials" />
			    <property name="exceptionMappings">
	      <props>
	        <prop key="org.springframework.security.authentication.AuthenticationServiceException">
	          /login.do?errorKey=login.error.datasourceNotAvailable
	        </prop>
	        <prop key="org.springframework.security.authentication.CredentialsExpiredException">	        
	          /login.do?errorKey=login.error.passwordExpired
	        </prop>
	      </props>
	    </property>
	</bean>
	
	<bean id="successHandler" class="de.iteratec.springframework.security.LoginInitializationSuccessHandler" >
		<property name="defaultTargetUrl" value="/" />
		<property name="loginPage" value="/login.do" />
		<property name="userContextInitializationService" ref="userContextInitializationService"/>
	</bean>
	
	<bean id="sas" class="org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy">
		<property name="migrateSessionAttributes" value="true" />
	</bean>
	
   
  <!-- =============================================================================================
    Populates the ServletRequest with a new request wrapper that provides the getRemoteUser() and 
    isUserInRole() functionality.
    ===========================================================================================  -->
	<bean id="securityContextHolderAwareRequestFilter" class="org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter"/>

  <!-- =============================================================================================
    Detects if there is no Authentication object in the SecurityContextHolder, and populates it with
    one if needed.
    ===========================================================================================  -->
	<bean id="anonymousAuthenticationFilter" class="de.iteratec.springframework.security.filters.CommunityAuthenticationFilter">
		<constructor-arg value="Anonymous" /> <!-- key -->
		<constructor-arg value="CommunityUser"/> <!-- principal -->
		<constructor-arg>
			<list>
				<bean class="org.springframework.security.core.authority.SimpleGrantedAuthority">
					<constructor-arg value="MainUser" />
				</bean>
			</list>
		</constructor-arg>
		<property name="userContextInitializationService" ref="userContextInitializationService"/>
	</bean>

  <!-- =============================================================================================
    This filter is responsible for forwarding the user to the login page, if he has not authenticated 
    himself yet. Basically catches AccessDeniedException and AuthenticationException and determines 
    what to do. Because it doesn't make any sence to return the login page for unauthorized Ajax calls,
    the customized subclass AjaxAwareLoginUrlAuthenticationEntryPoint returns a 401 HTTP status code
    in this case.
    ===========================================================================================  -->
	<bean id="exceptionTranslationFilter" class="org.springframework.security.web.access.ExceptionTranslationFilter">
		<constructor-arg>
			<bean class="de.iteratec.iteraplan.presentation.AjaxAwareLoginUrlAuthenticationEntryPoint">
				<constructor-arg value="/login.do" /> <!-- loginFormUrl -->
				<property name="forceHttps" value="false"/>
			</bean>
		</constructor-arg>
	</bean>
	
  <!-- =============================================================================================
    Handles invocations of secure objects. For a complete workflow, see class AbstractSecurityInterceptor.
    ===========================================================================================  -->
	<bean id="filterInvocationInterceptor" class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
		<property name="authenticationManager" ref="authenticationManager"/>
		<property name="accessDecisionManager">
			<bean class="org.springframework.security.access.vote.AffirmativeBased">
				<constructor-arg> <!--  decisionVoters -->
					<list>
						<bean class="org.springframework.security.access.vote.RoleVoter">
			              <property name="rolePrefix">
			              	<value>iteraplan_</value>
			              </property>
			            </bean>
						<bean class="org.springframework.security.access.vote.AuthenticatedVoter"/>
					</list>
				</constructor-arg>
				<property name="allowIfAllAbstainDecisions" value="false"/>
			</bean>
		</property>
		<property name="securityMetadataSource">
			<security:filter-security-metadata-source request-matcher="ant" lowercase-comparisons="true" >
				<security:intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
			</security:filter-security-metadata-source>
		</property>
	</bean>

  <!-- =============================================================================================
    Handles an Authentication request and iterates through a list of AuthenticationProviders (here: 
    dao and anonymous).
    ===========================================================================================  -->
	<bean id="authenticationManager" class="org.springframework.security.authentication.ProviderManager">
		<constructor-arg>
			<list>
				<bean class="org.springframework.security.authentication.AnonymousAuthenticationProvider">
					<constructor-arg value="Anonymous"/> <!-- key -->
				</bean>
			</list>
		</constructor-arg>
	</bean>

   <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
     <property name="jndiName" value="java:/comp/env/${db.jndi.datasource}" />
   </bean>
   
	<!-- Disable in productive environment. -->
	<!--
	<bean id="loggerListener" class="org.springframework.security.event.authentication.LoggerListener"/>
	-->

</beans>