<?xml version="1.0" encoding="UTF-8"?>
<flow xmlns="http://www.springframework.org/schema/webflow"
	  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	  xsi:schemaLocation="http://www.springframework.org/schema/webflow 
      http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd"
	  start-state="start" parent="baseFlow">

	<input name="id" type="java.lang.Integer" />
		
	<decision-state id="start">
		<on-entry>
			<set name="flowScope.entityName"
				value="roleFrontendService.getEntityName()" type="java.lang.String" />
		</on-entry>
		<if test="requestParameters['_eventId']=='show'" then="show" />
		<if test="requestParameters['_eventId']=='delete'" then="delete" />
		<if test="requestParameters['_eventId']=='create'" then="initCreate" />
		<if test="requestParameters['_eventId']=='copyBB'" then="copyBB" />
		<if test="requestParameters['_eventId']=='closeAll'" then="closeAll" />
		<if test="requestParameters['_eventId']==null" then="show" />	
	</decision-state>

	<view-state id="show" model="memBean" view="role/show">
		<on-entry>
			<evaluate expression="roleFrontendService.getMemBean(id)"
				result="flowScope.memBean" />
			<set name="flowScope.FLOW_LABEL"
				value="roleFrontendService.getFlowLabel(flowScope.memBean.componentModel.nameModel.name)"
				type="java.lang.String" />
		</on-entry>
		<transition on="edit" to="edit">
		<set name="flowScope.setFocusOnTextfield" value="true" type="java.lang.String" />
			<evaluate
				expression="roleFrontendService.getEditMemBean(flowScope.memBean, id, flowRequestContext, flowExecutionContext)"
				result="flowScope.memBean" />
		</transition>
		<transition on="delete" to="confirmed">
			<evaluate
				expression="roleFrontendService.deleteEntity(id, flowRequestContext, flowExecutionContext)" />
		</transition>
	</view-state>

	<view-state id="edit" model="memBean" view="role/edit">
		<transition on="save" to="show" history="invalidate">
			<!--
				<evaluate expression="selectedRole.validate()" />
			-->
			<evaluate
				expression="roleFrontendService.saveComponentModel(flowScope.memBean, id, flowRequestContext, flowExecutionContext)" />
		</transition>
		<transition on="update" to="edit">
		<set name="flowScope.setFocusOnTextfield" value="false" type="java.lang.String" />
			<evaluate
				expression="roleFrontendService.updateComponentModel(flowScope.memBean, flowRequestContext, flowExecutionContext)" />
		</transition>
		<transition on="cancel" to="show" validate="false">
			<evaluate
				expression="roleFrontendService.leaveEditMode(flowExecutionContext)" />
		</transition>
	</view-state>
	
	<view-state id="copyBB" model="memBean" view="role/create">
    <on-entry> 
 	 <set name="flowScope.setFocusOnTextfield" value="true" type="java.lang.String" />
      <evaluate expression="roleFrontendService.getCreateMemBeanWithDataFromId(id)"
        result="flowScope.memBean" />
      
      <set name="flowScope.FLOW_LABEL" type="java.lang.String"
        value="roleFrontendService.getFlowLabel(null)" />      
    </on-entry>
	<on-render>
		<evaluate
			expression="roleFrontendService.enterEditMode(flowExecutionContext)" />
	</on-render>
    <transition on="save" to="refreshAfterSave" history="invalidate">
      <evaluate expression="roleFrontendService.saveNewComponentModel(flowScope.memBean, flowRequestContext, flowExecutionContext)" 
        result="flowScope.id"/>
    </transition>
    <transition on="update" to="create"> 
 	 <set name="flowScope.setFocusOnTextfield" value="false" type="java.lang.String" />
      <evaluate
        expression="roleFrontendService.updateComponentModel(flowScope.memBean, flowRequestContext, flowExecutionContext)" />
    </transition>
    <transition on="cancel" to="close" validate="false" /> 
  </view-state>
	
	<view-state id="initCreate" model="memBean" view="role/create">
		<on-entry> 
 	 <set name="flowScope.setFocusOnTextfield" value="true" type="java.lang.String" />
			<evaluate expression="roleFrontendService.getCreateMemBean(flowExecutionContext)"
				result="flowScope.memBean" />
			<set name="flowScope.FLOW_LABEL" type="java.lang.String"
				value="roleFrontendService.getFlowLabel(null)" />			
		</on-entry>		
		<!--	    
			To ensure the FlowExecutionContext is set up correctly, the enterEditMode method 
			is called just before render. (Otherwise the FlowKey would still be null)
		-->		
		<on-render>
			<evaluate expression="roleFrontendService.enterEditMode(flowExecutionContext)" />
		</on-render>
		<transition on="save" to="refreshAfterSave" history="invalidate" >
			<evaluate expression="roleFrontendService.saveNewComponentModel(flowScope.memBean, flowRequestContext, flowExecutionContext)" 
				result="flowScope.id"/>
		</transition>
		<transition on="update" to="create"> 
 	 <set name="flowScope.setFocusOnTextfield" value="false" type="java.lang.String" />
			<evaluate expression="roleFrontendService.updateComponentModel(flowScope.memBean, flowRequestContext, flowExecutionContext)" />
		</transition>
		<!--
			going to 'show' doesn't appear really meaningful in this case, so close the flow
		-->
		<transition on="cancel" to="close" validate="false" />		
	</view-state>
	
	<view-state id="create" model="memBean" view="role/create">
		<on-entry>
			<set name="flowScope.FLOW_LABEL" type="java.lang.String"
				value="roleFrontendService.getFlowLabel(flowScope.memBean.componentModel.nameModel.name)" />
		</on-entry>
		<transition on="save" to="refreshAfterSave" history="invalidate" >
			<evaluate expression="roleFrontendService.saveNewComponentModel(flowScope.memBean, flowRequestContext, flowExecutionContext)" 
				result="flowScope.id"/>
		</transition>
		<transition on="update" to="create">
			<evaluate expression="roleFrontendService.updateComponentModel(flowScope.memBean, flowRequestContext, flowExecutionContext)" />
		</transition>
		<!--
			going to 'show' doesn't appear really meaningful in this case, so close the flow
		-->
		<transition on="cancel" to="close" validate="false" />		
	</view-state>	

	<end-state id="close"
		view="externalRedirect:contextRelative:/role/init.do" />
	<end-state id="confirmed" commit="true"
		view="externalRedirect:contextRelative:/role/init.do" />
	<end-state id="closeAll" view="externalRedirect:contextRelative:/role/init.do">
		<on-entry>
			<evaluate expression="roleFrontendService.closeAllFlows(flowRequestContext)"></evaluate>
		</on-entry>
	</end-state>

</flow>